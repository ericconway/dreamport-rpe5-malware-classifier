/* * jquery selectbox - a cosmetic, styleable replacement for select elements * * licensed under the mit license: http://opensource.org/licenses/mit * * v1.2.0 * * https://github.com/marcj/jquery-selectbox */ ;(function ($) { /** * selectbox class. * * @param {htmlelement|jquery} select if it's a jquery object, we use the first element. * @param {object} options * @constructor */ var selectbox = this.selectbox = function (select, options) { if (select instanceof jquery) { if (select.length > 0) { select = select[0]; } else { return; } } this.typetimer = null; this.typesearch = ''; this.ismac = navigator.platform.match(/mac/i); options = 'object' === typeof options ? options : {}; this.selectelement = select; // disable for ios devices (their native controls are more suitable for a touch device) if (!options.mobile && navigator.useragent.match(/ipad|iphone|android|iemobile|blackberry/i)) { return false; } // element must be a select control if ('select' !== select.tagname.tolowercase()) { return false; } this.init(options); } /** * @type {string} */ selectbox.prototype.version = '1.2.0'; /** * @param {object} options * * @returns {boolean} */ selectbox.prototype.init = function (options) { var select = $(this.selectelement); if (select.data('selectbox-control')) { return false; } var control = $('<a class="selectbox" />') , inline = select.attr('multiple') || parseint(select.attr('size')) > 1 , settings = options || {} , tabindex = parseint(select.prop('tabindex')) || 0 , self = this; control .width(select.outerwidth()) .addclass(select.attr('class')) .attr('title', select.attr('title') || '') .attr('tabindex', tabindex) .css('display', 'inline-block') .bind('focus.selectbox', function () { if (this !== document.activeelement && document.body !== document.activeelement) { $(document.activeelement).blur(); } if (control.hasclass('selectbox-active')) { return; } control.addclass('selectbox-active'); select.trigger('focus'); }) .bind('blur.selectbox', function () { if (!control.hasclass('selectbox-active')) { return; } control.removeclass('selectbox-active'); select.trigger('blur'); }); if (!$(window).data('selectbox-bindings')) { $(window) .data('selectbox-bindings', true) .bind('scroll.selectbox', this.hidemenus) .bind('resize.selectbox', this.hidemenus); } if (select.attr('disabled')) { control.addclass('selectbox-disabled'); } // focus on control when label is clicked select.bind('click.selectbox', function (event) { control.focus(); event.preventdefault(); }); // generate control if (inline) { // inline controls options = this.getoptions('inline'); control .append(options) .data('selectbox-options', options).addclass('selectbox-inline selectbox-menushowing') .bind('keydown.selectbox', function (event) { self.handlekeydown(event); }) .bind('keypress.selectbox',function (event) { self.handlekeypress(event); }) .bind('mousedown.selectbox',function (event) { if (1 !== event.which) { return; } if ($(event.target).is('a.selectbox-inline')) { event.preventdefault(); } if (!control.hasclass('selectbox-focus')) { control.focus(); } }) .insertafter(select); // auto-height based on size attribute if (!select[0].style.height) { var size = select.attr('size') ? parseint(select.attr('size')) : 5; // draw a dummy control off-screen, measure, and remove it var tmp = control .clone() .removeattr('id') .css({ position: 'absolute', top: '-9999em' }) .show() .appendto('body'); tmp.find('.selectbox-options').html('<li><a>\u00a0</a></li>'); var optionheight = parseint(tmp.find('.selectbox-options a:first').html('&nbsp;').outerheight()); tmp.remove(); control.height(optionheight * size); } this.disableselection(control); } else { // dropdown controls var label = $('<span class="selectbox-label" />'), arrow = $('<span class="selectbox-arrow" />'); // update label label.attr('class', this.getlabelclass()).text(this.getlabeltext()); options = this.getoptions('dropdown'); options.appendto('body'); control .data('selectbox-options', options) .addclass('selectbox-dropdown') .append(label) .append(arrow) .bind('mousedown.selectbox', function (event) { if (1 === event.which) { if (control.hasclass('selectbox-menushowing')) { self.hidemenus(); } else { event.stoppropagation(); // webkit fix to prevent premature selection of options options .data('selectbox-down-at-x', event.screenx) .data('selectbox-down-at-y', event.screeny); self.showmenu(); } } }) .bind('keydown.selectbox', function (event) { self.handlekeydown(event); }) .bind('keypress.selectbox', function (event) { self.handlekeypress(event); }) .bind('open.selectbox',function (event, triggerdata) { if (triggerdata && triggerdata._selectbox === true) { return; } self.showmenu(); }) .bind('close.selectbox', function (event, triggerdata) { if (triggerdata && triggerdata._selectbox === true) { return; } self.hidemenus(); }) .insertafter(select); // set label width var labelwidth = control.width() - arrow.outerwidth() - (parseint(label.css('paddingleft')) || 0) - (parseint(label.css('paddingright')) || 0); label.width(labelwidth); this.disableselection(control); } // store data for later use and show the control select .addclass('selectbox') .data('selectbox-control', control) .data('selectbox-settings', settings) .hide(); }; /** * @param {string} type 'inline'|'dropdown' * @returns {jquery} */ selectbox.prototype.getoptions = function (type) { var options; var select = $(this.selectelement); var self = this; // private function to handle recursion in the getoptions function. var _getoptions = function (select, options) { // loop through the set in order of element children. select.children('option, optgroup').each(function () { // if the element is an option, add it to the list. if ($(this).is('option')) { // check for a value in the option found. if ($(this).length > 0) { // create an option form the found element. self.generateoptions($(this), options); } else { // no option information found, so add an empty. options.append('<li>\u00a0</li>'); } } else { // if the element is an option group, add the group and call this function on it. var optgroup = $('<li class="selectbox-optgroup" />'); optgroup.text($(this).attr('label')); options.append(optgroup); options = _getoptions($(this), options); } }); // return the built strin return options; }; switch (type) { case 'inline': options = $('<ul class="selectbox-options" />'); options = _getoptions(select, options); options .find('a') .bind('mouseover.selectbox', function (event) { self.addhover($(this).parent()); }) .bind('mouseout.selectbox',function (event) { self.removehover($(this).parent()); }) .bind('mousedown.selectbox',function (event) { if (1 !== event.which) { return } event.preventdefault(); // prevent options from being "dragged" if (!select.selectbox('control').hasclass('selectbox-active')) { select.selectbox('control').focus(); } }) .bind('mouseup.selectbox', function (event) { if (1 !== event.which) { return; } self.hidemenus(); self.selectoption($(this).parent(), event); }); this.disableselection(options); return options; case 'dropdown': options = $('<ul class="selectbox-dropdown-menu selectbox-options" />'); options = _getoptions(select, options); options .data('selectbox-select', select) .css('display', 'none') .appendto('body') .find('a') .bind('mousedown.selectbox', function (event) { if (event.which === 1) { event.preventdefault(); // prevent options from being "dragged" if (event.screenx === options.data('selectbox-down-at-x') && event.screeny === options.data('selectbox-down-at-y')) { options.removedata('selectbox-down-at-x').removedata('selectbox-down-at-y'); self.hidemenus(); } } }) .bind('mouseup.selectbox', function (event) { if (1 !== event.which) { return; } if (event.screenx === options.data('selectbox-down-at-x') && event.screeny === options.data('selectbox-down-at-y')) { return; } else { options.removedata('selectbox-down-at-x').removedata('selectbox-down-at-y'); } self.selectoption($(this).parent()); self.hidemenus(); }) .bind('mouseover.selectbox', function (event) { self.addhover($(this).parent()); }) .bind('mouseout.selectbox', function (event) { self.removehover($(this).parent()); }); // inherit classes for dropdown menu var classes = select.attr('class') || ''; if ('' !== classes) { classes = classes.split(' '); for (var i in classes) { options.addclass(classes[i] + '-selectbox-dropdown-menu'); } } this.disableselection(options); return options; } }; /** * returns the current class of the selected option. * * @returns {string} */ selectbox.prototype.getlabelclass = function () { var selected = $(this.selectelement).find('option:selected'); return ('selectbox-label ' + (selected.attr('class') || '')).replace(/\s+$/, ''); }; /** * returns the current label of the selected option. * * @returns {string} */ selectbox.prototype.getlabeltext = function () { var selected = $(this.selectelement).find('option:selected'); return selected.text() || '\u00a0'; }; /** * sets the label. * this method uses the getlabelclass() and getlabeltext() methods. */ selectbox.prototype.setlabel = function () { var select = $(this.selectelement); var control = select.data('selectbox-control'); if (!control) { return; } control .find('.selectbox-label') .attr('class', this.getlabelclass()) .text(this.getlabeltext()); }; /** * destroys the selectbox instance and shows the origin select element. * */ selectbox.prototype.destroy = function () { var select = $(this.selectelement); var control = select.data('selectbox-control'); if (!control) { return; } var options = control.data('selectbox-options'); options.remove(); control.remove(); select .removeclass('selectbox') .removedata('selectbox-control') .data('selectbox-control', null) .removedata('selectbox-settings') .data('selectbox-settings', null) .show(); }; /** * refreshes the option elements. */ selectbox.prototype.refresh = function () { var select = $(this.selectelement) , control = select.data('selectbox-control') , type = control.hasclass('selectbox-dropdown') ? 'dropdown' : 'inline' , options; // remove old options control.data('selectbox-options').remove(); // generate new options options = this.getoptions(type); control.data('selectbox-options', options); switch (type) { case 'inline': control.append(options); break; case 'dropdown': // update label this.setlabel(); $("body").append(options); break; } // restore opened dropdown state (original menu was trashed) if ('dropdown' === type && control.hasclass('selectbox-menushowing')) { this.showmenu(); } }; /** * shows the dropdown menu. */ selectbox.prototype.showmenu = function () { var self = this , select = $(this.selectelement) , control = select.data('selectbox-control') , settings = select.data('selectbox-settings') , options = control.data('selectbox-options'); if (control.hasclass('selectbox-disabled')) { return false; } this.hidemenus(); var borderbottomwidth = parseint(control.css('borderbottomwidth')) || 0; // menu position options .width(control.innerwidth()) .css({ top: control.offset().top + control.outerheight() - borderbottomwidth, left: control.offset().left }); if (select.triggerhandler('beforeopen')) { return false; } var dispatchopenevent = function () { select.triggerhandler('open', { _selectbox: true }); }; // show menu switch (settings.menutransition) { case 'fade': options.fadein(settings.menuspeed, dispatchopenevent); break; case 'slide': options.slidedown(settings.menuspeed, dispatchopenevent); break; default: options.show(settings.menuspeed, dispatchopenevent); break; } if (!settings.menuspeed) { dispatchopenevent(); } // center on selected option var li = options.find('.selectbox-selected:first'); this.keepoptioninview(li, true); this.addhover(li); control.addclass('selectbox-menushowing'); $(document).bind('mousedown.selectbox', function (event) { if (1 === event.which) { if ($(event.target).parents().andself().hasclass('selectbox-options')) { return; } self.hidemenus(); } }); }; /** * hides the menu of all instances. */ selectbox.prototype.hidemenus = function () { if ($(".selectbox-dropdown-menu:visible").length === 0) { return; } $(document).unbind('mousedown.selectbox'); $(".selectbox-dropdown-menu").each(function () { var options = $(this) , select = options.data('selectbox-select') , control = select.data('selectbox-control') , settings = select.data('selectbox-settings'); if (select.triggerhandler('beforeclose')) { return false; } var dispatchcloseevent = function () { select.triggerhandler('close', { _selectbox: true }); }; if (settings) { switch (settings.menutransition) { case 'fade': options.fadeout(settings.menuspeed, dispatchcloseevent); break; case 'slide': options.slideup(settings.menuspeed, dispatchcloseevent); break; default: options.hide(settings.menuspeed, dispatchcloseevent); break; } if (!settings.menuspeed) { dispatchcloseevent(); } control.removeclass('selectbox-menushowing'); } else { $(this).hide(); $(this).triggerhandler('close', { _selectbox: true }); $(this).removeclass('selectbox-menushowing'); } }); }; /** * selects an option. * * @param {htmlelement} li * @param {domevent} event * @returns {boolean} */ selectbox.prototype.selectoption = function (li, event) { var select = $(this.selectelement); li = $(li); var control = select.data('selectbox-control') , settings = select.data('selectbox-settings'); if (control.hasclass('selectbox-disabled')) { return false; } if (0 === li.length || li.hasclass('selectbox-disabled')) { return false; } if (select.attr('multiple')) { // if event.shiftkey is true, this will select all options between li and the last li selected if (event.shiftkey && control.data('selectbox-last-selected')) { li.toggleclass('selectbox-selected'); var affectedoptions; if (li.index() > control.data('selectbox-last-selected').index()) { affectedoptions = li .siblings() .slice(control.data('selectbox-last-selected').index(), li.index()); } else { affectedoptions = li .siblings() .slice(li.index(), control.data('selectbox-last-selected').index()); } affectedoptions = affectedoptions.not('.selectbox-optgroup, .selectbox-disabled'); if (li.hasclass('selectbox-selected')) { affectedoptions.addclass('selectbox-selected'); } else { affectedoptions.removeclass('selectbox-selected'); } } else if ((this.ismac && event.metakey) || (!this.ismac && event.ctrlkey)) { li.toggleclass('selectbox-selected'); } else { li.siblings().removeclass('selectbox-selected'); li.addclass('selectbox-selected'); } } else { li.siblings().removeclass('selectbox-selected'); li.addclass('selectbox-selected'); } if (control.hasclass('selectbox-dropdown')) { control.find('.selectbox-label').text(li.text()); } // update original control's value var i = 0, selection = []; if (select.attr('multiple')) { control.find('.selectbox-selected a').each(function () { selection[i++] = $(this).attr('rel'); }); } else { selection = li.find('a').attr('rel'); } // remember most recently selected item control.data('selectbox-last-selected', li); // change callback if (select.val() !== selection) { select.val(selection); this.setlabel(); select.trigger('change'); } return true; }; /** * adds the hover class. * * @param {htmlelement} li */ selectbox.prototype.addhover = function (li) { li = $(li); var select = $(this.selectelement) , control = select.data('selectbox-control') , options = control.data('selectbox-options'); options.find('.selectbox-hover').removeclass('selectbox-hover'); li.addclass('selectbox-hover'); }; /** * returns the original html select element. * * @returns {htmlelement} */ selectbox.prototype.getselectelement = function () { return this.selectelement; }; /** * remove the hover class. * * @param {htmlelement} li */ selectbox.prototype.removehover = function (li) { li = $(li); var select = $(this.selectelement) , control = select.data('selectbox-control') , options = control.data('selectbox-options'); options.find('.selectbox-hover').removeclass('selectbox-hover'); }; /** * checks if the widget is in the view. * * @param {jquery} li * @param {boolean} center */ selectbox.prototype.keepoptioninview = function (li, center) { if (!li || li.length === 0) { return; } var select = $(this.selectelement) , control = select.data('selectbox-control') , options = control.data('selectbox-options') , scrollbox = control.hasclass('selectbox-dropdown') ? options : options.parent() , top = parseint(li.offset().top -scrollbox.position().top) , bottom = parseint(top + li.outerheight()); if (center) { scrollbox.scrolltop(li.offset().top - scrollbox.offset().top + scrollbox.scrolltop() - (scrollbox.height() / 2)); } else { if (top < 0) { scrollbox.scrolltop(li.offset().top - scrollbox.offset().top + scrollbox.scrolltop()); } if (bottom > scrollbox.height()) { scrollbox.scrolltop((li.offset().top + li.outerheight()) - scrollbox.offset().top + scrollbox.scrolltop() - scrollbox.height()); } } }; /** * handles the keydown event. * handles open/close and arrow key functionality * * @param {domevent} event */ selectbox.prototype.handlekeydown = function (event) { var select = $(this.selectelement) , control = select.data('selectbox-control') , options = control.data('selectbox-options') , settings = select.data('selectbox-settings') , totaloptions = 0, i = 0; if (control.hasclass('selectbox-disabled')) { return; } switch (event.keycode) { case 8: // backspace event.preventdefault(); this.typesearch = ''; break; case 9: // tab case 27: // esc this.hidemenus(); this.removehover(); break; case 13: // enter if (control.hasclass('selectbox-menushowing')) { this.selectoption(options.find('li.selectbox-hover:first'), event); if (control.hasclass('selectbox-dropdown')) { this.hidemenus(); } } else { this.showmenu(); } break; case 38: // up case 37: // left event.preventdefault(); if (control.hasclass('selectbox-menushowing')) { var prev = options.find('.selectbox-hover').prev('li'); totaloptions = options.find('li:not(.selectbox-optgroup)').length; i = 0; while (prev.length === 0 || prev.hasclass('selectbox-disabled') || prev.hasclass('selectbox-optgroup')) { prev = prev.prev('li'); if (prev.length === 0) { if (settings.loopoptions) { prev = options.find('li:last'); } else { prev = options.find('li:first'); } } if (++i >= totaloptions) { break; } } this.addhover(prev); this.selectoption(prev, event); this.keepoptioninview(prev); } else { this.showmenu(); } break; case 40: // down case 39: // right event.preventdefault(); if (control.hasclass('selectbox-menushowing')) { var next = options.find('.selectbox-hover').next('li'); totaloptions = options.find('li:not(.selectbox-optgroup)').length; i = 0; while (0 === next.length || next.hasclass('selectbox-disabled') || next.hasclass('selectbox-optgroup')) { next = next.next('li'); if (next.length === 0) { if (settings.loopoptions) { next = options.find('li:first'); } else { next = options.find('li:last'); } } if (++i >= totaloptions) { break; } } this.addhover(next); this.selectoption(next, event); this.keepoptioninview(next); } else { this.showmenu(); } break; } }; /** * handles the keypress event. * handles type-to-find functionality * * @param {domevent} event */ selectbox.prototype.handlekeypress = function (event) { var select = $(this.selectelement) , control = select.data('selectbox-control') , options = control.data('selectbox-options') , self = this; if (control.hasclass('selectbox-disabled')) { return; } switch (event.keycode) { case 9: // tab case 27: // esc case 13: // enter case 38: // up case 37: // left case 40: // down case 39: // right // don't interfere with the keydown event! break; default: // type to find if (!control.hasclass('selectbox-menushowing')) { this.showmenu(); } event.preventdefault(); cleartimeout(this.typetimer); this.typesearch += string.fromcharcode(event.charcode || event.keycode); options.find('a').each(function () { if ($(this).text().substr(0, self.typesearch.length).tolowercase() === self.typesearch.tolowercase()) { self.addhover($(this).parent()); self.selectoption($(this).parent(), event); self.keepoptioninview($(this).parent()); return false; } }); // clear after a brief pause this.typetimer = settimeout(function () { self.typesearch = ''; }, 1000); break; } }; /** * enables the selectbox. */ selectbox.prototype.enable = function () { var select = $(this.selectelement); select.prop('disabled', false); var control = select.data('selectbox-control'); if (!control) { return; } control.removeclass('selectbox-disabled'); }; /** * disables the selectbox. */ selectbox.prototype.disable = function () { var select = $(this.selectelement); select.prop('disabled', true); var control = select.data('selectbox-control'); if (!control) { return; } control.addclass('selectbox-disabled'); }; /** * sets the current value. * * @param {string} value */ selectbox.prototype.setvalue = function (value) { var select = $(this.selectelement); select.val(value); value = select.val(); // ie9's select would be null if it was set with a non-exist options value if (null === value) { // so check it here and set it with the first option's value if possible value = select.children().first().val(); select.val(value); } var control = select.data('selectbox-control'); if (!control) { return; } var settings = select.data('selectbox-settings') , options = control.data('selectbox-options'); // update label this.setlabel(); // update control values options.find('.selectbox-selected').removeclass('selectbox-selected'); options.find('a').each(function () { if (typeof(value) === 'object') { for (var i = 0; i < value.length; i++) { if ($(this).attr('rel') == value[i]) { $(this).parent().addclass('selectbox-selected'); } } } else { if ($(this).attr('rel') == value) { $(this).parent().addclass('selectbox-selected'); } } }); if (settings.change) { settings.change.call(select); } }; /** * sets the option elements. * * @param {string|object} options */ selectbox.prototype.setoptions = function (options) { var select = $(this.selectelement) , control = select.data('selectbox-control'); switch (typeof(options)) { case 'string': select.html(options); break; case 'object': select.html(''); for (var i in options) { if (options[i] === null) { continue; } if (typeof(options[i]) === 'object') { var optgroup = $('<optgroup label="' + i + '" />'); for (var j in options[i]) { optgroup.append('<option value="' + j + '">' + options[i][j] + '</option>'); } select.append(optgroup); } else { var option = $('<option value="' + i + '">' + options[i] + '</option>'); select.append(option); } } break; } if (control) { // refresh the control this.refresh(); } }; /** * disables the selection. * * @param {*} selector */ selectbox.prototype.disableselection = function (selector) { $(selector).css('mozuserselect', 'none').bind('selectstart', function (event) { event.preventdefault(); }); }; /** * generates the options. * * @param {jquery} self * @param {jquery} options */ selectbox.prototype.generateoptions = function (self, options) { var li = $('<li />'), a = $('<a />'); li.addclass(self.attr('class')); li.data(self.data()); a.attr('rel', self.val()).text(self.text()); li.append(a); if (self.attr('disabled')) { li.addclass('selectbox-disabled'); } if (self.attr('selected')) { li.addclass('selectbox-selected'); } options.append(li); }; /** * extends the jquery.fn object. */ $.extend($.fn, { selectbox: function (method, options) { var selectbox; switch (method) { case 'control': return $(this).data('selectbox-control'); case 'settings': if (!options) { return $(this).data('selectbox-settings'); } $(this).each(function () { $(this).data('selectbox-settings', $.extend(true, $(this).data('selectbox-settings'), options)); }); break; case 'options': // getter if (undefined === options) { return $(this).data('selectbox-control').data('selectbox-options'); } // setter $(this).each(function () { if (selectbox = $(this).data('selectbox')) { selectbox.setoptions(options); } }); break; case 'value': // empty string is a valid value if (undefined === options) { return $(this).val(); } $(this).each(function () { if (selectbox = $(this).data('selectbox')) { selectbox.setvalue(options); } }); break; case 'refresh': $(this).each(function () { if (selectbox = $(this).data('selectbox')) { selectbox.refresh(); } }); break; case 'enable': $(this).each(function () { if (selectbox = $(this).data('selectbox')) { selectbox.enable(this); } }); break; case 'disable': $(this).each(function () { if (selectbox = $(this).data('selectbox')) { selectbox.disable(); } }); break; case 'destroy': $(this).each(function () { if (selectbox = $(this).data('selectbox')) { selectbox.destroy(); $(this).data('selectbox', null); } }); break; case 'instance': return $(this).data('selectbox'); default: $(this).each(function (idx, select) { if (!$(select).data('selectbox')) { $(select).data('selectbox', new selectbox(select, method)); } }); break; } return $(this); } }); })(jquery); 