{
    "filepath": "/home/chris/data/rpe005/malware_samples_exercise/20190522_110020_rpe005_malware_alert/bxslider[1].js",
    "fileinfo": {
        "labels": {
            "family": "bad_sample_6",
            "software": "test_file"
        },
        "md5": "8fe4c71995e4887a26dbf8a946e3dc27",
        "type": "ASCII text",
        "clamav": "OK",
        "blobs": "Extracted 2 blobs (2 ASCII)"
    },
    "plugins": [
        {
            "plugin": "extractors.disassembly",
            "version": "0.1",
            "results": {}
        },
        {
            "plugin": "extractors.strings",
            "version": "0.1",
            "results": {
                "* BxSlider v4.1.1 - Fully loaded, responsive content slider": 1,
                "* http://bxslider.com": 1,
                "* Copyright 2012, Steven Wanderski - http://stevenwanderski.com - http://bxcreative.com": 1,
                "* Written while drinking Belgian ales and listening to jazz": 1,
                "* Released under the WTFPL license - http://sam.zoy.org/wtfpl/": 1,
                "(function($){": 1,
                "var plugin = {}": 1,
                "var defaults = {": 1,
                "// GENERAL": 1,
                "mode: 'horizontal',": 1,
                "slideSelector: '',": 1,
                "infiniteLoop: true,": 1,
                "hideControlOnEnd: false,": 1,
                "speed: 500,": 1,
                "easing: null,": 1,
                "slideMargin: 0,": 1,
                "startSlide: 0,": 1,
                "randomStart: false,": 1,
                "captions: false,": 1,
                "ticker: false,": 1,
                "tickerHover: false,": 1,
                "adaptiveHeight: false,": 1,
                "adaptiveHeightSpeed: 500,": 1,
                "video: false,": 1,
                "useCSS: true,": 1,
                "preloadImages: 'visible',": 1,
                "responsive: true,": 1,
                "// TOUCH": 1,
                "touchEnabled: true,": 1,
                "swipeThreshold: 50,": 1,
                "oneToOneTouch: true,": 1,
                "preventDefaultSwipeX: true,": 1,
                "preventDefaultSwipeY: false,": 1,
                "// PAGER": 1,
                "pager: true,": 1,
                "pagerType: 'full',": 1,
                "pagerShortSeparator: ' / ',": 1,
                "pagerSelector: null,": 1,
                "buildPager: null,": 1,
                "pagerCustom: null,": 1,
                "// CONTROLS": 1,
                "controls: true,": 1,
                "nextText: 'Next',": 1,
                "prevText: 'Prev',": 1,
                "nextSelector: null,": 1,
                "prevSelector: null,": 1,
                "autoControls: false,": 1,
                "startText: 'Start',": 1,
                "stopText: 'Stop',": 1,
                "autoControlsCombine: false,": 1,
                "autoControlsSelector: null,": 1,
                "// AUTO": 1,
                "auto: false,": 1,
                "pause: 4000,": 1,
                "autoStart: true,": 1,
                "autoDirection: 'next',": 1,
                "autoHover: false,": 1,
                "autoDelay: 0,": 1,
                "// CAROUSEL": 1,
                "minSlides: 1,": 1,
                "maxSlides: 1,": 1,
                "moveSlides: 0,": 1,
                "slideWidth: 0,": 1,
                "// CALLBACKS": 1,
                "onSliderLoad: function() {},": 1,
                "onSlideBefore: function() {},": 1,
                "onSlideAfter: function() {},": 1,
                "onSlideNext: function() {},": 1,
                "onSlidePrev: function() {}": 1,
                "$.fn.bxSlider = function(options){": 1,
                "if(this.length == 0) return this": 1,
                "// support mutltiple elements": 1,
                "if(this.length > 1){": 1,
                "this.each(function(){$(this).bxSlider(options)})": 1,
                "return this": 4,
                "// create a namespace to be used throughout the plugin": 1,
                "var slider = {}": 1,
                "// set a reference to our slider element": 1,
                "var el = this": 1,
                "plugin.el = this": 3,
                "* Makes slideshow responsive": 1,
                "// first get the original window dimens (thanks alot IE)": 1,
                "var windowWidth = $(window).width()": 1,
                "var windowHeight = $(window).height()": 1,
                "* ===================================================================================": 4,
                "* = PRIVATE FUNCTIONS": 1,
                "* Initializes namespace settings to be used throughout plugin": 1,
                "var init = function(){": 1,
                "// merge user-supplied options with the defaults": 1,
                "slider.settings = $.extend({}, defaults, options)": 1,
                "// parse slideWidth setting": 1,
                "slider.settings.slideWidth = parseInt(slider.settings.slideWidth)": 1,
                "// store the original children": 1,
                "slider.children = el.children(slider.settings.slideSelector)": 1,
                "// check if actual number of slides is less than minSlides / maxSlides": 1,
                "if(slider.children.length < slider.settings.minSlides) slider.settings.minSlides = slider.children.length": 1,
                "if(slider.children.length < slider.settings.maxSlides) slider.settings.maxSlides = slider.children.length": 1,
                "// if random start, set the startSlide setting to random number": 1,
                "if(slider.settings.randomStart) slider.settings.startSlide = Math.floor(Math.random() * slider.children.length)": 1,
                "// store active slide information": 1,
                "slider.active = { index: slider.settings.startSlide }": 1,
                "// store if the slider is in carousel mode (displaying / moving multiple slides)": 1,
                "slider.carousel = slider.settings.minSlides > 1 || slider.settings.maxSlides > 1": 1,
                "// if carousel, force preloadImages = 'all'": 1,
                "if(slider.carousel) slider.settings.preloadImages = 'all'": 1,
                "// calculate the min / max width thresholds based on min / max number of slides": 1,
                "// used to setup and update carousel slides dimensions": 1,
                "slider.minThreshold = (slider.settings.minSlides * slider.settings.slideWidth) + ((slider.settings.minSlides - 1) * slider.settings.slideMargin)": 1,
                "slider.maxThreshold = (slider.settings.maxSlides * slider.settings.slideWidth) + ((slider.settings.maxSlides - 1) * slider.settings.slideMargin)": 1,
                "// store the current state of the slider (if currently animating, working is true)": 1,
                "slider.working = false": 2,
                "// initialize the controls object": 1,
                "slider.controls = {}": 1,
                "// initialize an auto interval": 1,
                "slider.interval = null": 4,
                "// determine which property to use for transitions": 1,
                "slider.animProp = slider.settings.mode == 'vertical' ? 'top' : 'left'": 1,
                "// determine if hardware acceleration can be used": 1,
                "slider.usingCSS = slider.settings.useCSS && slider.settings.mode != 'fade' && (function(){": 1,
                "// create our test div element": 1,
                "var div = document.createElement('div')": 1,
                "// css transition properties": 1,
                "var props = ['WebkitPerspective', 'MozPerspective', 'OPerspective', 'msPerspective']": 1,
                "// test for each property": 1,
                "for(var i in props){": 1,
                "if(div.style[props[i]] !== undefined){": 1,
                "slider.cssPrefix = props[i].replace('Perspective', '').toLowerCase()": 1,
                "slider.animProp = '-' + slider.cssPrefix + '-transform'": 1,
                "return true": 3,
                "return false": 1,
                "// if vertical mode always make maxSlides and minSlides equal": 1,
                "if(slider.settings.mode == 'vertical') slider.settings.maxSlides = slider.settings.minSlides": 1,
                "// save original style data": 1,
                "el.data(\"origStyle\", el.attr(\"style\"))": 1,
                "el.children(slider.settings.slideSelector).each(function() {": 1,
                "$(this).data(\"origStyle\", $(this).attr(\"style\"))": 1,
                "// perform all DOM / CSS modifications": 1,
                "setup()": 1,
                "* Performs all DOM and CSS modifications": 1,
                "var setup = function(){": 1,
                "// wrap el in a wrapper": 1,
                "el.wrap('<div class=\"bx-wrapper\">": 1,
                "<div class=\"bx-viewport\">": 2,
                "</div>": 2,
                "</div>')": 8,
                "// store a namspace reference to .bx-viewport": 1,
                "slider.viewport = el.parent()": 1,
                "// add a loading div to display while images are loading": 1,
                "slider.loader = $('<div class=\"bx-loading\" />')": 1,
                "slider.viewport.prepend(slider.loader)": 3,
                "// set el to a massive width, to hold any needed slides": 1,
                "// also strip any margin and padding from el": 1,
                "el.css({": 1,
                "width: slider.settings.mode == 'horizontal' ? (slider.children.length * 100 + 215) + '%' : 'auto',": 1,
                "position: 'relative'": 3,
                "// if using CSS, add the easing property": 1,
                "if(slider.usingCSS && slider.settings.easing){": 1,
                "el.css('-' + slider.cssPrefix + '-transition-timing-function', slider.settings.easing)": 1,
                "// if not using CSS and no easing value was supplied, use the default JS animation easing (swing)": 1,
                "}else if(!slider.settings.easing){": 1,
                "slider.settings.easing = 'swing'": 1,
                "var slidesShowing = getNumberSlidesShowing()": 1,
                "// make modifications to the viewport (.bx-viewport)": 1,
                "slider.viewport.css({": 1,
                "width: '100%',": 1,
                "overflow: 'hidden',": 1,
                "slider.viewport.parent().css({": 2,
                "maxWidth: getViewportMaxWidth()": 1,
                "// make modification to the wrapper (.bx-wrapper)": 1,
                "if(!slider.settings.pager) {": 1,
                "margin: '0 auto 0px'": 1,
                "// apply css to all slider children": 1,
                "slider.children.css({": 2,
                "'float': slider.settings.mode == 'horizontal' ? 'left' : 'none',": 1,
                "listStyle: 'none',": 1,
                "// apply the calculated width after the float is applied to prevent scrollbar interference": 1,
                "slider.children.css('width', getSlideWidth())": 1,
                "// if slideMargin is supplied, add the css": 1,
                "if(slider.settings.mode == 'horizontal' && slider.settings.slideMargin > 0) slider.children.css('marginRight', slider.settings.slideMargin)": 1,
                "if(slider.settings.mode == 'vertical' && slider.settings.slideMargin > 0) slider.children.css('marginBottom', slider.settings.slideMargin)": 1,
                "// if \"fade\" mode, add positioning and z-index CSS": 1,
                "if(slider.settings.mode == 'fade'){": 3,
                "position: 'absolute',": 1,
                "zIndex: 0,": 1,
                "display: 'none'": 1,
                "// prepare the z-index on the showing element": 1,
                "slider.children.eq(slider.settings.startSlide).css({zIndex: 50, display: 'block'})": 1,
                "// create an element to contain all slider controls (pager, start / stop, etc)": 1,
                "slider.controls.el = $('<div class=\"bx-controls\" />')": 1,
                "// if captions are requested, add them": 1,
                "if(slider.settings.captions) appendCaptions()": 1,
                "// check if startSlide is last slide": 1,
                "slider.active.last = slider.settings.startSlide == getPagerQty() - 1": 1,
                "// if video is true, set up the fitVids plugin": 1,
                "if(slider.settings.video) el.fitVids()": 1,
                "// set the default preload selector (visible)": 1,
                "var preloadSelector = slider.children.eq(slider.settings.startSlide)": 1,
                "if (slider.settings.preloadImages == \"all\") preloadSelector = slider.children": 1,
                "// only check for control addition if not in \"ticker\" mode": 1,
                "if(!slider.settings.ticker){": 1,
                "// if pager is requested, add it": 1,
                "if(slider.settings.pager) appendPager()": 1,
                "// if controls are requested, add them": 1,
                "if(slider.settings.controls) appendControls()": 1,
                "// if auto is true, and auto controls are requested, add them": 1,
                "if(slider.settings.auto && slider.settings.autoControls) appendControlsAuto()": 1,
                "// if any control option is requested, add the controls wrapper": 1,
                "if(slider.settings.controls || slider.settings.autoControls || slider.settings.pager) slider.viewport.after(slider.controls.el)": 1,
                "// if ticker mode, do not allow a pager": 1,
                "}else{": 30,
                "slider.settings.pager = false": 2,
                "// preload all images, then perform final DOM / CSS modifications that depend on images being loaded": 1,
                "loadElements(preloadSelector, start)": 1,
                "var loadElements = function(selector, callback){": 1,
                "var total = selector.find('img, iframe').length": 1,
                "if (total == 0){": 1,
                "callback()": 1,
                "return": 6,
                "var count = 0": 1,
                "selector.find('img, iframe').each(function(){": 1,
                "if($(this).is('img')) $(this).attr('src', $(this).attr('src') + '?timestamp=' + new Date().getTime())": 1,
                "$(this).load(function(){": 1,
                "setTimeout(function(){": 1,
                "if(++count == total) callback()": 1,
                "* Start the slider": 1,
                "var start = function(){": 1,
                "// if infinite loop, prepare additional slides": 1,
                "if(slider.settings.infiniteLoop && slider.settings.mode != 'fade' && !slider.settings.ticker){": 1,
                "var slice = slider.settings.mode == 'vertical' ? slider.settings.minSlides : slider.settings.maxSlides": 1,
                "var sliceAppend = slider.children.slice(0, slice).clone().addClass('bx-clone')": 1,
                "var slicePrepend = slider.children.slice(-slice).clone().addClass('bx-clone')": 1,
                "el.append(sliceAppend).prepend(slicePrepend)": 1,
                "// remove the loading DOM element": 1,
                "slider.loader.remove()": 1,
                "// set the left / top position of \"el\"": 1,
                "setSlidePosition()": 1,
                "// if \"vertical\" mode, always use adaptiveHeight to prevent odd behavior": 1,
                "if (slider.settings.mode == 'vertical') slider.settings.adaptiveHeight = true": 1,
                "// set the viewport height": 1,
                "slider.viewport.height(getViewportHeight())": 1,
                "// make sure everything is positioned just right (same as a window resize)": 1,
                "el.redrawSlider()": 2,
                "// onSliderLoad callback": 1,
                "slider.settings.onSliderLoad(slider.active.index)": 1,
                "// slider has been fully initialized": 1,
                "slider.initialized = true": 1,
                "// bind the resize call to the window": 1,
                "if (slider.settings.responsive) $(window).bind('resize', resizeWindow)": 1,
                "// if auto is true, start the show": 1,
                "if (slider.settings.auto && slider.settings.autoStart) initAuto()": 1,
                "// if ticker is true, start the ticker": 1,
                "if (slider.settings.ticker) initTicker()": 1,
                "// if pager is requested, make the appropriate pager link active": 1,
                "if (slider.settings.pager) updatePagerActive(slider.settings.startSlide)": 1,
                "// check for any updates to the controls (like hideControlOnEnd updates)": 1,
                "if (slider.settings.controls) updateDirectionControls()": 1,
                "// if touchEnabled is true, setup the touch events": 1,
                "if (slider.settings.touchEnabled && !slider.settings.ticker) initTouch()": 1,
                "* Returns the calculated height of the viewport, used to determine either adaptiveHeight or the maxHeight value": 1,
                "var getViewportHeight = function(){": 1,
                "var height = 0": 1,
                "// first determine which children (slides) should be used in our height calculation": 1,
                "var children = $()": 1,
                "// if mode is not \"vertical\" and adaptiveHeight is false, include all children": 1,
                "if(slider.settings.mode != 'vertical' && !slider.settings.adaptiveHeight){": 1,
                "children = slider.children": 1,
                "// if not carousel, return the single active child": 1,
                "if(!slider.carousel){": 1,
                "children = slider.children.eq(slider.active.index)": 1,
                "// if carousel, return a slice of children": 1,
                "// get the individual slide index": 1,
                "var currentIndex = slider.settings.moveSlides == 1 ? slider.active.index : slider.active.index * getMoveBy()": 1,
                "// add the current slide to the children": 1,
                "children = slider.children.eq(currentIndex)": 1,
                "// cycle through the remaining \"showing\" slides": 1,
                "for (i = 1": 1,
                "i <= slider.settings.maxSlides - 1": 1,
                "// if looped back to the start": 1,
                "if(currentIndex + i >= slider.children.length){": 1,
                "children = children.add(slider.children.eq(i - 1))": 1,
                "children = children.add(slider.children.eq(currentIndex + i))": 1,
                "// if \"vertical\" mode, calculate the sum of the heights of the children": 1,
                "if(slider.settings.mode == 'vertical'){": 1,
                "children.each(function(index) {": 1,
                "height += $(this).outerHeight()": 1,
                "// add user-supplied margins": 1,
                "if(slider.settings.slideMargin > 0){": 1,
                "height += slider.settings.slideMargin * (slider.settings.minSlides - 1)": 1,
                "// if not \"vertical\" mode, calculate the max height of the children": 1,
                "height = Math.max.apply(Math, children.map(function(){": 1,
                "return $(this).outerHeight(false)": 1,
                "}).get())": 3,
                "return height": 1,
                "* Returns the calculated width to be used for the outer wrapper / viewport": 1,
                "var getViewportMaxWidth = function(){": 1,
                "var width = '100%'": 1,
                "if(slider.settings.slideWidth > 0){": 1,
                "if(slider.settings.mode == 'horizontal'){": 4,
                "width = (slider.settings.maxSlides * slider.settings.slideWidth) + ((slider.settings.maxSlides - 1) * slider.settings.slideMargin)": 1,
                "width = slider.settings.slideWidth": 1,
                "return width": 1,
                "* Returns the calculated width to be applied to each slide": 1,
                "var getSlideWidth = function(){": 1,
                "// start with any user-supplied slide width": 1,
                "var newElWidth = slider.settings.slideWidth": 1,
                "// get the current viewport width": 1,
                "var wrapWidth = slider.viewport.width()": 1,
                "// if slide width was not supplied, or is larger than the viewport use the viewport width": 1,
                "if(slider.settings.slideWidth == 0 ||": 1,
                "(slider.settings.slideWidth > wrapWidth && !slider.carousel) ||": 1,
                "slider.settings.mode == 'vertical'){": 1,
                "newElWidth = wrapWidth": 1,
                "// if carousel, use the thresholds to determine the width": 1,
                "}else if(slider.settings.maxSlides > 1 && slider.settings.mode == 'horizontal'){": 1,
                "if(wrapWidth > slider.maxThreshold){": 1,
                "// newElWidth = (wrapWidth - (slider.settings.slideMargin * (slider.settings.maxSlides - 1))) / slider.settings.maxSlides": 1,
                "}else if(wrapWidth < slider.minThreshold){": 1,
                "newElWidth = (wrapWidth - (slider.settings.slideMargin * (slider.settings.minSlides - 1))) / slider.settings.minSlides": 1,
                "return newElWidth": 1,
                "* Returns the number of slides currently visible in the viewport (includes partially visible slides)": 1,
                "var getNumberSlidesShowing = function(){": 1,
                "var slidesShowing = 1": 1,
                "if(slider.settings.mode == 'horizontal' && slider.settings.slideWidth > 0){": 1,
                "// if viewport is smaller than minThreshold, return minSlides": 1,
                "if(slider.viewport.width() < slider.minThreshold){": 1,
                "slidesShowing = slider.settings.minSlides": 2,
                "// if viewport is larger than minThreshold, return maxSlides": 1,
                "}else if(slider.viewport.width() > slider.maxThreshold){": 1,
                "slidesShowing = slider.settings.maxSlides": 1,
                "// if viewport is between min / max thresholds, divide viewport width by first child width": 1,
                "var childWidth = slider.children.first().width()": 1,
                "slidesShowing = Math.floor(slider.viewport.width() / childWidth)": 1,
                "// if \"vertical\" mode, slides showing will always be minSlides": 1,
                "}else if(slider.settings.mode == 'vertical'){": 2,
                "return slidesShowing": 1,
                "* Returns the number of pages (one full viewport of slides is one \"page\")": 1,
                "var getPagerQty = function(){": 1,
                "var pagerQty = 0": 1,
                "// if moveSlides is specified by the user": 1,
                "if(slider.settings.moveSlides > 0){": 1,
                "if(slider.settings.infiniteLoop){": 2,
                "pagerQty = slider.children.length / getMoveBy()": 1,
                "// use a while loop to determine pages": 1,
                "var breakPoint = 0": 1,
                "var counter = 0": 1,
                "// when breakpoint goes above children length, counter is the number of pages": 1,
                "while (breakPoint < slider.children.length){": 1,
                "++pagerQty": 1,
                "breakPoint = counter + getNumberSlidesShowing()": 1,
                "counter += slider.settings.moveSlides <= getNumberSlidesShowing() ? slider.settings.moveSlides : getNumberSlidesShowing()": 1,
                "// if moveSlides is 0 (auto) divide children length by sides showing, then round up": 1,
                "pagerQty = Math.ceil(slider.children.length / getNumberSlidesShowing())": 1,
                "return pagerQty": 1,
                "* Returns the number of indivual slides by which to shift the slider": 1,
                "var getMoveBy = function(){": 1,
                "// if moveSlides was set by the user and moveSlides is less than number of slides showing": 1,
                "if(slider.settings.moveSlides > 0 && slider.settings.moveSlides <= getNumberSlidesShowing()){": 1,
                "return slider.settings.moveSlides": 1,
                "// if moveSlides is 0 (auto)": 1,
                "return getNumberSlidesShowing()": 1,
                "* Sets the slider's (el) left or top position": 1,
                "var setSlidePosition = function(){": 1,
                "// if last slide, not infinite loop, and number of children is larger than specified maxSlides": 1,
                "if(slider.children.length > slider.settings.maxSlides && slider.active.last && !slider.settings.infiniteLoop){": 1,
                "if (slider.settings.mode == 'horizontal'){": 1,
                "// get the last child's position": 1,
                "var lastChild = slider.children.last()": 1,
                "var position = lastChild.position()": 1,
                "// set the left position": 1,
                "setPositionProperty(-(position.left - (slider.viewport.width() - lastChild.width())), 'reset', 0)": 1,
                "// get the last showing index's position": 1,
                "var lastShowingIndex = slider.children.length - slider.settings.minSlides": 2,
                "var position = slider.children.eq(lastShowingIndex).position()": 1,
                "// set the top position": 1,
                "setPositionProperty(-position.top, 'reset', 0)": 1,
                "// if not last slide": 1,
                "// get the position of the first showing slide": 1,
                "var position = slider.children.eq(slider.active.index * getMoveBy()).position()": 1,
                "// check for last slide": 1,
                "if (slider.active.index == getPagerQty() - 1) slider.active.last = true": 1,
                "// set the repective position": 1,
                "if (position != undefined){": 1,
                "if (slider.settings.mode == 'horizontal') setPositionProperty(-position.left, 'reset', 0)": 1,
                "else if (slider.settings.mode == 'vertical') setPositionProperty(-position.top, 'reset', 0)": 1,
                "* Sets the el's animating property position (which in turn will sometimes animate el).": 1,
                "* If using CSS, sets the transform property. If not using CSS, sets the top / left property.": 1,
                "* @param value (int)": 1,
                "*  - the animating property's value": 1,
                "* @param type (string) 'slider', 'reset', 'ticker'": 1,
                "*  - the type of instance for which the function is being": 1,
                "* @param duration (int)": 1,
                "*  - the amount of time (in ms) the transition should occupy": 1,
                "* @param params (array) optional": 1,
                "*  - an optional parameter containing any variables that need to be passed in": 1,
                "var setPositionProperty = function(value, type, duration, params){": 1,
                "// use CSS transform": 1,
                "if(slider.usingCSS){": 1,
                "// determine the translate3d value": 1,
                "var propValue = slider.settings.mode == 'vertical' ? 'translate3d(0, ' + value + 'px, 0)' : 'translate3d(' + value + 'px, 0, 0)'": 1,
                "// add the CSS transition-duration": 1,
                "el.css('-' + slider.cssPrefix + '-transition-duration', duration / 1000 + 's')": 1,
                "if(type == 'slide'){": 2,
                "// set the property value": 1,
                "el.css(slider.animProp, propValue)": 3,
                "// bind a callback method - executes when CSS transition completes": 2,
                "el.bind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function(){": 2,
                "// unbind the callback": 2,
                "el.unbind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd')": 2,
                "updateAfterSlideTransition()": 3,
                "}else if(type == 'reset'){": 2,
                "}else if(type == 'ticker'){": 2,
                "// make the transition use 'linear'": 1,
                "el.css('-' + slider.cssPrefix + '-transition-timing-function', 'linear')": 1,
                "// reset the position": 1,
                "setPositionProperty(params['resetValue'], 'reset', 0)": 2,
                "// start the loop again": 1,
                "tickerLoop()": 3,
                "// use JS animate": 1,
                "var animateObj = {}": 1,
                "animateObj[slider.animProp] = value": 1,
                "el.animate(animateObj, duration, slider.settings.easing, function(){": 1,
                "el.css(slider.animProp, value)": 1,
                "el.animate(animateObj, speed, 'linear', function(){": 1,
                "// run the recursive loop after animation": 1,
                "* Populates the pager with proper amount of pages": 1,
                "var populatePager = function(){": 1,
                "var pagerHtml = ''": 1,
                "var pagerQty = getPagerQty()": 1,
                "// loop through each pager item": 1,
                "for(var i=0": 1,
                "i < pagerQty": 1,
                "var linkContent = ''": 1,
                "// if a buildPager function is supplied, use it to get pager link value, else use index + 1": 1,
                "if(slider.settings.buildPager && $.isFunction(slider.settings.buildPager)){": 1,
                "linkContent = slider.settings.buildPager(i)": 1,
                "slider.pagerEl.addClass('bx-custom-pager')": 1,
                "linkContent = i + 1": 1,
                "slider.pagerEl.addClass('bx-default-pager')": 1,
                "// var linkContent = slider.settings.buildPager && $.isFunction(slider.settings.buildPager) ? slider.settings.buildPager(i) : i + 1": 1,
                "// add the markup to the string": 1,
                "pagerHtml += '<div class=\"bx-pager-item\">": 1,
                "<a href=\"\" data-slide-index=\"' + i + '\" class=\"bx-pager-link\">' + linkContent + '</a>": 1,
                "</div>'": 2,
                "// populate the pager element with pager links": 1,
                "slider.pagerEl.html(pagerHtml)": 1,
                "* Appends the pager to the controls element": 1,
                "var appendPager = function(){": 1,
                "if(!slider.settings.pagerCustom){": 1,
                "// create the pager DOM element": 1,
                "slider.pagerEl = $('<div class=\"bx-pager\" />')": 1,
                "// if a pager selector was supplied, populate it with the pager": 1,
                "if(slider.settings.pagerSelector){": 1,
                "$(slider.settings.pagerSelector).html(slider.pagerEl)": 1,
                "// if no pager selector was supplied, add it after the wrapper": 1,
                "slider.controls.el.addClass('bx-has-pager').append(slider.pagerEl)": 1,
                "// populate the pager": 1,
                "populatePager()": 2,
                "slider.pagerEl = $(slider.settings.pagerCustom)": 1,
                "// assign the pager click binding": 1,
                "slider.pagerEl.delegate('a', 'click', clickPagerBind)": 1,
                "* Appends prev / next controls to the controls element": 1,
                "var appendControls = function(){": 1,
                "slider.controls.next = $('<a class=\"bx-next\" href=\"\">' + slider.settings.nextText + '</a>')": 1,
                "slider.controls.prev = $('<a class=\"bx-prev\" href=\"\">' + slider.settings.prevText + '</a>')": 1,
                "// bind click actions to the controls": 2,
                "slider.controls.next.bind('click', clickNextBind)": 1,
                "slider.controls.prev.bind('click', clickPrevBind)": 1,
                "// if nextSlector was supplied, populate it": 1,
                "if(slider.settings.nextSelector){": 1,
                "$(slider.settings.nextSelector).append(slider.controls.next)": 1,
                "// if prevSlector was supplied, populate it": 1,
                "if(slider.settings.prevSelector){": 1,
                "$(slider.settings.prevSelector).append(slider.controls.prev)": 1,
                "// if no custom selectors were supplied": 1,
                "if(!slider.settings.nextSelector && !slider.settings.prevSelector){": 1,
                "// add the controls to the DOM": 2,
                "slider.controls.directionEl = $('<div class=\"bx-controls-direction\" />')": 1,
                "// add the control elements to the directionEl": 1,
                "slider.controls.directionEl.append(slider.controls.prev).append(slider.controls.next)": 1,
                "// slider.viewport.append(slider.controls.directionEl)": 1,
                "slider.controls.el.addClass('bx-has-controls-direction').append(slider.controls.directionEl)": 1,
                "* Appends start / stop auto controls to the controls element": 1,
                "var appendControlsAuto = function(){": 1,
                "slider.controls.start = $('<div class=\"bx-controls-auto-item\">": 1,
                "<a class=\"bx-start\" href=\"\">' + slider.settings.startText + '</a>": 1,
                "slider.controls.stop = $('<div class=\"bx-controls-auto-item\">": 2,
                "<a class=\"bx-stop\" href=\"\">' + slider.settings.stopText + '</a>": 1,
                "slider.controls.autoEl = $('<div class=\"bx-controls-auto\" />')": 1,
                "slider.controls.autoEl.delegate('.bx-start', 'click', clickStartBind)": 1,
                "slider.controls.autoEl.delegate('.bx-stop', 'click', clickStopBind)": 1,
                "// if autoControlsCombine, insert only the \"start\" control": 1,
                "if(slider.settings.autoControlsCombine){": 2,
                "slider.controls.autoEl.append(slider.controls.start)": 1,
                "// if autoControlsCombine is false, insert both controls": 1,
                "slider.controls.autoEl.append(slider.controls.start).append(slider.controls.stop)": 1,
                "// if auto controls selector was supplied, populate it with the controls": 1,
                "if(slider.settings.autoControlsSelector){": 1,
                "$(slider.settings.autoControlsSelector).html(slider.controls.autoEl)": 1,
                "// if auto controls selector was not supplied, add it after the wrapper": 1,
                "slider.controls.el.addClass('bx-has-controls-auto').append(slider.controls.autoEl)": 1,
                "// update the auto controls": 1,
                "updateAutoControls(slider.settings.autoStart ? 'stop' : 'start')": 1,
                "* Appends image captions to the DOM": 1,
                "var appendCaptions = function(){": 1,
                "// cycle through each child": 1,
                "slider.children.each(function(index){": 2,
                "// get the image title attribute": 1,
                "var title = $(this).find('img:first').attr('title')": 1,
                "// append the caption": 1,
                "if (title != undefined && ('' + title).length) {": 1,
                "$(this).append('<div class=\"bx-caption\">": 1,
                "<span>' + title + '</span>": 2,
                "* Click next binding": 1,
                "* @param e (event)": 8,
                "*  - DOM event object": 8,
                "var clickNextBind = function(e){": 1,
                "// if auto show is running, stop it": 3,
                "if (slider.settings.auto) el.stopAuto()": 3,
                "el.goToNextSlide()": 1,
                "e.preventDefault()": 8,
                "* Click prev binding": 1,
                "var clickPrevBind = function(e){": 1,
                "el.goToPrevSlide()": 1,
                "* Click start binding": 1,
                "var clickStartBind = function(e){": 1,
                "el.startAuto()": 2,
                "* Click stop binding": 1,
                "var clickStopBind = function(e){": 1,
                "el.stopAuto()": 3,
                "* Click pager binding": 1,
                "var clickPagerBind = function(e){": 1,
                "var pagerLink = $(e.currentTarget)": 1,
                "var pagerIndex = parseInt(pagerLink.attr('data-slide-index'))": 1,
                "// if clicked pager link is not active, continue with the goToSlide call": 1,
                "if(pagerIndex != slider.active.index) el.goToSlide(pagerIndex)": 1,
                "* Updates the pager links with an active class": 1,
                "* @param slideIndex (int)": 2,
                "*  - index of slide to make active": 1,
                "var updatePagerActive = function(slideIndex){": 1,
                "// if \"short\" pager type": 1,
                "var len = slider.children.length": 1,
                "// nb of children": 1,
                "if(slider.settings.pagerType == 'short'){": 1,
                "if(slider.settings.maxSlides > 1) {": 1,
                "len = Math.ceil(slider.children.length/slider.settings.maxSlides)": 1,
                "slider.pagerEl.html( (slideIndex + 1) + slider.settings.pagerShortSeparator + len)": 1,
                "// remove all pager active classes": 1,
                "slider.pagerEl.find('a').removeClass('active')": 1,
                "// apply the active class for all pagers": 1,
                "slider.pagerEl.each(function(i, el) { $(el).find('a').eq(slideIndex).addClass('active')": 1,
                "* Performs needed actions after a slide transition": 1,
                "var updateAfterSlideTransition = function(){": 1,
                "// if infinte loop is true": 1,
                "var position = ''": 1,
                "// first slide": 1,
                "if(slider.active.index == 0){": 1,
                "// set the new position": 1,
                "position = slider.children.eq(0).position()": 1,
                "// carousel, last slide": 1,
                "}else if(slider.active.index == getPagerQty() - 1 && slider.carousel){": 1,
                "position = slider.children.eq((getPagerQty() - 1) * getMoveBy()).position()": 1,
                "// last slide": 1,
                "}else if(slider.active.index == slider.children.length - 1){": 1,
                "position = slider.children.eq(slider.children.length - 1).position()": 1,
                "if (slider.settings.mode == 'horizontal') { setPositionProperty(-position.left, 'reset', 0)": 1,
                "else if (slider.settings.mode == 'vertical') { setPositionProperty(-position.top, 'reset', 0)": 1,
                "// declare that the transition is complete": 1,
                "// onSlideAfter callback": 1,
                "slider.settings.onSlideAfter(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index)": 1,
                "* Updates the auto controls state (either active, or combined switch)": 1,
                "* @param state (string) \"start\", \"stop\"": 1,
                "*  - the new state of the auto show": 1,
                "var updateAutoControls = function(state){": 1,
                "// if autoControlsCombine is true, replace the current control with the new state": 1,
                "slider.controls.autoEl.html(slider.controls[state])": 1,
                "// if autoControlsCombine is false, apply the \"active\" class to the appropriate control": 1,
                "slider.controls.autoEl.find('a').removeClass('active')": 1,
                "slider.controls.autoEl.find('a:not(.bx-' + state + ')').addClass('active')": 1,
                "* Updates the direction controls (checks if either should be hidden)": 1,
                "var updateDirectionControls = function(){": 1,
                "if(getPagerQty() == 1){": 1,
                "slider.controls.prev.addClass('disabled')": 2,
                "slider.controls.next.addClass('disabled')": 2,
                "}else if(!slider.settings.infiniteLoop && slider.settings.hideControlOnEnd){": 1,
                "// if first slide": 1,
                "if (slider.active.index == 0){": 1,
                "slider.controls.next.removeClass('disabled')": 2,
                "// if last slide": 1,
                "}else if(slider.active.index == getPagerQty() - 1){": 1,
                "slider.controls.prev.removeClass('disabled')": 2,
                "// if any slide in the middle": 1,
                "* Initialzes the auto process": 1,
                "var initAuto = function(){": 1,
                "// if autoDelay was supplied, launch the auto show using a setTimeout() call": 1,
                "if(slider.settings.autoDelay > 0){": 1,
                "var timeout = setTimeout(el.startAuto, slider.settings.autoDelay)": 1,
                "// if autoDelay was not supplied, start the auto show normally": 1,
                "// if autoHover is requested": 2,
                "if(slider.settings.autoHover){": 1,
                "// on el hover": 2,
                "el.hover(function(){": 1,
                "// if the auto show is currently playing (has an active interval)": 1,
                "if(slider.interval){": 1,
                "// stop the auto show and pass true agument which will prevent control update": 1,
                "el.stopAuto(true)": 1,
                "// create a new autoPaused value which will be used by the relative \"mouseout\" event": 1,
                "slider.autoPaused = true": 1,
                "}, function(){": 2,
                "// if the autoPaused value was created be the prior \"mouseover\" event": 1,
                "if(slider.autoPaused){": 1,
                "// start the auto show and pass true agument which will prevent control update": 1,
                "el.startAuto(true)": 1,
                "// reset the autoPaused value": 1,
                "slider.autoPaused = null": 1,
                "* Initialzes the ticker process": 1,
                "var initTicker = function(){": 1,
                "var startPosition = 0": 1,
                "// if autoDirection is \"next\", append a clone of the entire slider": 1,
                "if(slider.settings.autoDirection == 'next'){": 2,
                "el.append(slider.children.clone().addClass('bx-clone'))": 1,
                "// if autoDirection is \"prev\", prepend a clone of the entire slider, and set the left position": 1,
                "el.prepend(slider.children.clone().addClass('bx-clone'))": 1,
                "var position = slider.children.first().position()": 3,
                "startPosition = slider.settings.mode == 'horizontal' ? -position.left : -position.top": 1,
                "setPositionProperty(startPosition, 'reset', 0)": 1,
                "// do not allow controls in ticker mode": 1,
                "slider.settings.controls = false": 3,
                "slider.settings.autoControls = false": 1,
                "if(slider.settings.tickerHover && !slider.usingCSS){": 1,
                "slider.viewport.hover(function(){": 1,
                "el.stop()": 1,
                "// calculate the total width of children (used to calculate the speed ratio)": 1,
                "var totalDimens = 0": 1,
                "totalDimens += slider.settings.mode == 'horizontal' ? $(this).outerWidth(true) : $(this).outerHeight(true)": 1,
                "// calculate the speed ratio (used to determine the new speed to finish the paused animation)": 1,
                "var ratio = slider.settings.speed / totalDimens": 1,
                "// determine which property to use": 1,
                "var property = slider.settings.mode == 'horizontal' ? 'left' : 'top'": 1,
                "// calculate the new speed": 1,
                "var newSpeed = ratio * (totalDimens - (Math.abs(parseInt(el.css(property)))))": 1,
                "tickerLoop(newSpeed)": 1,
                "// start the ticker loop": 1,
                "* Runs a continuous loop, news ticker-style": 1,
                "var tickerLoop = function(resumeSpeed){": 1,
                "speed = resumeSpeed ? resumeSpeed : slider.settings.speed": 1,
                "var position = {left: 0, top: 0}": 6,
                "var reset = {left: 0, top: 0}": 3,
                "// if \"next\" animate left position to last child, then reset left to 0": 1,
                "position = el.find('.bx-clone').first().position()": 1,
                "// if \"prev\" animate left position to 0, then reset left to first non-clone child": 1,
                "reset = slider.children.first().position()": 1,
                "var animateProperty = slider.settings.mode == 'horizontal' ? -position.left : -position.top": 1,
                "var resetValue = slider.settings.mode == 'horizontal' ? -reset.left : -reset.top": 1,
                "var params = {resetValue: resetValue}": 1,
                "setPositionProperty(animateProperty, 'ticker', speed, params)": 1,
                "* Initializes touch events": 1,
                "var initTouch = function(){": 1,
                "// initialize object to contain all touch values": 1,
                "slider.touch = {": 1,
                "start: {x: 0, y: 0},": 1,
                "end: {x: 0, y: 0}": 1,
                "slider.viewport.bind('touchstart', onTouchStart)": 1,
                "* Event handler for \"touchstart\"": 1,
                "var onTouchStart = function(e){": 1,
                "if(slider.working){": 1,
                "// record the original position when touch starts": 1,
                "slider.touch.originalPos = el.position()": 1,
                "var orig = e.originalEvent": 3,
                "// record the starting touch x, y coordinates": 1,
                "slider.touch.start.x = orig.changedTouches[0].pageX": 1,
                "slider.touch.start.y = orig.changedTouches[0].pageY": 1,
                "// bind a \"touchmove\" event to the viewport": 1,
                "slider.viewport.bind('touchmove', onTouchMove)": 1,
                "// bind a \"touchend\" event to the viewport": 1,
                "slider.viewport.bind('touchend', onTouchEnd)": 1,
                "* Event handler for \"touchmove\"": 1,
                "var onTouchMove = function(e){": 1,
                "// if scrolling on y axis, do not prevent default": 1,
                "var xMovement = Math.abs(orig.changedTouches[0].pageX - slider.touch.start.x)": 1,
                "var yMovement = Math.abs(orig.changedTouches[0].pageY - slider.touch.start.y)": 1,
                "// x axis swipe": 1,
                "if((xMovement * 3) > yMovement && slider.settings.preventDefaultSwipeX){": 1,
                "// y axis swipe": 1,
                "}else if((yMovement * 3) > xMovement && slider.settings.preventDefaultSwipeY){": 1,
                "if(slider.settings.mode != 'fade' && slider.settings.oneToOneTouch){": 1,
                "var value = 0": 4,
                "// if horizontal, drag along x axis": 1,
                "var change = orig.changedTouches[0].pageX - slider.touch.start.x": 1,
                "value = slider.touch.originalPos.left + change": 1,
                "// if vertical, drag along y axis": 1,
                "var change = orig.changedTouches[0].pageY - slider.touch.start.y": 1,
                "value = slider.touch.originalPos.top + change": 1,
                "setPositionProperty(value, 'reset', 0)": 1,
                "* Event handler for \"touchend\"": 1,
                "var onTouchEnd = function(e){": 1,
                "slider.viewport.unbind('touchmove', onTouchMove)": 1,
                "// record end x, y positions": 1,
                "slider.touch.end.x = orig.changedTouches[0].pageX": 1,
                "slider.touch.end.y = orig.changedTouches[0].pageY": 1,
                "// if fade mode, check if absolute x distance clears the threshold": 1,
                "var distance = Math.abs(slider.touch.start.x - slider.touch.end.x)": 1,
                "if(distance >= slider.settings.swipeThreshold){": 1,
                "slider.touch.start.x > slider.touch.end.x ? el.goToNextSlide() : el.goToPrevSlide()": 1,
                "// not fade mode": 1,
                "var distance = 0": 1,
                "// calculate distance and el's animate property": 1,
                "distance = slider.touch.end.x - slider.touch.start.x": 1,
                "value = slider.touch.originalPos.left": 1,
                "distance = slider.touch.end.y - slider.touch.start.y": 1,
                "value = slider.touch.originalPos.top": 1,
                "// if not infinite loop and first / last slide, do not attempt a slide transition": 1,
                "if(!slider.settings.infiniteLoop && ((slider.active.index == 0 && distance > 0) || (slider.active.last && distance < 0))){": 1,
                "setPositionProperty(value, 'reset', 200)": 2,
                "// check if distance clears threshold": 1,
                "if(Math.abs(distance) >= slider.settings.swipeThreshold){": 1,
                "distance < 0 ? el.goToNextSlide() : el.goToPrevSlide()": 1,
                "// el.animate(property, 200)": 1,
                "slider.viewport.unbind('touchend', onTouchEnd)": 1,
                "* Window resize event callback": 1,
                "var resizeWindow = function(e){": 1,
                "// get the new window dimens (again, thank you IE)": 1,
                "var windowWidthNew = $(window).width()": 1,
                "var windowHeightNew = $(window).height()": 1,
                "// make sure that it is a true window resize": 1,
                "// *we must check this because our dinosaur friend IE fires a window resize event when certain DOM elements": 1,
                "// are resized. Can you just die already?*": 1,
                "if(windowWidth != windowWidthNew || windowHeight != windowHeightNew){": 1,
                "// set the new window dimens": 1,
                "windowWidth = windowWidthNew": 1,
                "windowHeight = windowHeightNew": 1,
                "// update all dynamic elements": 1,
                "* = PUBLIC FUNCTIONS": 1,
                "* Performs slide transition to the specified slide": 1,
                "*  - the destination slide's index (zero-based)": 1,
                "* @param direction (string)": 1,
                "*  - INTERNAL USE ONLY - the direction of travel (\"prev\" / \"next\")": 1,
                "el.goToSlide = function(slideIndex, direction){": 1,
                "// if plugin is currently in motion, ignore request": 1,
                "if(slider.working || slider.active.index == slideIndex) return": 1,
                "// declare that plugin is in motion": 1,
                "slider.working = true": 1,
                "// store the old index": 1,
                "slider.oldIndex = slider.active.index": 1,
                "// if slideIndex is less than zero, set active index to last child (this happens during infinite loop)": 1,
                "if(slideIndex < 0){": 1,
                "slider.active.index = getPagerQty() - 1": 1,
                "// if slideIndex is greater than children length, set active index to 0 (this happens during infinite loop)": 1,
                "}else if(slideIndex >= getPagerQty()){": 1,
                "slider.active.index = 0": 1,
                "// set active index to requested slide": 1,
                "slider.active.index = slideIndex": 1,
                "// onSlideBefore, onSlideNext, onSlidePrev callbacks": 1,
                "slider.settings.onSlideBefore(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index)": 1,
                "if(direction == 'next'){": 1,
                "slider.settings.onSlideNext(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index)": 1,
                "}else if(direction == 'prev'){": 1,
                "slider.settings.onSlidePrev(slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index)": 1,
                "// check if last slide": 1,
                "slider.active.last = slider.active.index >= getPagerQty() - 1": 1,
                "// update the pager with active class": 1,
                "if(slider.settings.pager) updatePagerActive(slider.active.index)": 1,
                "// // check for direction control update": 1,
                "if(slider.settings.controls) updateDirectionControls()": 1,
                "// if slider is set to mode: \"fade\"": 1,
                "// if adaptiveHeight is true and next height is different from current height, animate to the new height": 2,
                "if(slider.settings.adaptiveHeight && slider.viewport.height() != getViewportHeight()){": 2,
                "slider.viewport.animate({height: getViewportHeight()}, slider.settings.adaptiveHeightSpeed)": 2,
                "// fade out the visible child and reset its z-index value": 1,
                "slider.children.filter(':visible').fadeOut(slider.settings.speed).css({zIndex: 0})": 1,
                "// fade in the newly requested slide": 1,
                "slider.children.eq(slider.active.index).css('zIndex', 51).fadeIn(slider.settings.speed, function(){": 1,
                "$(this).css('zIndex', 50)": 1,
                "// slider mode is not \"fade\"": 1,
                "var moveBy = 0": 1,
                "// if carousel and not infinite loop": 1,
                "if(!slider.settings.infiniteLoop && slider.carousel && slider.active.last){": 1,
                "// get the last child position": 2,
                "var lastChild = slider.children.eq(slider.children.length - 1)": 1,
                "position = lastChild.position()": 2,
                "// calculate the position of the last slide": 1,
                "moveBy = slider.viewport.width() - lastChild.outerWidth()": 1,
                "// get last showing index position": 1,
                "position = slider.children.eq(lastShowingIndex).position()": 1,
                "// horizontal carousel, going previous while on first slide (infiniteLoop mode)": 1,
                "}else if(slider.carousel && slider.active.last && direction == 'prev'){": 1,
                "var eq = slider.settings.moveSlides == 1 ? slider.settings.maxSlides - getMoveBy() : ((getPagerQty() - 1) * getMoveBy()) - (slider.children.length - slider.settings.maxSlides)": 1,
                "var lastChild = el.children('.bx-clone').eq(eq)": 1,
                "// if infinite loop and \"Next\" is clicked on the last slide": 1,
                "}else if(direction == 'next' && slider.active.index == 0){": 1,
                "// get the last clone position": 1,
                "position = el.find('> .bx-clone').eq(slider.settings.maxSlides).position()": 1,
                "slider.active.last = false": 3,
                "// normal non-zero requests": 1,
                "}else if(slideIndex >= 0){": 1,
                "var requestEl = slideIndex * getMoveBy()": 1,
                "position = slider.children.eq(requestEl).position()": 1,
                "/* If the position doesn't exist": 1,
                "* (e.g. if you destroy the slider on a next click),": 1,
                "* it doesn't throw an error.": 1,
                "if (\"undefined\" !== typeof(position)) {": 1,
                "var value = slider.settings.mode == 'horizontal' ? -(position.left - moveBy) : -position.top": 1,
                "// plugin values to be animated": 1,
                "setPositionProperty(value, 'slide', slider.settings.speed)": 1,
                "* Transitions to the next slide in the show": 1,
                "el.goToNextSlide = function(){": 1,
                "// if infiniteLoop is false and last page is showing, disregard call": 2,
                "if (!slider.settings.infiniteLoop && slider.active.last) return": 1,
                "var pagerIndex = parseInt(slider.active.index) + 1": 1,
                "el.goToSlide(pagerIndex, 'next')": 1,
                "* Transitions to the prev slide in the show": 1,
                "el.goToPrevSlide = function(){": 1,
                "if (!slider.settings.infiniteLoop && slider.active.index == 0) return": 1,
                "var pagerIndex = parseInt(slider.active.index) - 1": 1,
                "el.goToSlide(pagerIndex, 'prev')": 1,
                "* Starts the auto show": 1,
                "* @param preventControlUpdate (boolean)": 2,
                "*  - if true, auto controls state will not be updated": 2,
                "el.startAuto = function(preventControlUpdate){": 1,
                "// if an interval already exists, disregard call": 1,
                "if(slider.interval) return": 1,
                "// create an interval": 1,
                "slider.interval = setInterval(function(){": 1,
                "slider.settings.autoDirection == 'next' ? el.goToNextSlide() : el.goToPrevSlide()": 1,
                "}, slider.settings.pause)": 3,
                "// if auto controls are displayed and preventControlUpdate is not true": 2,
                "if (slider.settings.autoControls && preventControlUpdate != true) updateAutoControls('stop')": 1,
                "* Stops the auto show": 1,
                "el.stopAuto = function(preventControlUpdate){": 1,
                "// if no interval exists, disregard call": 1,
                "if(!slider.interval) return": 1,
                "// clear the interval": 1,
                "clearInterval(slider.interval)": 2,
                "if (slider.settings.autoControls && preventControlUpdate != true) updateAutoControls('start')": 1,
                "* Returns current slide index (zero-based)": 1,
                "el.getCurrentSlide = function(){": 1,
                "return slider.active.index": 1,
                "* Returns number of slides in show": 1,
                "el.getSlideCount = function(){": 1,
                "return slider.children.length": 1,
                "* Update all dynamic slider elements": 1,
                "el.redrawSlider = function(){": 1,
                "// resize all children in ratio to new screen size": 1,
                "slider.children.add(el.find('.bx-clone')).outerWidth(getSlideWidth())": 1,
                "// adjust the height": 1,
                "slider.viewport.css('height', getViewportHeight())": 1,
                "// update the slide position": 1,
                "if(!slider.settings.ticker) setSlidePosition()": 1,
                "// if active.last was true before the screen resize, we want": 1,
                "// to keep it last no matter what screen size we end on": 1,
                "if (slider.active.last) slider.active.index = getPagerQty() - 1": 1,
                "// if the active index (page) no longer exists due to the resize, simply set the index as last": 1,
                "if (slider.active.index >= getPagerQty()) slider.active.last = true": 1,
                "// if a pager is being displayed and a custom pager is not being used, update it": 1,
                "if(slider.settings.pager && !slider.settings.pagerCustom){": 1,
                "updatePagerActive(slider.active.index)": 1,
                "* Destroy the current instance of the slider (revert everything back to original state)": 1,
                "el.destroySlider = function(){": 1,
                "// don't do anything if slider has already been destroyed": 1,
                "if(!slider.initialized) return": 1,
                "slider.initialized = false": 3,
                "$('.bx-clone', this).remove()": 3,
                "slider.children.each(function() {": 1,
                "$(this).data(\"origStyle\") != undefined ? $(this).attr(\"style\", $(this).data(\"origStyle\")) : $(this).removeAttr('style')": 1,
                "$(this).data(\"origStyle\") != undefined ? this.attr(\"style\", $(this).data(\"origStyle\")) : $(this).removeAttr('style')": 1,
                "$(this).unwrap().unwrap()": 3,
                "if(slider.controls.el) slider.controls.el.remove()": 3,
                "if(slider.controls.next) slider.controls.next.remove()": 3,
                "if(slider.controls.prev) slider.controls.prev.remove()": 3,
                "if(slider.pagerEl) slider.pagerEl.remove()": 1,
                "$('.bx-caption', this).remove()": 3,
                "if(slider.controls.autoEl) slider.controls.autoEl.remove()": 1,
                "if(slider.settings.responsive) $(window).unbind('resize', resizeWindow)": 1,
                "* Reload the slider (revert all DOM changes, and re-initialize)": 1,
                "el.reloadSlider = function(settings){": 1,
                "if (settings != undefined) options = settings": 1,
                "el.destroySlider()": 1,
                "init()": 4,
                "// returns the current jQuery object": 1,
                "})(jQuery)": 1,
                "word: bxslider": 12,
                "word: loaded": 6,
                "word: responsive": 15,
                "word: content": 3,
                "word: slider": 1499,
                "word: copyright": 3,
                "word: steven": 3,
                "word: wanderski": 3,
                "word: stevenwanderski": 3,
                "word: bxcreative": 3,
                "word: written": 3,
                "word: drinking": 3,
                "word: belgian": 3,
                "word: listening": 3,
                "word: released": 3,
                "word: license": 3,
                "word: function": 225,
                "word: plugin": 22,
                "word: defaults": 9,
                "word: general": 3,
                "word: horizontal": 62,
                "word: slideselector": 9,
                "word: infiniteloop": 39,
                "word: hidecontrolonend": 9,
                "word: easing": 27,
                "word: slidemargin": 38,
                "word: startslide": 24,
                "word: randomstart": 5,
                "word: captions": 12,
                "word: ticker": 54,
                "word: tickerhover": 6,
                "word: adaptiveheight": 30,
                "word: adaptiveheightspeed": 9,
                "word: usecss": 6,
                "word: preloadimages": 12,
                "word: visible": 16,
                "word: touchenabled": 9,
                "word: swipethreshold": 9,
                "word: onetoonetouch": 6,
                "word: preventdefaultswipex": 6,
                "word: preventdefaultswipey": 6,
                "word: pagertype": 6,
                "word: pagershortseparator": 6,
                "word: pagerselector": 9,
                "word: buildpager": 17,
                "word: pagercustom": 12,
                "word: controls": 268,
                "word: nexttext": 6,
                "word: prevtext": 6,
                "word: nextselector": 12,
                "word: prevselector": 12,
                "word: autocontrols": 18,
                "word: starttext": 6,
                "word: stoptext": 6,
                "word: autocontrolscombine": 21,
                "word: autocontrolsselector": 9,
                "word: autostart": 9,
                "word: autodirection": 18,
                "word: autohover": 12,
                "word: autodelay": 15,
                "word: carousel": 49,
                "word: minslides": 51,
                "word: maxslides": 70,
                "word: moveslides": 34,
                "word: slidewidth": 38,
                "word: callbacks": 6,
                "word: onsliderload": 9,
                "word: onslidebefore": 9,
                "word: onslideafter": 9,
                "word: onslidenext": 9,
                "word: onslideprev": 9,
                "word: options": 15,
                "word: length": 72,
                "word: return": 75,
                "word: support": 3,
                "word: mutltiple": 3,
                "word: elements": 13,
                "word: create": 18,
                "word: namespace": 6,
                "word: throughout": 6,
                "word: reference": 6,
                "word: element": 30,
                "word: slideshow": 3,
                "word: original": 15,
                "word: window": 35,
                "word: dimens": 7,
                "word: thanks": 3,
                "word: windowwidth": 7,
                "word: windowheight": 7,
                "word: height": 71,
                "word: private": 3,
                "word: functions": 5,
                "word: initializes": 6,
                "word: settings": 647,
                "word: supplied": 47,
                "word: extend": 3,
                "word: setting": 5,
                "word: parseint": 15,
                "word: children": 254,
                "word: actual": 3,
                "word: number": 25,
                "word: slides": 40,
                "word: random": 6,
                "word: active": 203,
                "word: information": 2,
                "word: displaying": 2,
                "word: moving": 2,
                "word: multiple": 2,
                "word: calculate": 27,
                "word: thresholds": 9,
                "word: update": 29,
                "word: dimensions": 3,
                "word: minthreshold": 12,
                "word: maxthreshold": 9,
                "word: current": 27,
                "word: currently": 10,
                "word: animating": 9,
                "word: working": 16,
                "word: initialize": 12,
                "word: object": 33,
                "word: interval": 42,
                "word: determine": 27,
                "word: property": 38,
                "word: transitions": 9,
                "word: animprop": 21,
                "word: vertical": 60,
                "word: hardware": 3,
                "word: acceleration": 3,
                "word: usingcss": 12,
                "word: document": 3,
                "word: createelement": 3,
                "word: transition": 38,
                "word: properties": 3,
                "word: webkitperspective": 3,
                "word: mozperspective": 3,
                "word: operspective": 3,
                "word: msperspective": 3,
                "word: undefined": 21,
                "word: cssprefix": 15,
                "word: replace": 6,
                "word: perspective": 3,
                "word: tolowercase": 3,
                "word: transform": 9,
                "word: always": 9,
                "word: origstyle": 18,
                "word: perform": 6,
                "word: modifications": 12,
                "word: performs": 8,
                "word: wrapper": 23,
                "word: viewport": 124,
                "word: namspace": 3,
                "word: parent": 9,
                "word: loading": 11,
                "word: display": 9,
                "word: images": 9,
                "word: loader": 9,
                "word: prepend": 12,
                "word: massive": 3,
                "word: needed": 6,
                "word: margin": 6,
                "word: padding": 3,
                "word: position": 212,
                "word: relative": 12,
                "word: timing": 6,
                "word: default": 11,
                "word: animation": 9,
                "word: slidesshowing": 19,
                "word: getnumberslidesshowing": 17,
                "word: overflow": 3,
                "word: hidden": 6,
                "word: maxwidth": 3,
                "word: getviewportmaxwidth": 6,
                "word: modification": 3,
                "word: liststyle": 3,
                "word: calculated": 12,
                "word: applied": 6,
                "word: prevent": 15,
                "word: scrollbar": 3,
                "word: interference": 3,
                "word: getslidewidth": 9,
                "word: marginright": 3,
                "word: marginbottom": 3,
                "word: positioning": 3,
                "word: absolute": 6,
                "word: zindex": 15,
                "word: prepare": 6,
                "word: showing": 28,
                "word: contain": 6,
                "word: requested": 30,
                "word: appendcaptions": 6,
                "word: getpagerqty": 41,
                "word: fitvids": 6,
                "word: preload": 6,
                "word: selector": 24,
                "word: preloadselector": 9,
                "word: control": 27,
                "word: addition": 3,
                "word: appendpager": 6,
                "word: appendcontrols": 6,
                "word: appendcontrolsauto": 6,
                "word: option": 3,
                "word: depend": 3,
                "word: loadelements": 6,
                "word: callback": 29,
                "word: iframe": 6,
                "word: timestamp": 3,
                "word: gettime": 3,
                "word: settimeout": 9,
                "word: infinite": 18,
                "word: additional": 3,
                "word: sliceappend": 6,
                "word: addclass": 43,
                "word: sliceprepend": 6,
                "word: append": 48,
                "word: remove": 30,
                "word: setslideposition": 8,
                "word: behavior": 3,
                "word: getviewportheight": 21,
                "word: everything": 6,
                "word: positioned": 3,
                "word: resize": 27,
                "word: redrawslider": 8,
                "word: initialized": 12,
                "word: resizewindow": 8,
                "word: initauto": 6,
                "word: initticker": 6,
                "word: appropriate": 6,
                "word: updatepageractive": 12,
                "word: updates": 15,
                "word: updatedirectioncontrols": 9,
                "word: events": 6,
                "word: inittouch": 6,
                "word: returns": 25,
                "word: either": 9,
                "word: maxheight": 3,
                "word: should": 9,
                "word: calculation": 3,
                "word: include": 3,
                "word: single": 3,
                "word: individual": 3,
                "word: currentindex": 11,
                "word: getmoveby": 23,
                "word: through": 9,
                "word: remaining": 3,
                "word: looped": 2,
                "word: heights": 3,
                "word: outerheight": 9,
                "word: margins": 3,
                "word: newelwidth": 13,
                "word: wrapwidth": 20,
                "word: larger": 7,
                "word: includes": 2,
                "word: partially": 2,
                "word: smaller": 3,
                "word: between": 3,
                "word: divide": 5,
                "word: childwidth": 6,
                "word: pagerqty": 17,
                "word: specified": 7,
                "word: breakpoint": 11,
                "word: counter": 10,
                "word: indivual": 2,
                "word: lastchild": 24,
                "word: setpositionproperty": 43,
                "word: lastshowingindex": 12,
                "word: repective": 3,
                "word: sometimes": 3,
                "word: animate": 35,
                "word: string": 10,
                "word: instance": 6,
                "word: duration": 18,
                "word: amount": 6,
                "word: occupy": 3,
                "word: params": 18,
                "word: optional": 6,
                "word: parameter": 3,
                "word: containing": 3,
                "word: variables": 3,
                "word: passed": 3,
                "word: translate": 9,
                "word: propvalue": 12,
                "word: method": 6,
                "word: executes": 6,
                "word: completes": 6,
                "word: transitionend": 12,
                "word: webkittransitionend": 12,
                "word: otransitionend": 12,
                "word: mstransitionend": 12,
                "word: unbind": 20,
                "word: updateafterslidetransition": 12,
                "word: linear": 9,
                "word: resetvalue": 15,
                "word: tickerloop": 15,
                "word: animateobj": 12,
                "word: recursive": 3,
                "word: populates": 3,
                "word: proper": 3,
                "word: populatepager": 9,
                "word: pagerhtml": 8,
                "word: linkcontent": 11,
                "word: isfunction": 4,
                "word: pagerel": 37,
                "word: custom": 8,
                "word: markup": 2,
                "word: populate": 18,
                "word: appends": 12,
                "word: assign": 3,
                "word: binding": 18,
                "word: delegate": 9,
                "word: clickpagerbind": 6,
                "word: actions": 9,
                "word: clicknextbind": 6,
                "word: clickprevbind": 6,
                "word: nextslector": 3,
                "word: prevslector": 3,
                "word: selectors": 3,
                "word: directionel": 15,
                "word: direction": 29,
                "word: autoel": 36,
                "word: clickstartbind": 6,
                "word: clickstopbind": 6,
                "word: insert": 6,
                "word: updateautocontrols": 12,
                "word: attribute": 3,
                "word: caption": 8,
                "word: running": 9,
                "word: stopauto": 23,
                "word: gotonextslide": 14,
                "word: preventdefault": 24,
                "word: gotoprevslide": 14,
                "word: startauto": 15,
                "word: pagerlink": 6,
                "word: currenttarget": 3,
                "word: pagerindex": 21,
                "word: clicked": 6,
                "word: continue": 3,
                "word: gotoslide": 14,
                "word: slideindex": 35,
                "word: classes": 3,
                "word: removeclass": 18,
                "word: pagers": 3,
                "word: infinte": 3,
                "word: declare": 5,
                "word: complete": 3,
                "word: oldindex": 14,
                "word: combined": 3,
                "word: switch": 3,
                "word: checks": 3,
                "word: disabled": 24,
                "word: middle": 3,
                "word: initialzes": 6,
                "word: process": 6,
                "word: launch": 3,
                "word: timeout": 3,
                "word: normally": 3,
                "word: playing": 3,
                "word: agument": 6,
                "word: autopaused": 18,
                "word: mouseout": 3,
                "word: created": 3,
                "word: mouseover": 3,
                "word: startposition": 9,
                "word: entire": 6,
                "word: totaldimens": 12,
                "word: outerwidth": 9,
                "word: finish": 3,
                "word: paused": 3,
                "word: newspeed": 6,
                "word: continuous": 3,
                "word: resumespeed": 9,
                "word: animateproperty": 6,
                "word: values": 6,
                "word: touchstart": 6,
                "word: ontouchstart": 6,
                "word: handler": 9,
                "word: record": 9,
                "word: starts": 6,
                "word: originalpos": 15,
                "word: originalevent": 9,
                "word: starting": 3,
                "word: coordinates": 3,
                "word: changedtouches": 24,
                "word: touchmove": 12,
                "word: ontouchmove": 9,
                "word: touchend": 11,
                "word: ontouchend": 8,
                "word: scrolling": 3,
                "word: xmovement": 9,
                "word: ymovement": 9,
                "word: change": 12,
                "word: positions": 3,
                "word: distance": 34,
                "word: clears": 5,
                "word: threshold": 5,
                "word: attempt": 3,
                "word: windowwidthnew": 6,
                "word: windowheightnew": 6,
                "word: because": 2,
                "word: dinosaur": 2,
                "word: friend": 2,
                "word: certain": 2,
                "word: resized": 2,
                "word: already": 8,
                "word: dynamic": 5,
                "word: public": 2,
                "word: destination": 2,
                "word: internal": 2,
                "word: travel": 2,
                "word: motion": 4,
                "word: ignore": 2,
                "word: request": 2,
                "word: happens": 4,
                "word: during": 4,
                "word: greater": 2,
                "word: different": 6,
                "word: filter": 3,
                "word: fadeout": 3,
                "word: fadein": 3,
                "word: moveby": 9,
                "word: previous": 3,
                "word: normal": 3,
                "word: requests": 3,
                "word: requestel": 6,
                "word: destroy": 6,
                "word: typeof": 3,
                "word: animated": 3,
                "word: disregard": 12,
                "word: preventcontrolupdate": 24,
                "word: boolean": 6,
                "word: updated": 6,
                "word: exists": 9,
                "word: setinterval": 3,
                "word: displayed": 9,
                "word: clearinterval": 6,
                "word: getcurrentslide": 3,
                "word: getslidecount": 3,
                "word: screen": 9,
                "word: adjust": 3,
                "word: before": 3,
                "word: matter": 3,
                "word: longer": 3,
                "word: simply": 3,
                "word: revert": 6,
                "word: destroyslider": 6,
                "word: anything": 3,
                "word: destroyed": 3,
                "word: removeattr": 6,
                "word: unwrap": 6,
                "word: reload": 3,
                "word: changes": 3,
                "word: reloadslider": 3,
                "word: jquery": 6,
                "special: v4.1.1": 3,
                "special: bxslider.com": 3,
                "special: stevenwanderski.com": 3,
                "special: bxcreative.com": 3,
                "special: sam.zoy.org": 3,
                "special: org/wtfpl": 3,
                "special: fn.bxSlider": 1,
                "special: this.length": 6,
                "special: this.each": 3,
                "special: plugin.el": 3,
                "special: user-supplied": 9,
                "special: slider.settings": 3,
                "special: slider.settings.slideWidth": 11,
                "special: slider.children": 9,
                "special: el.children": 9,
                "special: slider.settings.slideSelector": 2,
                "special: slider.children.length": 53,
                "special: slider.settings.minSlides": 14,
                "special: slider.settings.maxSlides": 20,
                "special: slider.settings.randomStart": 1,
                "special: slider.settings.startSlide": 6,
                "special: Math.floor": 2,
                "special: Math.random": 1,
                "special: slider.active": 2,
                "special: slider.carousel": 20,
                "special: slider.settings.preloadImages": 2,
                "special: slider.minThreshold": 3,
                "special: slider.settings.slideMargin": 11,
                "special: slider.maxThreshold": 3,
                "special: slider.working": 13,
                "special: slider.controls": 6,
                "special: slider.interval": 24,
                "special: slider.animProp": 7,
                "special: slider.settings.mode": 110,
                "special: slider.usingCSS": 4,
                "special: slider.settings.useCSS": 1,
                "special: document.createElement": 1,
                "special: div.style": 3,
                "special: slider.cssPrefix": 5,
                "special: el.data": 3,
                "special: el.attr": 3,
                "special: el.wrap": 3,
                "special: bx-wrapper": 5,
                "special: bx-viewport": 8,
                "special: slider.viewport": 3,
                "special: el.parent": 3,
                "special: slider.loader": 6,
                "special: bx-loading": 2,
                "special: slider.viewport.prepend": 3,
                "special: el.css": 27,
                "special: slider.settings.easing": 15,
                "special: transition-timing-function": 6,
                "special: slider.viewport.css": 6,
                "special: slider.viewport.parent": 6,
                "special: slider.settings.pager": 24,
                "special: slider.children.css": 15,
                "special: z-index": 9,
                "special: slider.children.eq": 57,
                "special: slider.controls.el": 9,
                "special: bx-controls": 2,
                "special: slider.settings.captions": 3,
                "special: slider.active.last": 33,
                "special: slider.settings.video": 3,
                "special: el.fitVids": 1,
                "special: slider.settings.ticker": 15,
                "special: slider.settings.controls": 15,
                "special: slider.settings.auto": 15,
                "special: slider.settings.autoControls": 5,
                "special: slider.viewport.after": 3,
                "special: selector.find": 6,
                "special: slider.settings.infiniteLoop": 9,
                "special: slider.children.slice": 6,
                "special: bx-clone": 27,
                "special: el.append": 6,
                "special: slider.loader.remove": 3,
                "special: slider.settings.adaptiveHeight": 4,
                "special: slider.viewport.height": 9,
                "special: el.redrawSlider": 3,
                "special: slider.settings.onSliderLoad": 1,
                "special: slider.active.index": 108,
                "special: slider.initialized": 9,
                "special: slider.settings.responsive": 6,
                "special: slider.settings.autoStart": 2,
                "special: slider.settings.touchEnabled": 1,
                "special: slider.settings.moveSlides": 8,
                "special: children.add": 6,
                "special: children.each": 3,
                "special: Math.max.apply": 1,
                "special: children.map": 3,
                "special: slider.viewport.width": 17,
                "special: slider.children.first": 9,
                "special: Math.ceil": 2,
                "special: slider.children.last": 3,
                "special: lastChild.position": 3,
                "special: position.left": 18,
                "special: lastChild.width": 1,
                "special: position.top": 18,
                "special: transition-duration": 6,
                "special: el.bind": 6,
                "special: el.unbind": 6,
                "special: el.animate": 8,
                "special: slider.settings.buildPager": 6,
                "special: slider.pagerEl.addClass": 2,
                "special: bx-custom-pager": 2,
                "special: bx-default-pager": 2,
                "special: bx-pager-item": 2,
                "special: data-slide-index": 5,
                "special: bx-pager-link": 2,
                "special: slider.pagerEl.html": 2,
                "special: slider.settings.pagerCustom": 3,
                "special: slider.pagerEl": 5,
                "special: bx-pager": 2,
                "special: slider.settings.pagerSelector": 2,
                "special: slider.controls.el.addClass": 3,
                "special: bx-has-pager": 3,
                "special: slider.pagerEl.delegate": 1,
                "special: slider.controls.next": 12,
                "special: slider.settings.nextText": 1,
                "special: bx-next": 2,
                "special: slider.controls.prev": 12,
                "special: slider.settings.prevText": 1,
                "special: bx-prev": 2,
                "special: slider.controls.next.bind": 3,
                "special: slider.controls.prev.bind": 3,
                "special: slider.settings.nextSelector": 3,
                "special: slider.settings.prevSelector": 3,
                "special: slider.controls.directionEl": 3,
                "special: bx-controls-direction": 2,
                "special: slider.controls.directionEl.append": 1,
                "special: slider.viewport.append": 3,
                "special: bx-has-controls-direction": 3,
                "special: slider.controls.start": 9,
                "special: slider.settings.startText": 1,
                "special: bx-controls-auto-item": 4,
                "special: bx-start": 5,
                "special: slider.controls.stop": 6,
                "special: slider.settings.stopText": 1,
                "special: bx-stop": 5,
                "special: slider.controls.autoEl": 4,
                "special: bx-controls-auto": 2,
                "special: slider.controls.autoEl.delegate": 2,
                "special: slider.settings.autoControlsCombine": 2,
                "special: slider.controls.autoEl.append": 2,
                "special: slider.settings.autoControlsSelector": 2,
                "special: bx-has-controls-auto": 3,
                "special: slider.children.each": 9,
                "special: img:first": 3,
                "special: bx-caption": 5,
                "special: el.stopAuto": 8,
                "special: el.goToNextSlide": 5,
                "special: e.preventDefault": 8,
                "special: el.goToPrevSlide": 5,
                "special: el.startAuto": 5,
                "special: e.currentTarget": 1,
                "special: pagerLink.attr": 1,
                "special: el.goToSlide": 4,
                "special: slider.settings.pagerType": 1,
                "special: length/slider": 3,
                "special: slider.settings.pagerShortSeparator": 1,
                "special: slider.pagerEl.find": 1,
                "special: slider.pagerEl.each": 1,
                "special: slider.settings.onSlideAfter": 1,
                "special: slider.oldIndex": 5,
                "special: slider.controls.autoEl.html": 1,
                "special: slider.controls.autoEl.find": 2,
                "special: a:not": 3,
                "special: slider.controls.prev.addClass": 2,
                "special: slider.controls.next.addClass": 2,
                "special: slider.settings.hideControlOnEnd": 1,
                "special: slider.controls.next.removeClass": 2,
                "special: slider.controls.prev.removeClass": 2,
                "special: slider.settings.autoDelay": 2,
                "special: slider.settings.autoHover": 1,
                "special: el.hover": 3,
                "special: slider.autoPaused": 3,
                "special: slider.settings.autoDirection": 3,
                "special: slider.children.clone": 6,
                "special: el.prepend": 3,
                "special: slider.settings.tickerHover": 1,
                "special: slider.viewport.hover": 3,
                "special: el.stop": 3,
                "special: slider.settings.speed": 15,
                "special: Math.abs": 5,
                "special: ticker-style": 3,
                "special: el.find": 9,
                "special: non-clone": 3,
                "special: reset.left": 3,
                "special: reset.top": 3,
                "special: slider.touch": 3,
                "special: slider.viewport.bind": 9,
                "special: slider.touch.originalPos": 1,
                "special: el.position": 3,
                "special: e.originalEvent": 3,
                "special: slider.touch.start.x": 18,
                "special: orig.changedTouches": 8,
                "special: slider.touch.start.y": 12,
                "special: slider.settings.preventDefaultSwipeX": 1,
                "special: slider.settings.preventDefaultSwipeY": 1,
                "special: slider.settings.oneToOneTouch": 1,
                "special: slider.touch.originalPos.left": 2,
                "special: slider.touch.originalPos.top": 2,
                "special: slider.viewport.unbind": 5,
                "special: slider.touch.end.x": 12,
                "special: slider.touch.end.y": 6,
                "special: slider.settings.swipeThreshold": 2,
                "special: zero-based": 5,
                "special: slider.settings.onSlideBefore": 1,
                "special: slider.settings.onSlideNext": 1,
                "special: slider.settings.onSlidePrev": 1,
                "special: slider.viewport.animate": 6,
                "special: slider.settings.adaptiveHeightSpeed": 2,
                "special: slider.children.filter": 3,
                "special: lastChild.outerWidth": 1,
                "special: non-zero": 3,
                "special: e.g": 3,
                "special: slider.settings.pause": 3,
                "special: el.getCurrentSlide": 1,
                "special: el.getSlideCount": 1,
                "special: slider.children.add": 3,
                "special: active.last": 3,
                "special: el.destroySlider": 2,
                "special: this.attr": 3,
                "special: slider.controls.el.remove": 3,
                "special: slider.controls.next.remove": 3,
                "special: slider.controls.prev.remove": 3,
                "special: slider.pagerEl.remove": 1,
                "special: slider.controls.autoEl.remove": 1,
                "special: re-initialize": 3,
                "special: el.reloadSlider": 1,
                "/** * bxslider v4.1.1 - fully loaded, responsive content slider * http://bxslider.com * * copyright 2012, steven wanderski - http://stevenwanderski.com - http://bxcreative.com * written while drinking belgian ales and listening to jazz * * released under the wtfpl license - http://sam.zoy.org/wtfpl/ */": 2,
                "(function($){ var plugin = {}": 2,
                "var defaults = { // general mode: 'horizontal', slideselector: '', infiniteloop: true, hidecontrolonend: false, speed: 500, easing: null, slidemargin: 0, startslide: 0, randomstart: false, captions: false, ticker: false, tickerhover: false, adaptiveheight: false, adaptiveheightspeed: 500, video: false, usecss: true, preloadimages: 'visible', responsive: true, // touch touchenabled: true, swipethreshold: 50, onetoonetouch: true, preventdefaultswipex: true, preventdefaultswipey: false, // pager pager: true, pagertype: 'full', pagershortseparator: ' / ', pagerselector: null, buildpager: null, pagercustom: null, // controls controls: true, nexttext: 'next', prevtext: 'prev', nextselector: null, prevselector: null, autocontrols: false, starttext: 'start', stoptext: 'stop', autocontrolscombine: false, autocontrolsselector: null, // auto auto: false, pause: 4000, autostart: true, autodirection: 'next', autohover: false, autodelay: 0, // carousel minslides: 1, maxslides: 1, moveslides: 0, slidewidth: 0, // callbacks onsliderload: function() {}, onslidebefore: function() {}, onslideafter: function() {}, onslidenext: function() {}, onslideprev: function() {} } $.fn.bxslider = function(options){ if(this.length == 0) return this": 2,
                "// support mutltiple elements if(this.length > 1){ this.each(function(){$(this).bxslider(options)})": 2,
                "} // create a namespace to be used throughout the plugin var slider = {}": 2,
                "// set a reference to our slider element var el = this": 2,
                "/** * makes slideshow responsive */ // first get the original window dimens (thanks alot ie) var windowwidth = $(window).width()": 2,
                "var windowheight = $(window).height()": 2,
                "/** * =================================================================================== * = private functions * =================================================================================== */ /** * initializes namespace settings to be used throughout plugin */ var init = function(){ // merge user-supplied options with the defaults slider.settings = $.extend({}, defaults, options)": 2,
                "// parse slidewidth setting slider.settings.slidewidth = parseint(slider.settings.slidewidth)": 2,
                "// store the original children slider.children = el.children(slider.settings.slideselector)": 2,
                "// check if actual number of slides is less than minslides / maxslides if(slider.children.length 1 || slider.settings.maxslides > 1": 1,
                "// if carousel, force preloadimages = 'all' if(slider.carousel) slider.settings.preloadimages = 'all'": 2,
                "// calculate the min / max width thresholds based on min / max number of slides // used to setup and update carousel slides dimensions slider.minthreshold = (slider.settings.minslides * slider.settings.slidewidth) + ((slider.settings.minslides - 1) * slider.settings.slidemargin)": 2,
                "slider.maxthreshold = (slider.settings.maxslides * slider.settings.slidewidth) + ((slider.settings.maxslides - 1) * slider.settings.slidemargin)": 2,
                "// store the current state of the slider (if currently animating, working is true) slider.working = false": 2,
                "// initialize the controls object slider.controls = {}": 2,
                "// initialize an auto interval slider.interval = null": 2,
                "// determine which property to use for transitions slider.animprop = slider.settings.mode == 'vertical' ? 'top' : 'left'": 2,
                "// determine if hardware acceleration can be used slider.usingcss = slider.settings.usecss slider.settings.mode != 'fade' (function(){ // create our test div element var div = document.createelement('div')": 1,
                "// css transition properties var props = ['webkitperspective', 'mozperspective', 'operspective', 'msperspective']": 2,
                "// test for each property for(var i in props){ if(div.style[props[i]] !== undefined){ slider.cssprefix = props[i].replace('perspective', '').tolowercase()": 2,
                "slider.animprop = '-' + slider.cssprefix + '-transform'": 2,
                "} } return false": 2,
                "// if vertical mode always make maxslides and minslides equal if(slider.settings.mode == 'vertical') slider.settings.maxslides = slider.settings.minslides": 2,
                "// save original style data el.data(\"origstyle\", el.attr(\"style\"))": 2,
                "el.children(slider.settings.slideselector).each(function() { $(this).data(\"origstyle\", $(this).attr(\"style\"))": 2,
                "// perform all dom / css modifications setup()": 2,
                "} /** * performs all dom and css modifications */ var setup = function(){ // wrap el in a wrapper el.wrap(' ')": 1,
                "// store a namspace reference to .bx-viewport slider.viewport = el.parent()": 2,
                "// add a loading div to display while images are loading slider.loader = $(' ')": 1,
                "// set el to a massive width, to hold any needed slides // also strip any margin and padding from el el.css({ width: slider.settings.mode == 'horizontal' ? (slider.children.length * 100 + 215) + '%' : 'auto', position: 'relative' })": 2,
                "// if using css, add the easing property if(slider.usingcss slider.settings.easing){ el.css('-' + slider.cssprefix + '-transition-timing-function', slider.settings.easing)": 1,
                "// if not using css and no easing value was supplied, use the default js animation easing (swing) }else if(!slider.settings.easing){ slider.settings.easing = 'swing'": 2,
                "} var slidesshowing = getnumberslidesshowing()": 2,
                "// make modifications to the viewport (.bx-viewport) slider.viewport.css({ width: '100%', overflow: 'hidden', position: 'relative' })": 2,
                "slider.viewport.parent().css({ maxwidth: getviewportmaxwidth() })": 2,
                "// make modification to the wrapper (.bx-wrapper) if(!slider.settings.pager) { slider.viewport.parent().css({ margin: '0 auto 0px' })": 2,
                "} // apply css to all slider children slider.children.css({ 'float': slider.settings.mode == 'horizontal' ? 'left' : 'none', liststyle: 'none', position: 'relative' })": 2,
                "// apply the calculated width after the float is applied to prevent scrollbar interference slider.children.css('width', getslidewidth())": 2,
                "// if slidemargin is supplied, add the css if(slider.settings.mode == 'horizontal' slider.settings.slidemargin > 0) slider.children.css('marginright', slider.settings.slidemargin)": 1,
                "if(slider.settings.mode == 'vertical' slider.settings.slidemargin > 0) slider.children.css('marginbottom', slider.settings.slidemargin)": 1,
                "// if \"fade\" mode, add positioning and z-index css if(slider.settings.mode == 'fade'){ slider.children.css({ position: 'absolute', zindex: 0, display: 'none' })": 2,
                "// prepare the z-index on the showing element slider.children.eq(slider.settings.startslide).css({zindex: 50, display: 'block'})": 2,
                "} // create an element to contain all slider controls (pager, start / stop, etc) slider.controls.el = $(' ')": 1,
                "// if captions are requested, add them if(slider.settings.captions) appendcaptions()": 2,
                "// check if startslide is last slide slider.active.last = slider.settings.startslide == getpagerqty() - 1": 2,
                "// if video is true, set up the fitvids plugin if(slider.settings.video) el.fitvids()": 2,
                "// set the default preload selector (visible) var preloadselector = slider.children.eq(slider.settings.startslide)": 2,
                "if (slider.settings.preloadimages == \"all\") preloadselector = slider.children": 2,
                "// only check for control addition if not in \"ticker\" mode if(!slider.settings.ticker){ // if pager is requested, add it if(slider.settings.pager) appendpager()": 2,
                "// if controls are requested, add them if(slider.settings.controls) appendcontrols()": 2,
                "// if auto is true, and auto controls are requested, add them if(slider.settings.auto slider.settings.autocontrols) appendcontrolsauto()": 1,
                "// if any control option is requested, add the controls wrapper if(slider.settings.controls || slider.settings.autocontrols || slider.settings.pager) slider.viewport.after(slider.controls.el)": 2,
                "// if ticker mode, do not allow a pager }else{ slider.settings.pager = false": 2,
                "} // preload all images, then perform final dom / css modifications that depend on images being loaded loadelements(preloadselector, start)": 2,
                "} var loadelements = function(selector, callback){ var total = selector.find('img, iframe').length": 2,
                "if (total == 0){ callback()": 2,
                "} var count = 0": 2,
                "selector.find('img, iframe').each(function(){ if($(this).is('img')) $(this).attr('src', $(this).attr('src') + '?timestamp=' + new date().gettime())": 2,
                "$(this).load(function(){ settimeout(function(){ if(++count == total) callback()": 2,
                "}, 0) })": 2,
                "} /** * start the slider */ var start = function(){ // if infinite loop, prepare additional slides if(slider.settings.infiniteloop slider.settings.mode != 'fade' !slider.settings.ticker){ var slice = slider.settings.mode == 'vertical' ? slider.settings.minslides : slider.settings.maxslides": 1,
                "var sliceappend = slider.children.slice(0, slice).clone().addclass('bx-clone')": 2,
                "var sliceprepend = slider.children.slice(-slice).clone().addclass('bx-clone')": 2,
                "el.append(sliceappend).prepend(sliceprepend)": 2,
                "} // remove the loading dom element slider.loader.remove()": 2,
                "// set the left / top position of \"el\" setslideposition()": 2,
                "// if \"vertical\" mode, always use adaptiveheight to prevent odd behavior if (slider.settings.mode == 'vertical') slider.settings.adaptiveheight = true": 2,
                "// set the viewport height slider.viewport.height(getviewportheight())": 2,
                "// make sure everything is positioned just right (same as a window resize) el.redrawslider()": 2,
                "// onsliderload callback slider.settings.onsliderload(slider.active.index)": 2,
                "// slider has been fully initialized slider.initialized = true": 2,
                "// bind the resize call to the window if (slider.settings.responsive) $(window).bind('resize', resizewindow)": 2,
                "// if auto is true, start the show if (slider.settings.auto slider.settings.autostart) initauto()": 1,
                "// if ticker is true, start the ticker if (slider.settings.ticker) initticker()": 2,
                "// if pager is requested, make the appropriate pager link active if (slider.settings.pager) updatepageractive(slider.settings.startslide)": 2,
                "// check for any updates to the controls (like hidecontrolonend updates) if (slider.settings.controls) updatedirectioncontrols()": 2,
                "// if touchenabled is true, setup the touch events if (slider.settings.touchenabled !slider.settings.ticker) inittouch()": 1,
                "} /** * returns the calculated height of the viewport, used to determine either adaptiveheight or the maxheight value */ var getviewportheight = function(){ var height = 0": 2,
                "// first determine which children (slides) should be used in our height calculation var children = $()": 2,
                "// if mode is not \"vertical\" and adaptiveheight is false, include all children if(slider.settings.mode != 'vertical' !slider.settings.adaptiveheight){ children = slider.children": 1,
                "}else{ // if not carousel, return the single active child if(!slider.carousel){ children = slider.children.eq(slider.active.index)": 2,
                "// if carousel, return a slice of children }else{ // get the individual slide index var currentindex = slider.settings.moveslides == 1 ? slider.active.index : slider.active.index * getmoveby()": 2,
                "// add the current slide to the children children = slider.children.eq(currentindex)": 2,
                "// cycle through the remaining \"showing\" slides for (i = 1": 2,
                "i = slider.children.length){ children = children.add(slider.children.eq(i - 1))": 1,
                "}else{ children = children.add(slider.children.eq(currentindex + i))": 2,
                "} } } } // if \"vertical\" mode, calculate the sum of the heights of the children if(slider.settings.mode == 'vertical'){ children.each(function(index) { height += $(this).outerheight()": 2,
                "// add user-supplied margins if(slider.settings.slidemargin > 0){ height += slider.settings.slidemargin * (slider.settings.minslides - 1)": 2,
                "} // if not \"vertical\" mode, calculate the max height of the children }else{ height = math.max.apply(math, children.map(function(){ return $(this).outerheight(false)": 2,
                "} return height": 2,
                "} /** * returns the calculated width to be used for the outer wrapper / viewport */ var getviewportmaxwidth = function(){ var width = '100%'": 2,
                "if(slider.settings.slidewidth > 0){ if(slider.settings.mode == 'horizontal'){ width = (slider.settings.maxslides * slider.settings.slidewidth) + ((slider.settings.maxslides - 1) * slider.settings.slidemargin)": 2,
                "}else{ width = slider.settings.slidewidth": 2,
                "} } return width": 2,
                "} /** * returns the calculated width to be applied to each slide */ var getslidewidth = function(){ // start with any user-supplied slide width var newelwidth = slider.settings.slidewidth": 2,
                "// get the current viewport width var wrapwidth = slider.viewport.width()": 2,
                "// if slide width was not supplied, or is larger than the viewport use the viewport width if(slider.settings.slidewidth == 0 || (slider.settings.slidewidth > wrapwidth !slider.carousel) || slider.settings.mode == 'vertical'){ newelwidth = wrapwidth": 1,
                "// if carousel, use the thresholds to determine the width }else if(slider.settings.maxslides > 1 slider.settings.mode == 'horizontal'){ if(wrapwidth > slider.maxthreshold){ // newelwidth = (wrapwidth - (slider.settings.slidemargin * (slider.settings.maxslides - 1))) / slider.settings.maxslides": 1,
                "}else if(wrapwidth 0){ // if viewport is smaller than minthreshold, return minslides if(slider.viewport.width() slider.maxthreshold){ slidesshowing = slider.settings.maxslides": 1,
                "// if viewport is between min / max thresholds, divide viewport width by first child width }else{ var childwidth = slider.children.first().width()": 2,
                "slidesshowing = math.floor(slider.viewport.width() / childwidth)": 2,
                "} // if \"vertical\" mode, slides showing will always be minslides }else if(slider.settings.mode == 'vertical'){ slidesshowing = slider.settings.minslides": 2,
                "} return slidesshowing": 2,
                "} /** * returns the number of pages (one full viewport of slides is one \"page\") */ var getpagerqty = function(){ var pagerqty = 0": 2,
                "// if moveslides is specified by the user if(slider.settings.moveslides > 0){ if(slider.settings.infiniteloop){ pagerqty = slider.children.length / getmoveby()": 2,
                "}else{ // use a while loop to determine pages var breakpoint = 0": 2,
                "var counter = 0 // when breakpoint goes above children length, counter is the number of pages while (breakpoint 0 slider.settings.moveslides slider.settings.maxslides slider.active.last !slider.settings.infiniteloop){ if (slider.settings.mode == 'horizontal'){ // get the last child's position var lastchild = slider.children.last()": 1,
                "var position = lastchild.position()": 2,
                "// set the left position setpositionproperty(-(position.left - (slider.viewport.width() - lastchild.width())), 'reset', 0)": 2,
                "}else if(slider.settings.mode == 'vertical'){ // get the last showing index's position var lastshowingindex = slider.children.length - slider.settings.minslides": 2,
                "var position = slider.children.eq(lastshowingindex).position()": 2,
                "// set the top position setpositionproperty(-position.top, 'reset', 0)": 2,
                "} // if not last slide }else{ // get the position of the first showing slide var position = slider.children.eq(slider.active.index * getmoveby()).position()": 2,
                "// check for last slide if (slider.active.index == getpagerqty() - 1) slider.active.last = true": 2,
                "// set the repective position if (position != undefined){ if (slider.settings.mode == 'horizontal') setpositionproperty(-position.left, 'reset', 0)": 2,
                "else if (slider.settings.mode == 'vertical') setpositionproperty(-position.top, 'reset', 0)": 2,
                "} } } /** * sets the el's animating property position (which in turn will sometimes animate el). * if using css, sets the transform property. if not using css, sets the top / left property. * * @param value (int) * - the animating property's value * * @param type (string) 'slider', 'reset', 'ticker' * - the type of instance for which the function is being * * @param duration (int) * - the amount of time (in ms) the transition should occupy * * @param params (array) optional * - an optional parameter containing any variables that need to be passed in */ var setpositionproperty = function(value, type, duration, params){ // use css transform if(slider.usingcss){ // determine the translate3d value var propvalue = slider.settings.mode == 'vertical' ? 'translate3d(0, ' + value + 'px, 0)' : 'translate3d(' + value + 'px, 0, 0)'": 2,
                "// add the css transition-duration el.css('-' + slider.cssprefix + '-transition-duration', duration / 1000 + 's')": 2,
                "if(type == 'slide'){ // set the property value el.css(slider.animprop, propvalue)": 2,
                "// bind a callback method - executes when css transition completes el.bind('transitionend webkittransitionend otransitionend mstransitionend', function(){ // unbind the callback el.unbind('transitionend webkittransitionend otransitionend mstransitionend')": 4,
                "updateafterslidetransition()": 4,
                "}else if(type == 'reset'){ el.css(slider.animprop, propvalue)": 2,
                "}else if(type == 'ticker'){ // make the transition use 'linear' el.css('-' + slider.cssprefix + '-transition-timing-function', 'linear')": 2,
                "el.css(slider.animprop, propvalue)": 2,
                "// reset the position setpositionproperty(params['resetvalue'], 'reset', 0)": 2,
                "// start the loop again tickerloop()": 2,
                "} // use js animate }else{ var animateobj = {}": 2,
                "animateobj[slider.animprop] = value": 2,
                "if(type == 'slide'){ el.animate(animateobj, duration, slider.settings.easing, function(){ updateafterslidetransition()": 2,
                "}else if(type == 'reset'){ el.css(slider.animprop, value) }else if(type == 'ticker'){ el.animate(animateobj, speed, 'linear', function(){ setpositionproperty(params['resetvalue'], 'reset', 0)": 2,
                "// run the recursive loop after animation tickerloop()": 2,
                "} } } /** * populates the pager with proper amount of pages */ var populatepager = function(){ var pagerhtml = ''": 2,
                "var pagerqty = getpagerqty()": 2,
                "// loop through each pager item for(var i=0": 2,
                "i ' + linkcontent + ' '": 1,
                "// populate the pager element with pager links slider.pagerel.html(pagerhtml)": 2,
                "} /** * appends the pager to the controls element */ var appendpager = function(){ if(!slider.settings.pagercustom){ // create the pager dom element slider.pagerel = $(' ')": 1,
                "// if a pager selector was supplied, populate it with the pager if(slider.settings.pagerselector){ $(slider.settings.pagerselector).html(slider.pagerel)": 2,
                "// if no pager selector was supplied, add it after the wrapper }else{ slider.controls.el.addclass('bx-has-pager').append(slider.pagerel)": 2,
                "} // populate the pager populatepager()": 2,
                "}else{ slider.pagerel = $(slider.settings.pagercustom)": 2,
                "} // assign the pager click binding slider.pagerel.delegate('a', 'click', clickpagerbind)": 2,
                "} /** * appends prev / next controls to the controls element */ var appendcontrols = function(){ slider.controls.next = $(' ' + slider.settings.nexttext + ' ')": 1,
                "slider.controls.prev = $(' ' + slider.settings.prevtext + ' ')": 1,
                "// bind click actions to the controls slider.controls.next.bind('click', clicknextbind)": 2,
                "slider.controls.prev.bind('click', clickprevbind)": 2,
                "// if nextslector was supplied, populate it if(slider.settings.nextselector){ $(slider.settings.nextselector).append(slider.controls.next)": 2,
                "} // if prevslector was supplied, populate it if(slider.settings.prevselector){ $(slider.settings.prevselector).append(slider.controls.prev)": 2,
                "} // if no custom selectors were supplied if(!slider.settings.nextselector !slider.settings.prevselector){ // add the controls to the dom slider.controls.directionel = $(' ')": 1,
                "// add the control elements to the directionel slider.controls.directionel.append(slider.controls.prev).append(slider.controls.next)": 2,
                "// slider.viewport.append(slider.controls.directionel)": 2,
                "slider.controls.el.addclass('bx-has-controls-direction').append(slider.controls.directionel)": 2,
                "} } /** * appends start / stop auto controls to the controls element */ var appendcontrolsauto = function(){ slider.controls.start = $(' ' + slider.settings.starttext + ' ')": 1,
                "slider.controls.stop = $(' ' + slider.settings.stoptext + ' ')": 1,
                "// add the controls to the dom slider.controls.autoel = $(' ')": 1,
                "// bind click actions to the controls slider.controls.autoel.delegate('.bx-start', 'click', clickstartbind)": 2,
                "slider.controls.autoel.delegate('.bx-stop', 'click', clickstopbind)": 2,
                "// if autocontrolscombine, insert only the \"start\" control if(slider.settings.autocontrolscombine){ slider.controls.autoel.append(slider.controls.start)": 2,
                "// if autocontrolscombine is false, insert both controls }else{ slider.controls.autoel.append(slider.controls.start).append(slider.controls.stop)": 2,
                "} // if auto controls selector was supplied, populate it with the controls if(slider.settings.autocontrolsselector){ $(slider.settings.autocontrolsselector).html(slider.controls.autoel)": 2,
                "// if auto controls selector was not supplied, add it after the wrapper }else{ slider.controls.el.addclass('bx-has-controls-auto').append(slider.controls.autoel)": 2,
                "} // update the auto controls updateautocontrols(slider.settings.autostart ? 'stop' : 'start')": 2,
                "} /** * appends image captions to the dom */ var appendcaptions = function(){ // cycle through each child slider.children.each(function(index){ // get the image title attribute var title = $(this).find('img:first').attr('title')": 2,
                "// append the caption if (title != undefined ('' + title).length) { $(this).append(' ' + title + ' ')": 1,
                "} /** * click next binding * * @param e (event) * - dom event object */ var clicknextbind = function(e){ // if auto show is running, stop it if (slider.settings.auto) el.stopauto()": 2,
                "el.gotonextslide()": 2,
                "e.preventdefault()": 10,
                "} /** * click prev binding * * @param e (event) * - dom event object */ var clickprevbind = function(e){ // if auto show is running, stop it if (slider.settings.auto) el.stopauto()": 2,
                "el.gotoprevslide()": 2,
                "} /** * click start binding * * @param e (event) * - dom event object */ var clickstartbind = function(e){ el.startauto()": 2,
                "} /** * click stop binding * * @param e (event) * - dom event object */ var clickstopbind = function(e){ el.stopauto()": 2,
                "} /** * click pager binding * * @param e (event) * - dom event object */ var clickpagerbind = function(e){ // if auto show is running, stop it if (slider.settings.auto) el.stopauto()": 2,
                "var pagerlink = $(e.currenttarget)": 2,
                "var pagerindex = parseint(pagerlink.attr('data-slide-index'))": 2,
                "// if clicked pager link is not active, continue with the gotoslide call if(pagerindex != slider.active.index) el.gotoslide(pagerindex)": 2,
                "} /** * updates the pager links with an active class * * @param slideindex (int) * - index of slide to make active */ var updatepageractive = function(slideindex){ // if \"short\" pager type var len = slider.children.length": 2,
                "// nb of children if(slider.settings.pagertype == 'short'){ if(slider.settings.maxslides > 1) { len = math.ceil(slider.children.length/slider.settings.maxslides)": 2,
                "} slider.pagerel.html( (slideindex + 1) + slider.settings.pagershortseparator + len)": 2,
                "} // remove all pager active classes slider.pagerel.find('a').removeclass('active')": 2,
                "// apply the active class for all pagers slider.pagerel.each(function(i, el) { $(el).find('a').eq(slideindex).addclass('active')": 2,
                "} /** * performs needed actions after a slide transition */ var updateafterslidetransition = function(){ // if infinte loop is true if(slider.settings.infiniteloop){ var position = ''": 2,
                "// first slide if(slider.active.index == 0){ // set the new position position = slider.children.eq(0).position()": 2,
                "// carousel, last slide }else if(slider.active.index == getpagerqty() - 1 slider.carousel){ position = slider.children.eq((getpagerqty() - 1) * getmoveby()).position()": 1,
                "// last slide }else if(slider.active.index == slider.children.length - 1){ position = slider.children.eq(slider.children.length - 1).position()": 2,
                "} if (slider.settings.mode == 'horizontal') { setpositionproperty(-position.left, 'reset', 0)": 2,
                "} else if (slider.settings.mode == 'vertical') { setpositionproperty(-position.top, 'reset', 0)": 2,
                "} } // declare that the transition is complete slider.working = false": 2,
                "// onslideafter callback slider.settings.onslideafter(slider.children.eq(slider.active.index), slider.oldindex, slider.active.index)": 2,
                "} /** * updates the auto controls state (either active, or combined switch) * * @param state (string) \"start\", \"stop\" * - the new state of the auto show */ var updateautocontrols = function(state){ // if autocontrolscombine is true, replace the current control with the new state if(slider.settings.autocontrolscombine){ slider.controls.autoel.html(slider.controls[state])": 2,
                "// if autocontrolscombine is false, apply the \"active\" class to the appropriate control }else{ slider.controls.autoel.find('a').removeclass('active')": 2,
                "slider.controls.autoel.find('a:not(.bx-' + state + ')').addclass('active')": 2,
                "} } /** * updates the direction controls (checks if either should be hidden) */ var updatedirectioncontrols = function(){ if(getpagerqty() == 1){ slider.controls.prev.addclass('disabled')": 2,
                "slider.controls.next.addclass('disabled')": 2,
                "}else if(!slider.settings.infiniteloop slider.settings.hidecontrolonend){ // if first slide if (slider.active.index == 0){ slider.controls.prev.addclass('disabled')": 1,
                "slider.controls.next.removeclass('disabled')": 4,
                "// if last slide }else if(slider.active.index == getpagerqty() - 1){ slider.controls.next.addclass('disabled')": 2,
                "slider.controls.prev.removeclass('disabled')": 2,
                "// if any slide in the middle }else{ slider.controls.prev.removeclass('disabled')": 2,
                "} } } /** * initialzes the auto process */ var initauto = function(){ // if autodelay was supplied, launch the auto show using a settimeout() call if(slider.settings.autodelay > 0){ var timeout = settimeout(el.startauto, slider.settings.autodelay)": 2,
                "// if autodelay was not supplied, start the auto show normally }else{ el.startauto()": 2,
                "} // if autohover is requested if(slider.settings.autohover){ // on el hover el.hover(function(){ // if the auto show is currently playing (has an active interval) if(slider.interval){ // stop the auto show and pass true agument which will prevent control update el.stopauto(true)": 2,
                "// create a new autopaused value which will be used by the relative \"mouseout\" event slider.autopaused = true": 2,
                "} }, function(){ // if the autopaused value was created be the prior \"mouseover\" event if(slider.autopaused){ // start the auto show and pass true agument which will prevent control update el.startauto(true)": 2,
                "// reset the autopaused value slider.autopaused = null": 2,
                "} } /** * initialzes the ticker process */ var initticker = function(){ var startposition = 0": 2,
                "// if autodirection is \"next\", append a clone of the entire slider if(slider.settings.autodirection == 'next'){ el.append(slider.children.clone().addclass('bx-clone'))": 2,
                "// if autodirection is \"prev\", prepend a clone of the entire slider, and set the left position }else{ el.prepend(slider.children.clone().addclass('bx-clone'))": 2,
                "startposition = slider.settings.mode == 'horizontal' ? -position.left : -position.top": 2,
                "} setpositionproperty(startposition, 'reset', 0)": 2,
                "// do not allow controls in ticker mode slider.settings.pager = false": 2,
                "slider.settings.autocontrols = false": 2,
                "// if autohover is requested if(slider.settings.tickerhover !slider.usingcss){ // on el hover slider.viewport.hover(function(){ el.stop()": 1,
                "}, function(){ // calculate the total width of children (used to calculate the speed ratio) var totaldimens = 0": 2,
                "slider.children.each(function(index){ totaldimens += slider.settings.mode == 'horizontal' ? $(this).outerwidth(true) : $(this).outerheight(true)": 2,
                "// calculate the speed ratio (used to determine the new speed to finish the paused animation) var ratio = slider.settings.speed / totaldimens": 2,
                "// determine which property to use var property = slider.settings.mode == 'horizontal' ? 'left' : 'top'": 2,
                "// calculate the new speed var newspeed = ratio * (totaldimens - (math.abs(parseint(el.css(property)))))": 2,
                "tickerloop(newspeed)": 2,
                "} // start the ticker loop tickerloop()": 2,
                "} /** * runs a continuous loop, news ticker-style */ var tickerloop = function(resumespeed){ speed = resumespeed ? resumespeed : slider.settings.speed": 2,
                "// if \"next\" animate left position to last child, then reset left to 0 if(slider.settings.autodirection == 'next'){ position = el.find('.bx-clone').first().position()": 2,
                "// if \"prev\" animate left position to 0, then reset left to first non-clone child }else{ reset = slider.children.first().position()": 2,
                "} var animateproperty = slider.settings.mode == 'horizontal' ? -position.left : -position.top": 2,
                "var resetvalue = slider.settings.mode == 'horizontal' ? -reset.left : -reset.top": 2,
                "var params = {resetvalue: resetvalue}": 2,
                "setpositionproperty(animateproperty, 'ticker', speed, params)": 2,
                "} /** * initializes touch events */ var inittouch = function(){ // initialize object to contain all touch values slider.touch = { start: {x: 0, y: 0}, end: {x: 0, y: 0} } slider.viewport.bind('touchstart', ontouchstart)": 2,
                "} /** * event handler for \"touchstart\" * * @param e (event) * - dom event object */ var ontouchstart = function(e){ if(slider.working){ e.preventdefault()": 2,
                "}else{ // record the original position when touch starts slider.touch.originalpos = el.position()": 2,
                "var orig = e.originalevent": 4,
                "// record the starting touch x, y coordinates slider.touch.start.x = orig.changedtouches[0].pagex": 2,
                "slider.touch.start.y = orig.changedtouches[0].pagey": 2,
                "// bind a \"touchmove\" event to the viewport slider.viewport.bind('touchmove', ontouchmove)": 2,
                "// bind a \"touchend\" event to the viewport slider.viewport.bind('touchend', ontouchend)": 2,
                "} } /** * event handler for \"touchmove\" * * @param e (event) * - dom event object */ var ontouchmove = function(e){ var orig = e.originalevent": 2,
                "// if scrolling on y axis, do not prevent default var xmovement = math.abs(orig.changedtouches[0].pagex - slider.touch.start.x)": 2,
                "var ymovement = math.abs(orig.changedtouches[0].pagey - slider.touch.start.y)": 2,
                "// x axis swipe if((xmovement * 3) > ymovement slider.settings.preventdefaultswipex){ e.preventdefault()": 1,
                "// y axis swipe }else if((ymovement * 3) > xmovement slider.settings.preventdefaultswipey){ e.preventdefault()": 1,
                "} if(slider.settings.mode != 'fade' slider.settings.onetoonetouch){ var value = 0": 1,
                "// if horizontal, drag along x axis if(slider.settings.mode == 'horizontal'){ var change = orig.changedtouches[0].pagex - slider.touch.start.x": 2,
                "value = slider.touch.originalpos.left + change": 2,
                "// if vertical, drag along y axis }else{ var change = orig.changedtouches[0].pagey - slider.touch.start.y": 2,
                "value = slider.touch.originalpos.top + change": 2,
                "} setpositionproperty(value, 'reset', 0)": 2,
                "} } /** * event handler for \"touchend\" * * @param e (event) * - dom event object */ var ontouchend = function(e){ slider.viewport.unbind('touchmove', ontouchmove)": 2,
                "// record end x, y positions slider.touch.end.x = orig.changedtouches[0].pagex": 2,
                "slider.touch.end.y = orig.changedtouches[0].pagey": 2,
                "// if fade mode, check if absolute x distance clears the threshold if(slider.settings.mode == 'fade'){ var distance = math.abs(slider.touch.start.x - slider.touch.end.x)": 2,
                "if(distance >= slider.settings.swipethreshold){ slider.touch.start.x > slider.touch.end.x ? el.gotonextslide() : el.gotoprevslide()": 2,
                "el.stopauto()": 3,
                "} // not fade mode }else{ var distance = 0": 2,
                "// calculate distance and el's animate property if(slider.settings.mode == 'horizontal'){ distance = slider.touch.end.x - slider.touch.start.x": 2,
                "value = slider.touch.originalpos.left": 2,
                "}else{ distance = slider.touch.end.y - slider.touch.start.y": 2,
                "value = slider.touch.originalpos.top": 2,
                "} // if not infinite loop and first / last slide, do not attempt a slide transition if(!slider.settings.infiniteloop ((slider.active.index == 0 distance > 0) || (slider.active.last distance = slider.settings.swipethreshold){ distance = getpagerqty()){ slider.active.index = 0": 1,
                "// set active index to requested slide }else{ slider.active.index = slideindex": 2,
                "} // onslidebefore, onslidenext, onslideprev callbacks slider.settings.onslidebefore(slider.children.eq(slider.active.index), slider.oldindex, slider.active.index)": 2,
                "if(direction == 'next'){ slider.settings.onslidenext(slider.children.eq(slider.active.index), slider.oldindex, slider.active.index)": 2,
                "}else if(direction == 'prev'){ slider.settings.onslideprev(slider.children.eq(slider.active.index), slider.oldindex, slider.active.index)": 2,
                "} // check if last slide slider.active.last = slider.active.index >= getpagerqty() - 1": 2,
                "// update the pager with active class if(slider.settings.pager) updatepageractive(slider.active.index)": 2,
                "// // check for direction control update if(slider.settings.controls) updatedirectioncontrols()": 2,
                "// if slider is set to mode: \"fade\" if(slider.settings.mode == 'fade'){ // if adaptiveheight is true and next height is different from current height, animate to the new height if(slider.settings.adaptiveheight slider.viewport.height() != getviewportheight()){ slider.viewport.animate({height: getviewportheight()}, slider.settings.adaptiveheightspeed)": 1,
                "} // fade out the visible child and reset its z-index value slider.children.filter(':visible').fadeout(slider.settings.speed).css({zindex: 0})": 2,
                "// fade in the newly requested slide slider.children.eq(slider.active.index).css('zindex', 51).fadein(slider.settings.speed, function(){ $(this).css('zindex', 50)": 2,
                "// slider mode is not \"fade\" }else{ // if adaptiveheight is true and next height is different from current height, animate to the new height if(slider.settings.adaptiveheight slider.viewport.height() != getviewportheight()){ slider.viewport.animate({height: getviewportheight()}, slider.settings.adaptiveheightspeed)": 1,
                "} var moveby = 0": 2,
                "// if carousel and not infinite loop if(!slider.settings.infiniteloop slider.carousel slider.active.last){ if(slider.settings.mode == 'horizontal'){ // get the last child position var lastchild = slider.children.eq(slider.children.length - 1)": 1,
                "position = lastchild.position()": 4,
                "// calculate the position of the last slide moveby = slider.viewport.width() - lastchild.outerwidth()": 2,
                "}else{ // get last showing index position var lastshowingindex = slider.children.length - slider.settings.minslides": 2,
                "position = slider.children.eq(lastshowingindex).position()": 2,
                "} // horizontal carousel, going previous while on first slide (infiniteloop mode) }else if(slider.carousel slider.active.last direction == 'prev'){ // get the last child position var eq = slider.settings.moveslides == 1 ? slider.settings.maxslides - getmoveby() : ((getpagerqty() - 1) * getmoveby()) - (slider.children.length - slider.settings.maxslides)": 1,
                "var lastchild = el.children('.bx-clone').eq(eq)": 2,
                "// if infinite loop and \"next\" is clicked on the last slide }else if(direction == 'next' slider.active.index == 0){ // get the last clone position position = el.find('> .bx-clone').eq(slider.settings.maxslides).position()": 1,
                "// normal non-zero requests }else if(slideindex >= 0){ var requestel = slideindex * getmoveby()": 2,
                "position = slider.children.eq(requestel).position()": 2,
                "} /* if the position doesn't exist * (e.g. if you destroy the slider on a next click), * it doesn't throw an error. */ if (\"undefined\" !== typeof(position)) { var value = slider.settings.mode == 'horizontal' ? -(position.left - moveby) : -position.top": 2,
                "// plugin values to be animated setpositionproperty(value, 'slide', slider.settings.speed)": 2,
                "} } } /** * transitions to the next slide in the show */ el.gotonextslide = function(){ // if infiniteloop is false and last page is showing, disregard call if (!slider.settings.infiniteloop slider.active.last) return": 1,
                "var pagerindex = parseint(slider.active.index) + 1": 2,
                "el.gotoslide(pagerindex, 'next')": 2,
                "} /** * transitions to the prev slide in the show */ el.gotoprevslide = function(){ // if infiniteloop is false and last page is showing, disregard call if (!slider.settings.infiniteloop slider.active.index == 0) return": 1,
                "var pagerindex = parseint(slider.active.index) - 1": 2,
                "el.gotoslide(pagerindex, 'prev')": 2,
                "} /** * starts the auto show * * @param preventcontrolupdate (boolean) * - if true, auto controls state will not be updated */ el.startauto = function(preventcontrolupdate){ // if an interval already exists, disregard call if(slider.interval) return": 2,
                "// create an interval slider.interval = setinterval(function(){ slider.settings.autodirection == 'next' ? el.gotonextslide() : el.gotoprevslide()": 2,
                "// if auto controls are displayed and preventcontrolupdate is not true if (slider.settings.autocontrols preventcontrolupdate != true) updateautocontrols('stop')": 1,
                "} /** * stops the auto show * * @param preventcontrolupdate (boolean) * - if true, auto controls state will not be updated */ el.stopauto = function(preventcontrolupdate){ // if no interval exists, disregard call if(!slider.interval) return": 2,
                "// clear the interval clearinterval(slider.interval)": 2,
                "// if auto controls are displayed and preventcontrolupdate is not true if (slider.settings.autocontrols preventcontrolupdate != true) updateautocontrols('start')": 1,
                "} /** * returns current slide index (zero-based) */ el.getcurrentslide = function(){ return slider.active.index": 2,
                "} /** * returns number of slides in show */ el.getslidecount = function(){ return slider.children.length": 2,
                "} /** * update all dynamic slider elements */ el.redrawslider = function(){ // resize all children in ratio to new screen size slider.children.add(el.find('.bx-clone')).outerwidth(getslidewidth())": 2,
                "// adjust the height slider.viewport.css('height', getviewportheight())": 2,
                "// update the slide position if(!slider.settings.ticker) setslideposition()": 2,
                "// if active.last was true before the screen resize, we want // to keep it last no matter what screen size we end on if (slider.active.last) slider.active.index = getpagerqty() - 1": 2,
                "// if the active index (page) no longer exists due to the resize, simply set the index as last if (slider.active.index >= getpagerqty()) slider.active.last = true": 2,
                "// if a pager is being displayed and a custom pager is not being used, update it if(slider.settings.pager !slider.settings.pagercustom){ populatepager()": 1,
                "updatepageractive(slider.active.index)": 2,
                "} } /** * destroy the current instance of the slider (revert everything back to original state) */ el.destroyslider = function(){ // don't do anything if slider has already been destroyed if(!slider.initialized) return": 2,
                "slider.children.each(function() { $(this).data(\"origstyle\") != undefined ? $(this).attr(\"style\", $(this).data(\"origstyle\")) : $(this).removeattr('style')": 2,
                "$(this).data(\"origstyle\") != undefined ? this.attr(\"style\", $(this).data(\"origstyle\")) : $(this).removeattr('style')": 2,
                "if(slider.pagerel) slider.pagerel.remove()": 2,
                "if(slider.controls.autoel) slider.controls.autoel.remove()": 2,
                "clearinterval(slider.interval)": 2,
                "if(slider.settings.responsive) $(window).unbind('resize', resizewindow)": 2,
                "} /** * reload the slider (revert all dom changes, and re-initialize) */ el.reloadslider = function(settings){ if (settings != undefined) options = settings": 2,
                "el.destroyslider()": 2,
                "} init()": 2,
                "// returns the current jquery object return this": 2,
                "} })(jquery)": 2,
                "special: fn.bxslider": 2,
                "special: slider.settings.slidewidth": 21,
                "special: slider.settings.slideselector": 4,
                "special: slider.settings.maxslides": 37,
                "special: slider.settings.preloadimages": 4,
                "special: slider.minthreshold": 4,
                "special: slider.settings.minslides": 22,
                "special: slider.settings.slidemargin": 21,
                "special: slider.maxthreshold": 6,
                "special: slider.animprop": 14,
                "special: slider.usingcss": 8,
                "special: slider.settings.usecss": 2,
                "special: document.createelement": 2,
                "special: slider.cssprefix": 10,
                "special: slider.settings.startslide": 10,
                "special: el.fitvids": 2,
                "special: slider.settings.autocontrols": 10,
                "special: slider.settings.infiniteloop": 18,
                "special: slider.settings.adaptiveheight": 8,
                "special: el.redrawslider": 5,
                "special: slider.settings.onsliderload": 2,
                "special: slider.settings.autostart": 4,
                "special: slider.settings.touchenabled": 2,
                "special: slider.settings.moveslides": 12,
                "special: math.max.apply": 2,
                "special: math.floor": 3,
                "special: lastchild.position": 6,
                "special: lastchild.width": 2,
                "special: slider.pagerel.html": 4,
                "special: slider.settings.pagercustom": 6,
                "special: slider.pagerel": 10,
                "special: slider.settings.pagerselector": 4,
                "special: slider.controls.el.addclass": 6,
                "special: slider.pagerel.delegate": 2,
                "special: slider.settings.nexttext": 2,
                "special: slider.settings.prevtext": 2,
                "special: slider.settings.nextselector": 6,
                "special: slider.settings.prevselector": 6,
                "special: slider.controls.directionel": 6,
                "special: slider.controls.directionel.append": 2,
                "special: slider.settings.starttext": 2,
                "special: slider.settings.stoptext": 2,
                "special: slider.controls.autoel": 8,
                "special: slider.controls.autoel.delegate": 4,
                "special: slider.settings.autocontrolscombine": 4,
                "special: slider.controls.autoel.append": 4,
                "special: slider.settings.autocontrolsselector": 4,
                "special: el.stopauto": 15,
                "special: el.gotonextslide": 9,
                "special: e.preventdefault": 16,
                "special: el.gotoprevslide": 9,
                "special: el.startauto": 10,
                "special: e.currenttarget": 2,
                "special: pagerlink.attr": 2,
                "special: el.gotoslide": 7,
                "special: slider.settings.pagertype": 2,
                "special: math.ceil": 3,
                "special: slider.settings.pagershortseparator": 2,
                "special: slider.pagerel.find": 2,
                "special: slider.pagerel.each": 2,
                "special: slider.settings.onslideafter": 2,
                "special: slider.oldindex": 9,
                "special: slider.controls.autoel.html": 2,
                "special: slider.controls.autoel.find": 4,
                "special: slider.controls.prev.addclass": 4,
                "special: slider.controls.next.addclass": 4,
                "special: slider.settings.hidecontrolonend": 2,
                "special: slider.controls.next.removeclass": 4,
                "special: slider.controls.prev.removeclass": 4,
                "special: slider.settings.autodelay": 4,
                "special: slider.settings.autohover": 2,
                "special: slider.autopaused": 6,
                "special: slider.settings.autodirection": 6,
                "special: slider.settings.tickerhover": 2,
                "special: math.abs": 9,
                "special: slider.touch.originalpos": 2,
                "special: e.originalevent": 6,
                "special: orig.changedtouches": 16,
                "special: slider.settings.preventdefaultswipex": 2,
                "special: slider.settings.preventdefaultswipey": 2,
                "special: slider.settings.onetoonetouch": 2,
                "special: slider.touch.originalpos.left": 4,
                "special: slider.touch.originalpos.top": 4,
                "special: slider.settings.swipethreshold": 4,
                "special: slider.settings.onslidebefore": 2,
                "special: slider.settings.onslidenext": 2,
                "special: slider.settings.onslideprev": 2,
                "special: slider.settings.adaptiveheightspeed": 4,
                "special: lastchild.outerwidth": 2,
                "special: el.getcurrentslide": 2,
                "special: el.getslidecount": 2,
                "special: el.destroyslider": 4,
                "special: slider.pagerel.remove": 2,
                "special: slider.controls.autoel.remove": 2,
                "special: el.reloadslider": 2,
                "// check if actual number of slides is less than minslides / maxslides if(slider.children.length <slider.settings.minslides) slider.settings.minslides=slider.children.length": 1,
                "if(slider.children.length < slider.settings.maxslides) slider.settings.maxslides=slider.children.length": 1,
                "// if random start, set the startslide setting to random number if(slider.settings.randomstart) slider.settings.startslide=math.floor(math.random() * slider.children.length)": 1,
                "// store active slide information slider.active={ index: slider.settings.startslide } // store if the slider is in carousel mode (displaying / moving multiple slides) slider.carousel=slider.settings.minslides>1 || slider.settings.maxslides > 1": 1,
                "// determine if hardware acceleration can be used slider.usingcss = slider.settings.usecss && slider.settings.mode != 'fade' && (function(){ // create our test div element var div = document.createelement('div')": 1,
                "} /** * performs all dom and css modifications */ var setup = function(){ // wrap el in a wrapper el.wrap('<div class=\"bx-wrapper\">": 1,
                "// add a loading div to display while images are loading slider.loader = $('<div class=\"bx-loading\" />')": 1,
                "// if using css, add the easing property if(slider.usingcss && slider.settings.easing){ el.css('-' + slider.cssprefix + '-transition-timing-function', slider.settings.easing)": 1,
                "// if slidemargin is supplied, add the css if(slider.settings.mode == 'horizontal' && slider.settings.slidemargin > 0) slider.children.css('marginright', slider.settings.slidemargin)": 1,
                "if(slider.settings.mode == 'vertical' && slider.settings.slidemargin > 0) slider.children.css('marginbottom', slider.settings.slidemargin)": 1,
                "} // create an element to contain all slider controls (pager, start / stop, etc) slider.controls.el = $('<div class=\"bx-controls\" />')": 1,
                "// if auto is true, and auto controls are requested, add them if(slider.settings.auto && slider.settings.autocontrols) appendcontrolsauto()": 1,
                "} /** * start the slider */ var start = function(){ // if infinite loop, prepare additional slides if(slider.settings.infiniteloop && slider.settings.mode != 'fade' && !slider.settings.ticker){ var slice = slider.settings.mode == 'vertical' ? slider.settings.minslides : slider.settings.maxslides": 1,
                "// if auto is true, start the show if (slider.settings.auto && slider.settings.autostart) initauto()": 1,
                "// if touchenabled is true, setup the touch events if (slider.settings.touchenabled && !slider.settings.ticker) inittouch()": 1,
                "// if mode is not \"vertical\" and adaptiveheight is false, include all children if(slider.settings.mode != 'vertical' && !slider.settings.adaptiveheight){ children = slider.children": 1,
                "i <= slider.settings.maxslides - 1": 1,
                "i++){ // if looped back to the start if(currentindex + i>= slider.children.length){ children = children.add(slider.children.eq(i - 1))": 1,
                "// if slide width was not supplied, or is larger than the viewport use the viewport width if(slider.settings.slidewidth == 0 || (slider.settings.slidewidth > wrapwidth && !slider.carousel) || slider.settings.mode == 'vertical'){ newelwidth = wrapwidth": 1,
                "// if carousel, use the thresholds to determine the width }else if(slider.settings.maxslides > 1 && slider.settings.mode == 'horizontal'){ if(wrapwidth > slider.maxthreshold){ // newelwidth = (wrapwidth - (slider.settings.slidemargin * (slider.settings.maxslides - 1))) / slider.settings.maxslides": 1,
                "}else if(wrapwidth <slider.minthreshold){ newelwidth=(wrapwidth - (slider.settings.slidemargin * (slider.settings.minslides - 1))) / slider.settings.minslides": 1,
                "} } return newelwidth": 1,
                "} /** * returns the number of slides currently visible in the viewport (includes partially visible slides) */ var getnumberslidesshowing=function(){ var slidesshowing=1": 1,
                "if(slider.settings.mode== 'horizontal' && slider.settings.slidewidth>0){ // if viewport is smaller than minthreshold, return minslides if(slider.viewport.width() <slider.minthreshold){ slidesshowing=slider.settings.minslides": 1,
                "// if viewport is larger than minthreshold, return maxslides }else if(slider.viewport.width()>slider.maxthreshold){ slidesshowing = slider.settings.maxslides": 1,
                "var counter = 0 // when breakpoint goes above children length, counter is the number of pages while (breakpoint <slider.children.length){ ++pagerqty": 1,
                "breakpoint=counter + getnumberslidesshowing()": 1,
                "counter +=slider.settings.moveslides <=getnumberslidesshowing() ? slider.settings.moveslides : getnumberslidesshowing()": 1,
                "} } // if moveslides is 0 (auto) divide children length by sides showing, then round up }else{ pagerqty=math.ceil(slider.children.length / getnumberslidesshowing())": 1,
                "} return pagerqty": 1,
                "} /** * returns the number of indivual slides by which to shift the slider */ var getmoveby=function(){ // if moveslides was set by the user and moveslides is less than number of slides showing if(slider.settings.moveslides>0 && slider.settings.moveslides <= getnumberslidesshowing()){ return slider.settings.moveslides": 1,
                "} // if moveslides is 0 (auto) return getnumberslidesshowing()": 1,
                "} /** * sets the slider's (el) left or top position */ var setslideposition=function(){ // if last slide, not infinite loop, and number of children is larger than specified maxslides if(slider.children.length>slider.settings.maxslides && slider.active.last && !slider.settings.infiniteloop){ if (slider.settings.mode == 'horizontal'){ // get the last child's position var lastchild = slider.children.last()": 1,
                "i <pagerqty": 1,
                "i++){ var linkcontent=\"\"": 1,
                "// if a buildpager function is supplied, use it to get pager link value, else use index + 1 if(slider.settings.buildpager && $.isfunction(slider.settings.buildpager)){ linkcontent=slider.settings.buildpager(i)": 1,
                "slider.pagerel.addclass('bx-custom-pager')": 1,
                "}else{ linkcontent=i + 1": 1,
                "slider.pagerel.addclass('bx-default-pager')": 1,
                "} // var linkcontent=slider.settings.buildpager && $.isfunction(slider.settings.buildpager) ? slider.settings.buildpager(i) : i + 1": 1,
                "// add the markup to the string pagerhtml +=\"<div class=\"bx-pager-item\">": 1,
                "<a href=\"\" data-slide-index=\"\" + i + '\" class=\"bx-pager-link\">' + linkcontent + '</a>": 1,
                "} /** * appends the pager to the controls element */ var appendpager = function(){ if(!slider.settings.pagercustom){ // create the pager dom element slider.pagerel = $('<div class=\"bx-pager\" />')": 1,
                "} /** * appends prev / next controls to the controls element */ var appendcontrols = function(){ slider.controls.next = $('<a class=\"bx-next\" href=\"\">' + slider.settings.nexttext + '</a>')": 1,
                "slider.controls.prev = $('<a class=\"bx-prev\" href=\"\">' + slider.settings.prevtext + '</a>')": 1,
                "} // if no custom selectors were supplied if(!slider.settings.nextselector && !slider.settings.prevselector){ // add the controls to the dom slider.controls.directionel = $('<div class=\"bx-controls-direction\" />')": 1,
                "} } /** * appends start / stop auto controls to the controls element */ var appendcontrolsauto = function(){ slider.controls.start = $('<div class=\"bx-controls-auto-item\">": 1,
                "<a class=\"bx-start\" href=\"\">' + slider.settings.starttext + '</a>": 1,
                "<a class=\"bx-stop\" href=\"\">' + slider.settings.stoptext + '</a>": 1,
                "// add the controls to the dom slider.controls.autoel = $('<div class=\"bx-controls-auto\" />')": 1,
                "// append the caption if (title != undefined && ('' + title).length) { $(this).append('<div class=\"bx-caption\">": 1,
                "// carousel, last slide }else if(slider.active.index == getpagerqty() - 1 && slider.carousel){ position = slider.children.eq((getpagerqty() - 1) * getmoveby()).position()": 1,
                "}else if(!slider.settings.infiniteloop && slider.settings.hidecontrolonend){ // if first slide if (slider.active.index == 0){ slider.controls.prev.addclass('disabled')": 1,
                "// if autohover is requested if(slider.settings.tickerhover && !slider.usingcss){ // on el hover slider.viewport.hover(function(){ el.stop()": 1,
                "// x axis swipe if((xmovement * 3) > ymovement && slider.settings.preventdefaultswipex){ e.preventdefault()": 1,
                "// y axis swipe }else if((ymovement * 3) > xmovement && slider.settings.preventdefaultswipey){ e.preventdefault()": 1,
                "} if(slider.settings.mode != 'fade' && slider.settings.onetoonetouch){ var value = 0": 1,
                "} // if not infinite loop and first / last slide, do not attempt a slide transition if(!slider.settings.infiniteloop && ((slider.active.index == 0 && distance > 0) || (slider.active.last && distance <0))){ setpositionproperty(value, 'reset', 200)": 1,
                "}else{ // check if distance clears threshold if(math.abs(distance)>= slider.settings.swipethreshold){ distance <0 ? el.gotonextslide() : el.gotoprevslide()": 1,
                "}else{ // el.animate(property, 200)": 1,
                "setpositionproperty(value, 'reset', 200)": 1,
                "} } } slider.viewport.unbind('touchend', ontouchend)": 1,
                "} /** * window resize event callback */ var resizewindow=function(e){ // get the new window dimens (again, thank you ie) var windowwidthnew=$(window).width()": 1,
                "var windowheightnew=$(window).height()": 1,
                "// make sure that it is a true window resize // *we must check this because our dinosaur friend ie fires a window resize event when certain dom elements // are resized. can you just die already?* if(windowwidth !=windowwidthnew || windowheight !=windowheightnew){ // set the new window dimens windowwidth=windowwidthnew": 1,
                "windowheight=windowheightnew": 1,
                "// update all dynamic elements el.redrawslider()": 1,
                "} } /** *=================================================================================== *=public functions *=================================================================================== */ /** * performs slide transition to the specified slide * * @param slideindex (int) * - the destination slide's index (zero-based) * * @param direction (string) * - internal use only - the direction of travel (\"prev\" / \"next\") */ el.gotoslide=function(slideindex, direction){ // if plugin is currently in motion, ignore request if(slider.working || slider.active.index== slideindex) return": 1,
                "// declare that plugin is in motion slider.working=true": 1,
                "// store the old index slider.oldindex=slider.active.index": 1,
                "// if slideindex is less than zero, set active index to last child (this happens during infinite loop) if(slideindex < 0){ slider.active.index=getpagerqty() - 1": 1,
                "// if slideindex is greater than children length, set active index to 0 (this happens during infinite loop) }else if(slideindex>= getpagerqty()){ slider.active.index = 0": 1,
                "// if slider is set to mode: \"fade\" if(slider.settings.mode == 'fade'){ // if adaptiveheight is true and next height is different from current height, animate to the new height if(slider.settings.adaptiveheight && slider.viewport.height() != getviewportheight()){ slider.viewport.animate({height: getviewportheight()}, slider.settings.adaptiveheightspeed)": 1,
                "// slider mode is not \"fade\" }else{ // if adaptiveheight is true and next height is different from current height, animate to the new height if(slider.settings.adaptiveheight && slider.viewport.height() != getviewportheight()){ slider.viewport.animate({height: getviewportheight()}, slider.settings.adaptiveheightspeed)": 1,
                "// if carousel and not infinite loop if(!slider.settings.infiniteloop && slider.carousel && slider.active.last){ if(slider.settings.mode == 'horizontal'){ // get the last child position var lastchild = slider.children.eq(slider.children.length - 1)": 1,
                "} // horizontal carousel, going previous while on first slide (infiniteloop mode) }else if(slider.carousel && slider.active.last && direction == 'prev'){ // get the last child position var eq = slider.settings.moveslides == 1 ? slider.settings.maxslides - getmoveby() : ((getpagerqty() - 1) * getmoveby()) - (slider.children.length - slider.settings.maxslides)": 1,
                "// if infinite loop and \"next\" is clicked on the last slide }else if(direction == 'next' && slider.active.index == 0){ // get the last clone position position = el.find('> .bx-clone').eq(slider.settings.maxslides).position()": 1,
                "} } } /** * transitions to the next slide in the show */ el.gotonextslide = function(){ // if infiniteloop is false and last page is showing, disregard call if (!slider.settings.infiniteloop && slider.active.last) return": 1,
                "} /** * transitions to the prev slide in the show */ el.gotoprevslide = function(){ // if infiniteloop is false and last page is showing, disregard call if (!slider.settings.infiniteloop && slider.active.index == 0) return": 1,
                "// if auto controls are displayed and preventcontrolupdate is not true if (slider.settings.autocontrols && preventcontrolupdate != true) updateautocontrols('stop')": 1,
                "// if auto controls are displayed and preventcontrolupdate is not true if (slider.settings.autocontrols && preventcontrolupdate != true) updateautocontrols('start')": 1,
                "// if a pager is being displayed and a custom pager is not being used, update it if(slider.settings.pager && !slider.settings.pagercustom){ populatepager()": 1,
                "special: slider.settings.randomstart": 1,
                "special: math.random": 1,
                "special: slider.settings.buildpager": 6,
                "special: slider.pagerel.addclass": 2
            }
        },
        {
            "plugin": "extractors.meta",
            "version": "0.1",
            "results": {
                "clamav: Cannot dlopen libclamunrar_iface: file not found - unrar support unavailable": 1,
                "clamav: cli_loadftm: File type signature for Microsoft Windows Shortcut File not loaded (required f-level: 1??)": 1,
                "clamav: [Bytecode JIT]; emitted ELF64-x86-64 <in-memory object> of 7?? bytes": 1,
                "clamav: bytecode self test running": 1,
                "clamav: Bytecode 4?????????: executing in JIT mode": 1,
                "clamav: bytecode finished in 1 us": 1,
                "clamav: bytecode self test succeeded": 1,
                "clamav: [Bytecode JIT]; emitted ELF64-x86-64 <in-memory object> of 1????? bytes": 1,
                "clamav: Bytecode: 94 bytecode prepared with JIT": 1,
                "clamav: Recognized ASCII text": 1,
                "clamav: Matched signature for file type HTML data": 1,
                "clamav: in cli_scanhtml()": 1,
                "clamav: cli_pcre_match: pcre_exec: match limit exceeded": 2,
                "clamav: cli_pcre_report: error occurred in pcre_match: -8": 2,
                "clamav: cli_magic_scandesc: returning 0  at line 2???": 1,
                "clamav: malware family: OK": 1,
                "clamav: OK": 1,
                "clamav: Scanned files: 1": 1,
                "clamav: Infected files: 0": 1,
                "clamav: extracted blobs": 1,
                "clamav: extracted 1 blobs": 1,
                "clamav: blob size: 4???": 1,
                "clamav: Cannot dlopen libclamunrar_iface: file not found - unrar support unavailable;clamav: cli_loadftm: File type signature for Microsoft Windows Shortcut File not loaded (required f-level: 1??)": 1,
                "clamav: cli_loadftm: File type signature for Microsoft Windows Shortcut File not loaded (required f-level: 1??);clamav: [Bytecode JIT]; emitted ELF64-x86-64 <in-memory object> of 7?? bytes": 1,
                "clamav: [Bytecode JIT]; emitted ELF64-x86-64 <in-memory object> of 7?? bytes;clamav: bytecode self test running": 1,
                "clamav: bytecode self test running;clamav: Bytecode 4?????????: executing in JIT mode": 1,
                "clamav: Bytecode 4?????????: executing in JIT mode;clamav: bytecode finished in 1 us": 1,
                "clamav: bytecode finished in 1 us;clamav: bytecode self test succeeded": 1,
                "clamav: bytecode self test succeeded;clamav: [Bytecode JIT]; emitted ELF64-x86-64 <in-memory object> of 1????? bytes": 1,
                "clamav: [Bytecode JIT]; emitted ELF64-x86-64 <in-memory object> of 1????? bytes;clamav: Bytecode: 94 bytecode prepared with JIT": 1,
                "clamav: Bytecode: 94 bytecode prepared with JIT;clamav: Recognized ASCII text": 1,
                "clamav: Recognized ASCII text;clamav: Matched signature for file type HTML data": 1,
                "clamav: Matched signature for file type HTML data;clamav: in cli_scanhtml()": 1,
                "clamav: in cli_scanhtml();clamav: cli_pcre_match: pcre_exec: match limit exceeded": 1,
                "clamav: cli_pcre_match: pcre_exec: match limit exceeded;clamav: cli_pcre_report: error occurred in pcre_match: -8": 1,
                "clamav: cli_pcre_report: error occurred in pcre_match: -8;clamav: cli_magic_scandesc: returning 0  at line 2???": 1,
                "clamav: cli_magic_scandesc: returning 0  at line 2???;clamav: malware family: OK": 1,
                "clamav: malware family: OK;clamav: OK": 1,
                "clamav: OK;clamav: Scanned files: 1": 1,
                "clamav: Scanned files: 1;clamav: Infected files: 0": 1,
                "clamav: Infected files: 0;clamav: extracted blobs": 1,
                "clamav: extracted blobs;clamav: extracted 1 blobs": 1,
                "clamav: extracted 1 blobs;clamav: blob size: 4???": 1,
                "File type: ASCII text": 1,
                "File type segment: ASCII text": 1,
                "File type word: ASCII": 1,
                "File type word: text": 1,
                "Extracted blob: ASCII text, with very long lines, with no line terminators": 2,
                "blob file types: ASCII": 1
            }
        }
    ]
}