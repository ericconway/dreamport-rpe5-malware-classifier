{
    "filepath": "/home/chris/data/rpe005/malware_samples_exercise/20190522_110020_rpe005_malware_alert/selectBox[1].js",
    "fileinfo": {
        "labels": {
            "family": "bad_sample_6",
            "software": "test_file"
        },
        "md5": "cc197c7051a5d1afb6d8039089474d55",
        "type": "ASCII text",
        "clamav": "OK",
        "blobs": "Extracted 1 blobs (1 ASCII)"
    },
    "plugins": [
        {
            "plugin": "extractors.disassembly",
            "version": "0.1",
            "results": {}
        },
        {
            "plugin": "extractors.strings",
            "version": "0.1",
            "results": {
                "* jQuery selectBox - A cosmetic, styleable replacement for SELECT elements": 1,
                "* Licensed under the MIT license: http://opensource.org/licenses/MIT": 1,
                "* v1.2.0": 1,
                "* https://github.com/marcj/jquery-selectBox": 1,
                "(function ($) {": 1,
                "* SelectBox class.": 1,
                "* @param {HTMLElement|jQuery} select If it's a jQuery object, we use the first element.": 1,
                "* @param {Object}             options": 1,
                "* @constructor": 1,
                "var SelectBox = this.SelectBox = function (select, options) {": 1,
                "if (select instanceof jQuery) {": 1,
                "if (select.length > 0) {": 1,
                "select = select[0]": 1,
                "} else {": 20,
                "return": 20,
                "this.typeTimer     = null": 1,
                "this.typeSearch    = ''": 1,
                "this.isMac         = navigator.platform.match(/mac/i)": 1,
                "options            = 'object' === typeof options ? options :  {}": 1,
                "this.selectElement = select": 1,
                "// Disable for iOS devices (their native controls are more suitable for a touch device)": 1,
                "if (!options.mobile && navigator.userAgent.match(/iPad|iPhone|Android|IEMobile|BlackBerry/i)) {": 1,
                "return false": 10,
                "// Element must be a select control": 1,
                "if ('select' !== select.tagName.toLowerCase()) {": 1,
                "this.init(options)": 1,
                "* @type {String}": 1,
                "SelectBox.prototype.version = '1.2.0'": 1,
                "* @param {Object} options": 1,
                "* @returns {Boolean}": 2,
                "SelectBox.prototype.init = function (options) {": 1,
                "var select = $(this.selectElement)": 15,
                "if (select.data('selectBox-control')) {": 1,
                "var control    = $('<a class=\"selectBox\" />')": 1,
                ", inline   = select.attr('multiple') || parseInt(select.attr('size')) > 1": 1,
                ", settings = options || {}": 1,
                ", tabIndex = parseInt(select.prop('tabindex')) || 0": 1,
                ", self     = this": 1,
                "control": 4,
                ".width(select.outerWidth())": 1,
                ".addClass(select.attr('class'))": 1,
                ".attr('title', select.attr('title') || '')": 1,
                ".attr('tabindex', tabIndex)": 1,
                ".css('display', 'inline-block')": 1,
                ".bind('focus.selectBox', function () {": 1,
                "if (this !== document.activeElement && document.body !== document.activeElement) {": 1,
                "$(document.activeElement).blur()": 1,
                "if (control.hasClass('selectBox-active')) {": 1,
                "control.addClass('selectBox-active')": 1,
                "select.trigger('focus')": 2,
                ".bind('blur.selectBox', function () {": 1,
                "if (!control.hasClass('selectBox-active')) {": 1,
                "control.removeClass('selectBox-active')": 1,
                "select.trigger('blur')": 2,
                "if (!$(window).data('selectBox-bindings')) {": 1,
                "$(window)": 1,
                ".data('selectBox-bindings', true)": 1,
                ".bind('scroll.selectBox', this.hideMenus)": 1,
                ".bind('resize.selectBox', this.hideMenus)": 1,
                "if (select.attr('disabled')) {": 1,
                "control.addClass('selectBox-disabled')": 2,
                "// Focus on control when label is clicked": 1,
                "select.bind('click.selectBox', function (event) {": 1,
                "control.focus()": 2,
                "event.preventDefault()": 9,
                "// Generate control": 1,
                "if (inline) {": 1,
                "// Inline controls": 1,
                "options = this.getOptions('inline')": 1,
                ".append(options)": 1,
                ".data('selectBox-options', options).addClass('selectBox-inline selectBox-menuShowing')": 1,
                ".bind('keydown.selectBox', function (event) {": 2,
                "self.handleKeyDown(event)": 2,
                ".bind('keypress.selectBox',function (event) {": 1,
                "self.handleKeyPress(event)": 2,
                ".bind('mousedown.selectBox',function (event) {": 2,
                "if (1 !== event.which) {": 4,
                "if ($(event.target).is('A.selectBox-inline')) {": 1,
                "if (!control.hasClass('selectBox-focus')) {": 1,
                ".insertAfter(select)": 2,
                "// Auto-height based on size attribute": 1,
                "if (!select[0].style.height) {": 1,
                "var size = select.attr('size') ? parseInt(select.attr('size')) : 5": 1,
                "// Draw a dummy control off-screen, measure, and remove it": 1,
                "var tmp = control": 1,
                ".clone()": 1,
                ".removeAttr('id')": 1,
                ".css({": 2,
                "position: 'absolute',": 1,
                "top: '-9999em'": 1,
                ".show()": 2,
                ".appendTo('body')": 1,
                "tmp.find('.selectBox-options').html('<li>": 1,
                "<a>\\u00A0</a>": 1,
                "</li>')": 2,
                "var optionHeight = parseInt(tmp.find('.selectBox-options A:first').html('&nbsp": 1,
                "').outerHeight())": 1,
                "tmp.remove()": 2,
                "control.height(optionHeight * size)": 1,
                "this.disableSelection(control)": 2,
                "// Dropdown controls": 1,
                "var label = $('<span class=\"selectBox-label\" />'),": 1,
                "arrow = $('<span class=\"selectBox-arrow\" />')": 1,
                "// Update label": 3,
                "label.attr('class', this.getLabelClass()).text(this.getLabelText())": 1,
                "options = this.getOptions('dropdown')": 1,
                "options.appendTo('BODY')": 1,
                ".data('selectBox-options', options)": 1,
                ".addClass('selectBox-dropdown')": 1,
                ".append(label)": 1,
                ".append(arrow)": 1,
                ".bind('mousedown.selectBox', function (event) {": 2,
                "if (1 === event.which) {": 2,
                "if (control.hasClass('selectBox-menuShowing')) {": 4,
                "self.hideMenus()": 6,
                "event.stopPropagation()": 1,
                "// Webkit fix to prevent premature selection of options": 1,
                "options": 4,
                ".data('selectBox-down-at-x', event.screenX)": 1,
                ".data('selectBox-down-at-y', event.screenY)": 1,
                "self.showMenu()": 2,
                ".bind('keypress.selectBox', function (event) {": 1,
                ".bind('open.selectBox',function (event, triggerData) {": 1,
                "if (triggerData && triggerData._selectBox === true) {": 2,
                ".bind('close.selectBox', function (event, triggerData) {": 1,
                "// Set label width": 1,
                "var labelWidth =": 1,
                "control.width()": 1,
                "- arrow.outerWidth()": 1,
                "- (parseInt(label.css('paddingLeft')) || 0)": 1,
                "- (parseInt(label.css('paddingRight')) || 0)": 1,
                "label.width(labelWidth)": 1,
                "// Store data for later use and show the control": 1,
                "select": 2,
                ".addClass('selectBox')": 1,
                ".data('selectBox-control', control)": 1,
                ".data('selectBox-settings', settings)": 1,
                ".hide()": 1,
                "* @param {String} type 'inline'|'dropdown'": 1,
                "* @returns {jQuery}": 1,
                "SelectBox.prototype.getOptions = function (type) {": 1,
                "var options": 1,
                "var self   = this": 1,
                "// Private function to handle recursion in the getOptions function.": 1,
                "var _getOptions = function (select, options) {": 1,
                "// Loop through the set in order of element children.": 1,
                "select.children('OPTION, OPTGROUP').each(function () {": 1,
                "// If the element is an option, add it to the list.": 1,
                "if ($(this).is('OPTION')) {": 1,
                "// Check for a value in the option found.": 1,
                "if ($(this).length > 0) {": 1,
                "// Create an option form the found element.": 1,
                "self.generateOptions($(this), options)": 1,
                "// No option information found, so add an empty.": 1,
                "options.append('<li>\\u00A0</li>')": 1,
                "// If the element is an option group, add the group and call this function on it.": 1,
                "var optgroup = $('<li class=\"selectBox-optgroup\" />')": 1,
                "optgroup.text($(this).attr('label'))": 2,
                "options.append(optgroup)": 2,
                "options = _getOptions($(this), options)": 1,
                "// Return the built strin": 1,
                "return options": 5,
                "switch (type) {": 2,
                "case 'inline':": 2,
                "options = $('<ul class=\"selectBox-options\" />')": 1,
                "options = _getOptions(select, options)": 2,
                ".find('A')": 2,
                ".bind('mouseover.selectBox', function (event) {": 2,
                "self.addHover($(this).parent())": 3,
                ".bind('mouseout.selectBox',function (event) {": 1,
                "self.removeHover($(this).parent())": 2,
                "// Prevent options from being \"dragged\"": 2,
                "if (!select.selectBox('control').hasClass('selectBox-active')) {": 1,
                "select.selectBox('control').focus()": 1,
                ".bind('mouseup.selectBox', function (event) {": 2,
                "self.selectOption($(this).parent(), event)": 2,
                "this.disableSelection(options)": 2,
                "case 'dropdown':": 2,
                "options = $('<ul class=\"selectBox-dropdown-menu selectBox-options\" />')": 1,
                ".data('selectBox-select', select)": 1,
                ".css('display', 'none')": 1,
                ".appendTo('BODY')": 1,
                "if (event.which === 1) {": 1,
                "if (event.screenX === options.data('selectBox-down-at-x') &&": 2,
                "event.screenY === options.data('selectBox-down-at-y')) {": 2,
                "options.removeData('selectBox-down-at-x').removeData('selectBox-down-at-y')": 2,
                "self.selectOption($(this).parent())": 1,
                ".bind('mouseout.selectBox', function (event) {": 1,
                "// Inherit classes for dropdown menu": 1,
                "var classes = select.attr('class') || ''": 1,
                "if ('' !== classes) {": 1,
                "classes = classes.split(' ')": 1,
                "for (var i in classes) {": 1,
                "options.addClass(classes[i] + '-selectBox-dropdown-menu')": 1,
                "* Returns the current class of the selected option.": 1,
                "* @returns {String}": 2,
                "SelectBox.prototype.getLabelClass = function () {": 1,
                "var selected = $(this.selectElement).find('OPTION:selected')": 2,
                "return ('selectBox-label ' + (selected.attr('class') || '')).replace(/\\s+$/, '')": 1,
                "* Returns the current label of the selected option.": 1,
                "SelectBox.prototype.getLabelText = function () {": 1,
                "return selected.text() || '\\u00A0'": 1,
                "* Sets the label.": 1,
                "* This method uses the getLabelClass() and getLabelText() methods.": 1,
                "SelectBox.prototype.setLabel = function () {": 1,
                "var control = select.data('selectBox-control')": 5,
                "if (!control) {": 5,
                ".find('.selectBox-label')": 1,
                ".attr('class', this.getLabelClass())": 1,
                ".text(this.getLabelText())": 1,
                "* Destroys the SelectBox instance and shows the origin select element.": 1,
                "SelectBox.prototype.destroy = function () {": 1,
                "var options = control.data('selectBox-options')": 1,
                "options.remove()": 2,
                "control.remove()": 2,
                ".removeClass('selectBox')": 1,
                ".removeData('selectBox-control')": 1,
                ".data('selectBox-control', null)": 1,
                ".removeData('selectBox-settings')": 1,
                ".data('selectBox-settings', null)": 1,
                "* Refreshes the option elements.": 1,
                "SelectBox.prototype.refresh = function () {": 1,
                ", control = select.data('selectBox-control')": 5,
                ", type = control.hasClass('selectBox-dropdown') ? 'dropdown' : 'inline'": 1,
                ", options": 1,
                "// Remove old options": 1,
                "control.data('selectBox-options').remove()": 1,
                "// Generate new options": 1,
                "options  = this.getOptions(type)": 1,
                "control.data('selectBox-options', options)": 1,
                "control.append(options)": 1,
                "this.setLabel()": 3,
                "$(\"BODY\").append(options)": 1,
                "// Restore opened dropdown state (original menu was trashed)": 1,
                "if ('dropdown' === type && control.hasClass('selectBox-menuShowing')) {": 1,
                "this.showMenu()": 5,
                "* Shows the dropdown menu.": 1,
                "SelectBox.prototype.showMenu = function () {": 1,
                "var self = this": 2,
                ", select   = $(this.selectElement)": 1,
                ", control  = select.data('selectBox-control')": 1,
                ", settings = select.data('selectBox-settings')": 3,
                ", options  = control.data('selectBox-options')": 1,
                "if (control.hasClass('selectBox-disabled')) {": 4,
                "this.hideMenus()": 3,
                "var borderBottomWidth = parseInt(control.css('borderBottomWidth')) || 0": 1,
                "// Menu position": 1,
                ".width(control.innerWidth())": 1,
                "top: control.offset().top + control.outerHeight() - borderBottomWidth,": 1,
                "left: control.offset().left": 1,
                "if (select.triggerHandler('beforeopen')) {": 1,
                "var dispatchOpenEvent = function () {": 1,
                "select.triggerHandler('open', {": 1,
                "_selectBox: true": 3,
                "// Show menu": 1,
                "switch (settings.menuTransition) {": 2,
                "case 'fade':": 2,
                "options.fadeIn(settings.menuSpeed, dispatchOpenEvent)": 1,
                "case 'slide':": 2,
                "options.slideDown(settings.menuSpeed, dispatchOpenEvent)": 1,
                "default:": 4,
                "options.show(settings.menuSpeed, dispatchOpenEvent)": 1,
                "if (!settings.menuSpeed) {": 2,
                "dispatchOpenEvent()": 1,
                "// Center on selected option": 1,
                "var li = options.find('.selectBox-selected:first')": 1,
                "this.keepOptionInView(li, true)": 1,
                "this.addHover(li)": 1,
                "control.addClass('selectBox-menuShowing')": 1,
                "$(document).bind('mousedown.selectBox', function (event) {": 1,
                "if ($(event.target).parents().andSelf().hasClass('selectBox-options')) {": 1,
                "* Hides the menu of all instances.": 1,
                "SelectBox.prototype.hideMenus = function () {": 1,
                "if ($(\".selectBox-dropdown-menu:visible\").length === 0) {": 1,
                "$(document).unbind('mousedown.selectBox')": 1,
                "$(\".selectBox-dropdown-menu\").each(function () {": 1,
                "var options = $(this)": 1,
                ", select = options.data('selectBox-select')": 1,
                "if (select.triggerHandler('beforeclose')) {": 1,
                "var dispatchCloseEvent = function () {": 1,
                "select.triggerHandler('close', {": 1,
                "if (settings) {": 1,
                "options.fadeOut(settings.menuSpeed, dispatchCloseEvent)": 1,
                "options.slideUp(settings.menuSpeed, dispatchCloseEvent)": 1,
                "options.hide(settings.menuSpeed, dispatchCloseEvent)": 1,
                "dispatchCloseEvent()": 1,
                "control.removeClass('selectBox-menuShowing')": 1,
                "$(this).hide()": 1,
                "$(this).triggerHandler('close', {": 1,
                "$(this).removeClass('selectBox-menuShowing')": 1,
                "* Selects an option.": 1,
                "* @param {HTMLElement} li": 3,
                "* @param {DOMEvent}    event": 3,
                "SelectBox.prototype.selectOption = function (li, event) {": 1,
                "li         = $(li)": 1,
                "var control    = select.data('selectBox-control')": 1,
                "if (0 === li.length || li.hasClass('selectBox-disabled')) {": 1,
                "if (select.attr('multiple')) {": 2,
                "// If event.shiftKey is true, this will select all options between li and the last li selected": 1,
                "if (event.shiftKey && control.data('selectBox-last-selected')) {": 1,
                "li.toggleClass('selectBox-selected')": 2,
                "var affectedOptions": 1,
                "if (li.index() > control.data('selectBox-last-selected').index()) {": 1,
                "affectedOptions = li": 2,
                ".siblings()": 2,
                ".slice(control.data('selectBox-last-selected').index(), li.index())": 1,
                ".slice(li.index(), control.data('selectBox-last-selected').index())": 1,
                "affectedOptions = affectedOptions.not('.selectBox-optgroup, .selectBox-disabled')": 1,
                "if (li.hasClass('selectBox-selected')) {": 1,
                "affectedOptions.addClass('selectBox-selected')": 1,
                "affectedOptions.removeClass('selectBox-selected')": 1,
                "} else if ((this.isMac && event.metaKey) || (!this.isMac && event.ctrlKey)) {": 1,
                "li.siblings().removeClass('selectBox-selected')": 2,
                "li.addClass('selectBox-selected')": 3,
                "if (control.hasClass('selectBox-dropdown')) {": 2,
                "control.find('.selectBox-label').text(li.text())": 1,
                "// Update original control's value": 1,
                "var i = 0, selection = []": 1,
                "control.find('.selectBox-selected A').each(function () {": 1,
                "selection[i++] = $(this).attr('rel')": 1,
                "selection = li.find('A').attr('rel')": 1,
                "// Remember most recently selected item": 1,
                "control.data('selectBox-last-selected', li)": 1,
                "// Change callback": 1,
                "if (select.val() !== selection) {": 1,
                "select.val(selection)": 1,
                "select.trigger('change')": 2,
                "return true": 1,
                "* Adds the hover class.": 1,
                "SelectBox.prototype.addHover = function (li) {": 1,
                "li = $(li)": 3,
                ", control   = select.data('selectBox-control')": 1,
                ", options = control.data('selectBox-options')": 4,
                "options.find('.selectBox-hover').removeClass('selectBox-hover')": 2,
                "li.addClass('selectBox-hover')": 1,
                "* Returns the original HTML select element.": 1,
                "* @returns {HTMLElement}": 1,
                "SelectBox.prototype.getSelectElement = function () {": 1,
                "return this.selectElement": 1,
                "* Remove the hover class.": 1,
                "SelectBox.prototype.removeHover = function (li) {": 1,
                "* Checks if the widget is in the view.": 1,
                "* @param {jQuery}      li": 1,
                "* @param {Boolean}     center": 1,
                "SelectBox.prototype.keepOptionInView = function (li, center) {": 1,
                "if (!li || li.length === 0) {": 1,
                ", control     = select.data('selectBox-control')": 1,
                ", options   = control.data('selectBox-options')": 1,
                ", scrollBox = control.hasClass('selectBox-dropdown') ? options : options.parent()": 1,
                ", top       = parseInt(li.offset().top -scrollBox.position().top)": 1,
                ", bottom    = parseInt(top + li.outerHeight())": 1,
                "if (center) {": 1,
                "scrollBox.scrollTop(li.offset().top - scrollBox.offset().top + scrollBox.scrollTop() -": 1,
                "(scrollBox.height() / 2))": 1,
                "if (top < 0) {": 1,
                "scrollBox.scrollTop(li.offset().top - scrollBox.offset().top + scrollBox.scrollTop())": 1,
                "if (bottom > scrollBox.height()) {": 1,
                "scrollBox.scrollTop((li.offset().top + li.outerHeight()) - scrollBox.offset().top +": 1,
                "scrollBox.scrollTop() - scrollBox.height())": 1,
                "* Handles the keyDown event.": 1,
                "* Handles open/close and arrow key functionality": 1,
                "SelectBox.prototype.handleKeyDown = function (event) {": 1,
                ", control        = select.data('selectBox-control')": 1,
                ", options      = control.data('selectBox-options')": 1,
                ", settings     = select.data('selectBox-settings')": 1,
                ", totalOptions = 0, i = 0": 1,
                "switch (event.keyCode) {": 2,
                "case 8:": 1,
                "// backspace": 1,
                "this.typeSearch = ''": 1,
                "case 9:": 2,
                "// tab": 2,
                "case 27:": 2,
                "// esc": 2,
                "this.removeHover()": 1,
                "case 13:": 2,
                "// enter": 2,
                "this.selectOption(options.find('LI.selectBox-hover:first'), event)": 1,
                "case 38:": 2,
                "case 37:": 2,
                "// left": 2,
                "var prev = options.find('.selectBox-hover').prev('LI')": 1,
                "totalOptions = options.find('LI:not(.selectBox-optgroup)').length": 2,
                "while (prev.length === 0 || prev.hasClass('selectBox-disabled') ||": 1,
                "prev.hasClass('selectBox-optgroup')) {": 1,
                "prev = prev.prev('LI')": 1,
                "if (prev.length === 0) {": 1,
                "if (settings.loopOptions) {": 2,
                "prev = options.find('LI:last')": 1,
                "prev = options.find('LI:first')": 1,
                "if (++i >= totalOptions) {": 2,
                "this.addHover(prev)": 1,
                "this.selectOption(prev, event)": 1,
                "this.keepOptionInView(prev)": 1,
                "case 40:": 2,
                "// down": 2,
                "case 39:": 2,
                "// right": 2,
                "var next = options.find('.selectBox-hover').next('LI')": 1,
                "while (0 === next.length || next.hasClass('selectBox-disabled') ||": 1,
                "next.hasClass('selectBox-optgroup')) {": 1,
                "next = next.next('LI')": 1,
                "if (next.length === 0) {": 1,
                "next = options.find('LI:first')": 1,
                "next = options.find('LI:last')": 1,
                "this.addHover(next)": 1,
                "this.selectOption(next, event)": 1,
                "this.keepOptionInView(next)": 1,
                "* Handles the keyPress event.": 1,
                "* Handles type-to-find functionality": 1,
                "SelectBox.prototype.handleKeyPress = function (event) {": 1,
                ", self    = this": 1,
                "// Don't interfere with the keydown event!": 1,
                "// Type to find": 1,
                "if (!control.hasClass('selectBox-menuShowing')) {": 1,
                "clearTimeout(this.typeTimer)": 1,
                "this.typeSearch += String.fromCharCode(event.charCode || event.keyCode)": 1,
                "options.find('A').each(function () {": 2,
                "if ($(this).text().substr(0, self.typeSearch.length).toLowerCase() === self.typeSearch.toLowerCase()) {": 1,
                "self.keepOptionInView($(this).parent())": 1,
                "// Clear after a brief pause": 1,
                "this.typeTimer = setTimeout(function () {": 1,
                "self.typeSearch = ''": 1,
                "}, 1000)": 2,
                "* Enables the selectBox.": 1,
                "SelectBox.prototype.enable = function () {": 1,
                "select.prop('disabled', false)": 2,
                "control.removeClass('selectBox-disabled')": 1,
                "* Disables the selectBox.": 1,
                "SelectBox.prototype.disable = function () {": 1,
                "select.prop('disabled', true)": 2,
                "* Sets the current value.": 1,
                "* @param {String}      value": 1,
                "SelectBox.prototype.setValue = function (value) {": 1,
                "select.val(value)": 4,
                "value = select.val()": 2,
                "// IE9's select would be null if it was set with a non-exist options value": 1,
                "if (null === value) { // So check it here and set it with the first option's value if possible": 1,
                "value = select.children().first().val()": 1,
                "var settings = select.data('selectBox-settings')": 1,
                "// Update control values": 1,
                "options.find('.selectBox-selected').removeClass('selectBox-selected')": 1,
                "if (typeof(value) === 'object') {": 1,
                "for (var i = 0": 1,
                "i < value.length": 2,
                "i++) {": 1,
                "if ($(this).attr('rel') == value[i]) {": 1,
                "$(this).parent().addClass('selectBox-selected')": 2,
                "if ($(this).attr('rel') == value) {": 1,
                "if (settings.change) {": 1,
                "settings.change.call(select)": 1,
                "* Sets the option elements.": 1,
                "* @param {String|Object} options": 1,
                "SelectBox.prototype.setOptions = function (options) {": 1,
                "switch (typeof(options)) {": 1,
                "case 'string':": 1,
                "select.html(options)": 1,
                "case 'object':": 1,
                "select.html('')": 1,
                "for (var i in options) {": 1,
                "if (options[i] === null) {": 1,
                "continue": 1,
                "if (typeof(options[i]) === 'object') {": 1,
                "var optgroup = $('<optgroup label=\"' + i + '\" />')": 1,
                "for (var j in options[i]) {": 1,
                "optgroup.append('<option value=\"' + j + '\">' + options[i][j] + '</option>')": 1,
                "select.append(optgroup)": 1,
                "var option = $('<option value=\"' + i + '\">' + options[i] + '</option>')": 1,
                "select.append(option)": 2,
                "if (control) {": 1,
                "// Refresh the control": 1,
                "this.refresh()": 1,
                "* Disables the selection.": 1,
                "* @param {*} selector": 1,
                "SelectBox.prototype.disableSelection = function (selector) {": 1,
                "$(selector).css('MozUserSelect', 'none').bind('selectstart', function (event) {": 1,
                "* Generates the options.": 1,
                "* @param {jQuery} self": 1,
                "* @param {jQuery} options": 1,
                "SelectBox.prototype.generateOptions = function (self, options) {": 1,
                "var li = $('<li />'), a = $('<a />')": 1,
                "li.addClass(self.attr('class'))": 1,
                "li.data(self.data())": 2,
                "a.attr('rel', self.val()).text(self.text())": 2,
                "li.append(a)": 2,
                "if (self.attr('disabled')) {": 1,
                "li.addClass('selectBox-disabled')": 1,
                "if (self.attr('selected')) {": 1,
                "options.append(li)": 1,
                "* Extends the jQuery.fn object.": 1,
                "$.extend($.fn, {": 1,
                "selectBox: function (method, options) {": 1,
                "var selectBox": 1,
                "switch (method) {": 1,
                "case 'control':": 1,
                "return $(this).data('selectBox-control')": 1,
                "case 'settings':": 1,
                "if (!options) {": 1,
                "return $(this).data('selectBox-settings')": 1,
                "$(this).each(function () {": 7,
                "$(this).data('selectBox-settings', $.extend(true, $(this).data('selectBox-settings'), options))": 1,
                "case 'options':": 1,
                "// Getter": 1,
                "if (undefined === options) {": 2,
                "return $(this).data('selectBox-control').data('selectBox-options')": 1,
                "// Setter": 1,
                "if (selectBox = $(this).data('selectBox')) {": 6,
                "selectBox.setOptions(options)": 1,
                "case 'value':": 1,
                "// Empty string is a valid value": 1,
                "return $(this).val()": 1,
                "selectBox.setValue(options)": 1,
                "case 'refresh':": 1,
                "selectBox.refresh()": 1,
                "case 'enable':": 1,
                "selectBox.enable(this)": 1,
                "case 'disable':": 1,
                "selectBox.disable()": 1,
                "case 'destroy':": 1,
                "selectBox.destroy()": 1,
                "$(this).data('selectBox', null)": 1,
                "case 'instance':": 1,
                "return $(this).data('selectBox')": 1,
                "$(this).each(function (idx, select) {": 1,
                "if (!$(select).data('selectBox')) {": 1,
                "$(select).data('selectBox', new SelectBox(select, method))": 1,
                "return $(this)": 1,
                "})(jQuery)": 1,
                "word: jquery": 22,
                "word: selectbox": 464,
                "word: cosmetic": 2,
                "word: styleable": 2,
                "word: replacement": 2,
                "word: select": 208,
                "word: elements": 6,
                "word: licensed": 2,
                "word: license": 2,
                "word: opensource": 2,
                "word: licenses": 2,
                "word: github": 2,
                "word: function": 132,
                "word: htmlelement": 10,
                "word: object": 18,
                "word: element": 16,
                "word: options": 262,
                "word: constructor": 2,
                "word: instanceof": 2,
                "word: length": 26,
                "word: return": 86,
                "word: typetimer": 6,
                "word: typesearch": 12,
                "word: navigator": 4,
                "word: platform": 2,
                "word: typeof": 8,
                "word: selectelement": 40,
                "word: disable": 8,
                "word: devices": 2,
                "word: native": 2,
                "word: controls": 6,
                "word: suitable": 2,
                "word: device": 2,
                "word: mobile": 2,
                "word: useragent": 2,
                "word: iphone": 2,
                "word: android": 2,
                "word: iemobile": 2,
                "word: blackberry": 2,
                "word: control": 228,
                "word: tagname": 2,
                "word: tolowercase": 6,
                "word: string": 18,
                "word: prototype": 46,
                "word: version": 2,
                "word: returns": 18,
                "word: boolean": 6,
                "word: inline": 22,
                "word: multiple": 6,
                "word: parseint": 18,
                "word: settings": 68,
                "word: tabindex": 8,
                "word: outerwidth": 4,
                "word: addclass": 36,
                "word: display": 4,
                "word: document": 12,
                "word: activeelement": 6,
                "word: hasclass": 50,
                "word: active": 10,
                "word: trigger": 6,
                "word: removeclass": 22,
                "word: window": 4,
                "word: bindings": 4,
                "word: scroll": 2,
                "word: hidemenus": 24,
                "word: resize": 2,
                "word: disabled": 32,
                "word: clicked": 2,
                "word: preventdefault": 18,
                "word: generate": 4,
                "word: getoptions": 18,
                "word: append": 24,
                "word: menushowing": 20,
                "word: keydown": 8,
                "word: handlekeydown": 6,
                "word: keypress": 6,
                "word: handlekeypress": 6,
                "word: mousedown": 12,
                "word: target": 4,
                "word: insertafter": 4,
                "word: height": 12,
                "word: attribute": 2,
                "word: screen": 2,
                "word: measure": 2,
                "word: remove": 14,
                "word: removeattr": 2,
                "word: position": 6,
                "word: absolute": 2,
                "word: appendto": 6,
                "word: optionheight": 4,
                "word: outerheight": 8,
                "word: disableselection": 10,
                "word: dropdown": 38,
                "word: update": 10,
                "word: getlabelclass": 8,
                "word: getlabeltext": 8,
                "word: stoppropagation": 2,
                "word: webkit": 2,
                "word: prevent": 6,
                "word: premature": 2,
                "word: selection": 14,
                "word: screenx": 6,
                "word: screeny": 6,
                "word: showmenu": 16,
                "word: triggerdata": 12,
                "word: labelwidth": 4,
                "word: paddingleft": 2,
                "word: paddingright": 2,
                "word: private": 2,
                "word: handle": 2,
                "word: recursion": 2,
                "word: through": 2,
                "word: children": 6,
                "word: option": 44,
                "word: optgroup": 28,
                "word: create": 2,
                "word: generateoptions": 4,
                "word: information": 2,
                "word: switch": 16,
                "word: mouseover": 4,
                "word: addhover": 14,
                "word: parent": 24,
                "word: mouseout": 4,
                "word: removehover": 8,
                "word: dragged": 4,
                "word: mouseup": 4,
                "word: selectoption": 14,
                "word: removedata": 12,
                "word: inherit": 2,
                "word: classes": 14,
                "word: current": 6,
                "word: selected": 66,
                "word: replace": 2,
                "word: method": 8,
                "word: methods": 2,
                "word: setlabel": 8,
                "word: destroys": 2,
                "word: instance": 4,
                "word: origin": 2,
                "word: destroy": 6,
                "word: refreshes": 2,
                "word: refresh": 10,
                "word: restore": 2,
                "word: opened": 2,
                "word: original": 6,
                "word: trashed": 2,
                "word: borderbottomwidth": 6,
                "word: innerwidth": 2,
                "word: offset": 18,
                "word: triggerhandler": 10,
                "word: beforeopen": 2,
                "word: dispatchopenevent": 10,
                "word: menutransition": 4,
                "word: fadein": 2,
                "word: menuspeed": 16,
                "word: slidedown": 2,
                "word: default": 8,
                "word: center": 8,
                "word: keepoptioninview": 10,
                "word: parents": 2,
                "word: andself": 2,
                "word: instances": 2,
                "word: visible": 2,
                "word: unbind": 2,
                "word: beforeclose": 2,
                "word: dispatchcloseevent": 10,
                "word: fadeout": 2,
                "word: slideup": 2,
                "word: selects": 2,
                "word: domevent": 6,
                "word: shiftkey": 4,
                "word: between": 2,
                "word: toggleclass": 4,
                "word: affectedoptions": 14,
                "word: siblings": 8,
                "word: metakey": 2,
                "word: ctrlkey": 2,
                "word: remember": 2,
                "word: recently": 2,
                "word: change": 8,
                "word: callback": 2,
                "word: getselectelement": 2,
                "word: checks": 2,
                "word: widget": 2,
                "word: scrollbox": 28,
                "word: bottom": 4,
                "word: scrolltop": 12,
                "word: handles": 8,
                "word: functionality": 4,
                "word: totaloptions": 10,
                "word: keycode": 6,
                "word: backspace": 2,
                "word: loopoptions": 4,
                "word: interfere": 2,
                "word: cleartimeout": 2,
                "word: fromcharcode": 2,
                "word: charcode": 2,
                "word: substr": 2,
                "word: settimeout": 2,
                "word: enables": 2,
                "word: enable": 6,
                "word: disables": 4,
                "word: setvalue": 4,
                "word: possible": 2,
                "word: values": 2,
                "word: setoptions": 4,
                "word: continue": 2,
                "word: selector": 6,
                "word: mozuserselect": 2,
                "word: selectstart": 2,
                "word: generates": 2,
                "word: extends": 2,
                "word: extend": 4,
                "word: getter": 2,
                "word: undefined": 4,
                "word: setter": 2,
                "special: opensource.org": 2,
                "special: org/licenses/MIT": 1,
                "special: v1.2.0": 2,
                "special: github.com": 2,
                "special: com/marcj/jquery": 2,
                "special: jquery-selectBox": 1,
                "special: this.SelectBox": 1,
                "special: select.length": 2,
                "special: this.typeTimer": 3,
                "special: this.typeSearch": 3,
                "special: this.isMac": 3,
                "special: navigator.platform.match": 2,
                "special: mac/i": 2,
                "special: this.selectElement": 20,
                "special: options.mobile": 2,
                "special: navigator.userAgent.match": 1,
                "special: BlackBerry/i": 1,
                "special: select.tagName.toLowerCase": 1,
                "special: this.init": 2,
                "special: SelectBox.prototype.version": 1,
                "special: 1.2.0": 2,
                "special: SelectBox.prototype.init": 1,
                "special: select.data": 42,
                "special: selectBox-control": 21,
                "special: select.attr": 20,
                "special: select.prop": 6,
                "special: select.outerWidth": 1,
                "special: inline-block": 2,
                "special: focus.selectBox": 1,
                "special: document.activeElement": 3,
                "special: document.body": 2,
                "special: control.hasClass": 17,
                "special: selectBox-active": 5,
                "special: control.addClass": 4,
                "special: select.trigger": 6,
                "special: blur.selectBox": 1,
                "special: control.removeClass": 3,
                "special: selectBox-bindings": 2,
                "special: scroll.selectBox": 1,
                "special: this.hideMenus": 5,
                "special: resize.selectBox": 1,
                "special: selectBox-disabled": 12,
                "special: select.bind": 2,
                "special: click.selectBox": 1,
                "special: control.focus": 4,
                "special: event.preventDefault": 9,
                "special: this.getOptions": 3,
                "special: selectBox-options": 18,
                "special: selectBox-inline": 2,
                "special: selectBox-menuShowing": 10,
                "special: keydown.selectBox": 2,
                "special: self.handleKeyDown": 2,
                "special: keypress.selectBox": 2,
                "special: self.handleKeyPress": 2,
                "special: mousedown.selectBox": 6,
                "special: event.which": 14,
                "special: event.target": 4,
                "special: A.selectBox": 1,
                "special: selectBox-focus": 1,
                "special: Auto-height": 1,
                "special: style.height": 2,
                "special: off-screen": 2,
                "special: tmp.find": 4,
                "special: A:first": 1,
                "special: tmp.remove": 2,
                "special: control.height": 2,
                "special: this.disableSelection": 4,
                "special: selectBox-label": 4,
                "special: selectBox-arrow": 1,
                "special: label.attr": 2,
                "special: this.getLabelClass": 2,
                "special: this.getLabelText": 2,
                "special: options.appendTo": 1,
                "special: selectBox-dropdown": 5,
                "special: self.hideMenus": 6,
                "special: event.stopPropagation": 1,
                "special: event.screenX": 3,
                "special: selectBox-down-at-x": 5,
                "special: event.screenY": 3,
                "special: selectBox-down-at-y": 5,
                "special: self.showMenu": 2,
                "special: open.selectBox": 1,
                "special: close.selectBox": 1,
                "special: control.width": 2,
                "special: arrow.outerWidth": 1,
                "special: label.css": 4,
                "special: label.width": 2,
                "special: selectBox-settings": 11,
                "special: SelectBox.prototype.getOptions": 1,
                "special: select.children": 4,
                "special: self.generateOptions": 1,
                "special: options.append": 6,
                "special: selectBox-optgroup": 6,
                "special: optgroup.text": 2,
                "special: mouseover.selectBox": 2,
                "special: self.addHover": 3,
                "special: mouseout.selectBox": 2,
                "special: self.removeHover": 2,
                "special: select.selectBox": 2,
                "special: mouseup.selectBox": 2,
                "special: self.selectOption": 3,
                "special: selectBox-dropdown-menu": 4,
                "special: selectBox-select": 2,
                "special: options.data": 10,
                "special: options.removeData": 2,
                "special: classes.split": 2,
                "special: options.addClass": 1,
                "special: SelectBox.prototype.getLabelClass": 1,
                "special: OPTION:selected": 2,
                "special: selected.attr": 2,
                "special: SelectBox.prototype.getLabelText": 1,
                "special: selected.text": 2,
                "special: SelectBox.prototype.setLabel": 1,
                "special: SelectBox.prototype.destroy": 1,
                "special: control.data": 30,
                "special: options.remove": 2,
                "special: control.remove": 2,
                "special: SelectBox.prototype.refresh": 1,
                "special: control.append": 2,
                "special: this.setLabel": 3,
                "special: this.showMenu": 5,
                "special: SelectBox.prototype.showMenu": 1,
                "special: control.css": 2,
                "special: control.innerWidth": 1,
                "special: control.offset": 4,
                "special: control.outerHeight": 1,
                "special: select.triggerHandler": 4,
                "special: settings.menuTransition": 2,
                "special: options.fadeIn": 1,
                "special: settings.menuSpeed": 8,
                "special: options.slideDown": 1,
                "special: options.show": 2,
                "special: options.find": 30,
                "special: selectBox-selected": 16,
                "special: selected:first": 2,
                "special: this.keepOptionInView": 3,
                "special: this.addHover": 3,
                "special: SelectBox.prototype.hideMenus": 1,
                "special: menu:visible": 2,
                "special: options.fadeOut": 1,
                "special: options.slideUp": 1,
                "special: options.hide": 2,
                "special: SelectBox.prototype.selectOption": 1,
                "special: li.length": 4,
                "special: li.hasClass": 2,
                "special: event.shiftKey": 2,
                "special: selectBox-last-selected": 5,
                "special: li.toggleClass": 2,
                "special: li.index": 6,
                "special: affectedOptions.not": 1,
                "special: affectedOptions.addClass": 1,
                "special: affectedOptions.removeClass": 1,
                "special: event.metaKey": 1,
                "special: event.ctrlKey": 1,
                "special: li.siblings": 4,
                "special: li.addClass": 6,
                "special: control.find": 4,
                "special: li.text": 2,
                "special: li.find": 2,
                "special: select.val": 10,
                "special: SelectBox.prototype.addHover": 1,
                "special: selectBox-hover": 8,
                "special: SelectBox.prototype.getSelectElement": 1,
                "special: SelectBox.prototype.removeHover": 1,
                "special: SelectBox.prototype.keepOptionInView": 1,
                "special: options.parent": 2,
                "special: li.offset": 8,
                "special: scrollBox.position": 1,
                "special: li.outerHeight": 2,
                "special: scrollBox.scrollTop": 6,
                "special: scrollBox.offset": 3,
                "special: scrollBox.height": 3,
                "special: open/close": 2,
                "special: SelectBox.prototype.handleKeyDown": 1,
                "special: event.keyCode": 3,
                "special: this.removeHover": 1,
                "special: this.selectOption": 3,
                "special: LI.selectBox": 1,
                "special: hover:first": 2,
                "special: LI:not": 2,
                "special: prev.length": 4,
                "special: prev.hasClass": 2,
                "special: prev.prev": 2,
                "special: settings.loopOptions": 2,
                "special: LI:last": 2,
                "special: LI:first": 2,
                "special: next.length": 4,
                "special: next.hasClass": 2,
                "special: next.next": 2,
                "special: type-to-find": 2,
                "special: SelectBox.prototype.handleKeyPress": 1,
                "special: String.fromCharCode": 1,
                "special: event.charCode": 1,
                "special: self.typeSearch.length": 1,
                "special: self.typeSearch.toLowerCase": 1,
                "special: self.keepOptionInView": 1,
                "special: self.typeSearch": 1,
                "special: SelectBox.prototype.enable": 1,
                "special: SelectBox.prototype.disable": 1,
                "special: SelectBox.prototype.setValue": 1,
                "special: non-exist": 2,
                "special: value.length": 2,
                "special: settings.change": 2,
                "special: settings.change.call": 2,
                "special: SelectBox.prototype.setOptions": 1,
                "special: select.html": 4,
                "special: optgroup.append": 2,
                "special: select.append": 4,
                "special: this.refresh": 2,
                "special: SelectBox.prototype.disableSelection": 1,
                "special: SelectBox.prototype.generateOptions": 1,
                "special: self.attr": 6,
                "special: li.data": 2,
                "special: self.data": 2,
                "special: a.attr": 2,
                "special: self.val": 2,
                "special: self.text": 2,
                "special: li.append": 2,
                "special: jQuery.fn": 1,
                "special: selectBox.setOptions": 1,
                "special: selectBox.setValue": 1,
                "special: selectBox.refresh": 1,
                "special: selectBox.enable": 1,
                "special: selectBox.disable": 1,
                "special: selectBox.destroy": 1,
                "/* * jquery selectbox - a cosmetic, styleable replacement for select elements * * licensed under the mit license: http://opensource.org/licenses/mit * * v1.2.0 * * https://github.com/marcj/jquery-selectbox */": 1,
                "(function ($) { /** * selectbox class. * * @param {htmlelement|jquery} select if it's a jquery object, we use the first element. * @param {object} options * @constructor */ var selectbox = this.selectbox = function (select, options) { if (select instanceof jquery) { if (select.length > 0) { select = select[0]": 1,
                "} else { return": 1,
                "} } this.typetimer = null": 1,
                "this.typesearch = ''": 2,
                "this.ismac = navigator.platform.match(/mac/i)": 1,
                "options = 'object' === typeof options ? options : {}": 1,
                "this.selectelement = select": 1,
                "// disable for ios devices (their native controls are more suitable for a touch device) if (!options.mobile && navigator.useragent.match(/ipad|iphone|android|iemobile|blackberry/i)) { return false": 1,
                "} // element must be a select control if ('select' !== select.tagname.tolowercase()) { return false": 1,
                "} this.init(options)": 1,
                "} /** * @type {string} */ selectbox.prototype.version = '1.2.0'": 1,
                "/** * @param {object} options * * @returns {boolean} */ selectbox.prototype.init = function (options) { var select = $(this.selectelement)": 1,
                "if (select.data('selectbox-control')) { return false": 1,
                "} var control = $('<a class=\"selectbox\" />') , inline = select.attr('multiple') || parseint(select.attr('size')) > 1 , settings = options || {} , tabindex = parseint(select.prop('tabindex')) || 0 , self = this": 1,
                "control .width(select.outerwidth()) .addclass(select.attr('class')) .attr('title', select.attr('title') || '') .attr('tabindex', tabindex) .css('display', 'inline-block') .bind('focus.selectbox', function () { if (this !== document.activeelement && document.body !== document.activeelement) { $(document.activeelement).blur()": 1,
                "} if (control.hasclass('selectbox-active')) { return": 1,
                "} control.addclass('selectbox-active')": 1,
                "}) .bind('blur.selectbox', function () { if (!control.hasclass('selectbox-active')) { return": 1,
                "} control.removeclass('selectbox-active')": 1,
                "if (!$(window).data('selectbox-bindings')) { $(window) .data('selectbox-bindings', true) .bind('scroll.selectbox', this.hidemenus) .bind('resize.selectbox', this.hidemenus)": 1,
                "} if (select.attr('disabled')) { control.addclass('selectbox-disabled')": 1,
                "} // focus on control when label is clicked select.bind('click.selectbox', function (event) { control.focus()": 1,
                "event.preventdefault()": 1,
                "// generate control if (inline) { // inline controls options = this.getoptions('inline')": 1,
                "control .append(options) .data('selectbox-options', options).addclass('selectbox-inline selectbox-menushowing') .bind('keydown.selectbox', function (event) { self.handlekeydown(event)": 1,
                "}) .bind('keypress.selectbox',function (event) { self.handlekeypress(event)": 1,
                "}) .bind('mousedown.selectbox',function (event) { if (1 !== event.which) { return": 1,
                "} if ($(event.target).is('a.selectbox-inline')) { event.preventdefault()": 1,
                "} if (!control.hasclass('selectbox-focus')) { control.focus()": 1,
                "} }) .insertafter(select)": 1,
                "// auto-height based on size attribute if (!select[0].style.height) { var size = select.attr('size') ? parseint(select.attr('size')) : 5": 1,
                "// draw a dummy control off-screen, measure, and remove it var tmp = control .clone() .removeattr('id') .css({ position: 'absolute', top: '-9999em' }) .show() .appendto('body')": 1,
                "tmp.find('.selectbox-options').html('<li>": 1,
                "<a>\\u00a0</a>": 1,
                "var optionheight = parseint(tmp.find('.selectbox-options a:first').html('&nbsp": 1,
                "').outerheight())": 1,
                "control.height(optionheight * size)": 1,
                "} this.disableselection(control)": 1,
                "} else { // dropdown controls var label = $('<span class=\"selectbox-label\" />'), arrow = $('<span class=\"selectbox-arrow\" />')": 1,
                "// update label label.attr('class', this.getlabelclass()).text(this.getlabeltext())": 1,
                "options = this.getoptions('dropdown')": 1,
                "options.appendto('body')": 1,
                "control .data('selectbox-options', options) .addclass('selectbox-dropdown') .append(label) .append(arrow) .bind('mousedown.selectbox', function (event) { if (1 === event.which) { if (control.hasclass('selectbox-menushowing')) { self.hidemenus()": 1,
                "} else { event.stoppropagation()": 1,
                "// webkit fix to prevent premature selection of options options .data('selectbox-down-at-x', event.screenx) .data('selectbox-down-at-y', event.screeny)": 1,
                "self.showmenu()": 1,
                "} } }) .bind('keydown.selectbox', function (event) { self.handlekeydown(event)": 1,
                "}) .bind('keypress.selectbox', function (event) { self.handlekeypress(event)": 1,
                "}) .bind('open.selectbox',function (event, triggerdata) { if (triggerdata && triggerdata._selectbox === true) { return": 1,
                "} self.showmenu()": 1,
                "}) .bind('close.selectbox', function (event, triggerdata) { if (triggerdata && triggerdata._selectbox === true) { return": 1,
                "} self.hidemenus()": 3,
                "}) .insertafter(select)": 1,
                "// set label width var labelwidth = control.width() - arrow.outerwidth() - (parseint(label.css('paddingleft')) || 0) - (parseint(label.css('paddingright')) || 0)": 1,
                "label.width(labelwidth)": 1,
                "this.disableselection(control)": 1,
                "} // store data for later use and show the control select .addclass('selectbox') .data('selectbox-control', control) .data('selectbox-settings', settings) .hide()": 1,
                "/** * @param {string} type 'inline'|'dropdown' * @returns {jquery} */ selectbox.prototype.getoptions = function (type) { var options": 1,
                "var select = $(this.selectelement)": 1,
                "// private function to handle recursion in the getoptions function. var _getoptions = function (select, options) { // loop through the set in order of element children. select.children('option, optgroup').each(function () { // if the element is an option, add it to the list. if ($(this).is('option')) { // check for a value in the option found. if ($(this).length > 0) { // create an option form the found element. self.generateoptions($(this), options)": 1,
                "} else { // no option information found, so add an empty. options.append('<li>\\u00a0</li>')": 1,
                "} } else { // if the element is an option group, add the group and call this function on it. var optgroup = $('<li class=\"selectbox-optgroup\" />')": 1,
                "options = _getoptions($(this), options)": 1,
                "// return the built strin return options": 1,
                "switch (type) { case 'inline': options = $('<ul class=\"selectbox-options\" />')": 1,
                "options = _getoptions(select, options)": 2,
                "options .find('a') .bind('mouseover.selectbox', function (event) { self.addhover($(this).parent())": 1,
                "}) .bind('mouseout.selectbox',function (event) { self.removehover($(this).parent())": 1,
                "}) .bind('mousedown.selectbox',function (event) { if (1 !== event.which) { return } event.preventdefault()": 1,
                "// prevent options from being \"dragged\" if (!select.selectbox('control').hasclass('selectbox-active')) { select.selectbox('control').focus()": 1,
                "} }) .bind('mouseup.selectbox', function (event) { if (1 !== event.which) { return": 1,
                "self.selectoption($(this).parent(), event)": 2,
                "this.disableselection(options)": 1,
                "case 'dropdown': options = $('<ul class=\"selectbox-dropdown-menu selectbox-options\" />')": 1,
                "options .data('selectbox-select', select) .css('display', 'none') .appendto('body') .find('a') .bind('mousedown.selectbox', function (event) { if (event.which === 1) { event.preventdefault()": 1,
                "// prevent options from being \"dragged\" if (event.screenx === options.data('selectbox-down-at-x') && event.screeny === options.data('selectbox-down-at-y')) { options.removedata('selectbox-down-at-x').removedata('selectbox-down-at-y')": 1,
                "self.hidemenus()": 2,
                "} } }) .bind('mouseup.selectbox', function (event) { if (1 !== event.which) { return": 1,
                "} if (event.screenx === options.data('selectbox-down-at-x') && event.screeny === options.data('selectbox-down-at-y')) { return": 1,
                "} else { options.removedata('selectbox-down-at-x').removedata('selectbox-down-at-y')": 1,
                "} self.selectoption($(this).parent())": 1,
                "}) .bind('mouseover.selectbox', function (event) { self.addhover($(this).parent())": 1,
                "}) .bind('mouseout.selectbox', function (event) { self.removehover($(this).parent())": 1,
                "// inherit classes for dropdown menu var classes = select.attr('class') || ''": 1,
                "if ('' !== classes) { classes = classes.split(' ')": 1,
                "for (var i in classes) { options.addclass(classes[i] + '-selectbox-dropdown-menu')": 1,
                "} } this.disableselection(options)": 1,
                "/** * returns the current class of the selected option. * * @returns {string} */ selectbox.prototype.getlabelclass = function () { var selected = $(this.selectelement).find('option:selected')": 1,
                "return ('selectbox-label ' + (selected.attr('class') || '')).replace(/\\s+$/, '')": 1,
                "/** * returns the current label of the selected option. * * @returns {string} */ selectbox.prototype.getlabeltext = function () { var selected = $(this.selectelement).find('option:selected')": 1,
                "return selected.text() || '\\u00a0'": 1,
                "/** * sets the label. * this method uses the getlabelclass() and getlabeltext() methods. */ selectbox.prototype.setlabel = function () { var select = $(this.selectelement)": 1,
                "var control = select.data('selectbox-control')": 4,
                "if (!control) { return": 5,
                "} control .find('.selectbox-label') .attr('class', this.getlabelclass()) .text(this.getlabeltext())": 1,
                "/** * destroys the selectbox instance and shows the origin select element. * */ selectbox.prototype.destroy = function () { var select = $(this.selectelement)": 1,
                "} var options = control.data('selectbox-options')": 1,
                "select .removeclass('selectbox') .removedata('selectbox-control') .data('selectbox-control', null) .removedata('selectbox-settings') .data('selectbox-settings', null) .show()": 1,
                "/** * refreshes the option elements. */ selectbox.prototype.refresh = function () { var select = $(this.selectelement) , control = select.data('selectbox-control') , type = control.hasclass('selectbox-dropdown') ? 'dropdown' : 'inline' , options": 1,
                "// remove old options control.data('selectbox-options').remove()": 1,
                "// generate new options options = this.getoptions(type)": 1,
                "control.data('selectbox-options', options)": 1,
                "switch (type) { case 'inline': control.append(options)": 1,
                "case 'dropdown': // update label this.setlabel()": 1,
                "$(\"body\").append(options)": 1,
                "} // restore opened dropdown state (original menu was trashed) if ('dropdown' === type && control.hasclass('selectbox-menushowing')) { this.showmenu()": 1,
                "/** * shows the dropdown menu. */ selectbox.prototype.showmenu = function () { var self = this , select = $(this.selectelement) , control = select.data('selectbox-control') , settings = select.data('selectbox-settings') , options = control.data('selectbox-options')": 1,
                "if (control.hasclass('selectbox-disabled')) { return false": 2,
                "} this.hidemenus()": 1,
                "var borderbottomwidth = parseint(control.css('borderbottomwidth')) || 0": 1,
                "// menu position options .width(control.innerwidth()) .css({ top: control.offset().top + control.outerheight() - borderbottomwidth, left: control.offset().left })": 1,
                "if (select.triggerhandler('beforeopen')) { return false": 1,
                "} var dispatchopenevent = function () { select.triggerhandler('open', { _selectbox: true })": 1,
                "// show menu switch (settings.menutransition) { case 'fade': options.fadein(settings.menuspeed, dispatchopenevent)": 1,
                "case 'slide': options.slidedown(settings.menuspeed, dispatchopenevent)": 1,
                "default: options.show(settings.menuspeed, dispatchopenevent)": 1,
                "} if (!settings.menuspeed) { dispatchopenevent()": 1,
                "} // center on selected option var li = options.find('.selectbox-selected:first')": 1,
                "this.keepoptioninview(li, true)": 1,
                "this.addhover(li)": 1,
                "control.addclass('selectbox-menushowing')": 1,
                "$(document).bind('mousedown.selectbox', function (event) { if (1 === event.which) { if ($(event.target).parents().andself().hasclass('selectbox-options')) { return": 1,
                "/** * hides the menu of all instances. */ selectbox.prototype.hidemenus = function () { if ($(\".selectbox-dropdown-menu:visible\").length === 0) { return": 1,
                "} $(document).unbind('mousedown.selectbox')": 1,
                "$(\".selectbox-dropdown-menu\").each(function () { var options = $(this) , select = options.data('selectbox-select') , control = select.data('selectbox-control') , settings = select.data('selectbox-settings')": 1,
                "if (select.triggerhandler('beforeclose')) { return false": 1,
                "} var dispatchcloseevent = function () { select.triggerhandler('close', { _selectbox: true })": 1,
                "if (settings) { switch (settings.menutransition) { case 'fade': options.fadeout(settings.menuspeed, dispatchcloseevent)": 1,
                "case 'slide': options.slideup(settings.menuspeed, dispatchcloseevent)": 1,
                "default: options.hide(settings.menuspeed, dispatchcloseevent)": 1,
                "} if (!settings.menuspeed) { dispatchcloseevent()": 1,
                "} control.removeclass('selectbox-menushowing')": 1,
                "} else { $(this).hide()": 1,
                "$(this).triggerhandler('close', { _selectbox: true })": 1,
                "$(this).removeclass('selectbox-menushowing')": 1,
                "/** * selects an option. * * @param {htmlelement} li * @param {domevent} event * @returns {boolean} */ selectbox.prototype.selectoption = function (li, event) { var select = $(this.selectelement)": 1,
                "var control = select.data('selectbox-control') , settings = select.data('selectbox-settings')": 1,
                "} if (0 === li.length || li.hasclass('selectbox-disabled')) { return false": 1,
                "} if (select.attr('multiple')) { // if event.shiftkey is true, this will select all options between li and the last li selected if (event.shiftkey && control.data('selectbox-last-selected')) { li.toggleclass('selectbox-selected')": 1,
                "var affectedoptions": 1,
                "if (li.index() > control.data('selectbox-last-selected').index()) { affectedoptions = li .siblings() .slice(control.data('selectbox-last-selected').index(), li.index())": 1,
                "} else { affectedoptions = li .siblings() .slice(li.index(), control.data('selectbox-last-selected').index())": 1,
                "} affectedoptions = affectedoptions.not('.selectbox-optgroup, .selectbox-disabled')": 1,
                "if (li.hasclass('selectbox-selected')) { affectedoptions.addclass('selectbox-selected')": 1,
                "} else { affectedoptions.removeclass('selectbox-selected')": 1,
                "} } else if ((this.ismac && event.metakey) || (!this.ismac && event.ctrlkey)) { li.toggleclass('selectbox-selected')": 1,
                "} else { li.siblings().removeclass('selectbox-selected')": 1,
                "li.addclass('selectbox-selected')": 2,
                "} } else { li.siblings().removeclass('selectbox-selected')": 1,
                "} if (control.hasclass('selectbox-dropdown')) { control.find('.selectbox-label').text(li.text())": 1,
                "} // update original control's value var i = 0, selection = []": 1,
                "if (select.attr('multiple')) { control.find('.selectbox-selected a').each(function () { selection[i++] = $(this).attr('rel')": 1,
                "} else { selection = li.find('a').attr('rel')": 1,
                "} // remember most recently selected item control.data('selectbox-last-selected', li)": 1,
                "// change callback if (select.val() !== selection) { select.val(selection)": 1,
                "this.setlabel()": 1,
                "} return true": 1,
                "/** * adds the hover class. * * @param {htmlelement} li */ selectbox.prototype.addhover = function (li) { li = $(li)": 1,
                "var select = $(this.selectelement) , control = select.data('selectbox-control') , options = control.data('selectbox-options')": 2,
                "options.find('.selectbox-hover').removeclass('selectbox-hover')": 2,
                "li.addclass('selectbox-hover')": 1,
                "/** * returns the original html select element. * * @returns {htmlelement} */ selectbox.prototype.getselectelement = function () { return this.selectelement": 1,
                "/** * remove the hover class. * * @param {htmlelement} li */ selectbox.prototype.removehover = function (li) { li = $(li)": 1,
                "/** * checks if the widget is in the view. * * @param {jquery} li * @param {boolean} center */ selectbox.prototype.keepoptioninview = function (li, center) { if (!li || li.length === 0) { return": 1,
                "} var select = $(this.selectelement) , control = select.data('selectbox-control') , options = control.data('selectbox-options') , scrollbox = control.hasclass('selectbox-dropdown') ? options : options.parent() , top = parseint(li.offset().top -scrollbox.position().top) , bottom = parseint(top + li.outerheight())": 1,
                "if (center) { scrollbox.scrolltop(li.offset().top - scrollbox.offset().top + scrollbox.scrolltop() - (scrollbox.height() / 2))": 1,
                "} else { if (top < 0) { scrollbox.scrolltop(li.offset().top - scrollbox.offset().top + scrollbox.scrolltop())": 1,
                "} if (bottom > scrollbox.height()) { scrollbox.scrolltop((li.offset().top + li.outerheight()) - scrollbox.offset().top + scrollbox.scrolltop() - scrollbox.height())": 1,
                "/** * handles the keydown event. * handles open/close and arrow key functionality * * @param {domevent} event */ selectbox.prototype.handlekeydown = function (event) { var select = $(this.selectelement) , control = select.data('selectbox-control') , options = control.data('selectbox-options') , settings = select.data('selectbox-settings') , totaloptions = 0, i = 0": 1,
                "if (control.hasclass('selectbox-disabled')) { return": 2,
                "} switch (event.keycode) { case 8: // backspace event.preventdefault()": 1,
                "case 9: // tab case 27: // esc this.hidemenus()": 1,
                "this.removehover()": 1,
                "case 13: // enter if (control.hasclass('selectbox-menushowing')) { this.selectoption(options.find('li.selectbox-hover:first'), event)": 1,
                "if (control.hasclass('selectbox-dropdown')) { this.hidemenus()": 1,
                "} } else { this.showmenu()": 1,
                "} break": 3,
                "case 38: // up case 37: // left event.preventdefault()": 1,
                "if (control.hasclass('selectbox-menushowing')) { var prev = options.find('.selectbox-hover').prev('li')": 1,
                "totaloptions = options.find('li:not(.selectbox-optgroup)').length": 2,
                "while (prev.length === 0 || prev.hasclass('selectbox-disabled') || prev.hasclass('selectbox-optgroup')) { prev = prev.prev('li')": 1,
                "if (prev.length === 0) { if (settings.loopoptions) { prev = options.find('li:last')": 1,
                "} else { prev = options.find('li:first')": 1,
                "} } if (++i >= totaloptions) { break": 2,
                "} } this.addhover(prev)": 1,
                "this.selectoption(prev, event)": 1,
                "this.keepoptioninview(prev)": 1,
                "} else { this.showmenu()": 2,
                "case 40: // down case 39: // right event.preventdefault()": 1,
                "if (control.hasclass('selectbox-menushowing')) { var next = options.find('.selectbox-hover').next('li')": 1,
                "while (0 === next.length || next.hasclass('selectbox-disabled') || next.hasclass('selectbox-optgroup')) { next = next.next('li')": 1,
                "if (next.length === 0) { if (settings.loopoptions) { next = options.find('li:first')": 1,
                "} else { next = options.find('li:last')": 1,
                "} } this.addhover(next)": 1,
                "this.selectoption(next, event)": 1,
                "this.keepoptioninview(next)": 1,
                "/** * handles the keypress event. * handles type-to-find functionality * * @param {domevent} event */ selectbox.prototype.handlekeypress = function (event) { var select = $(this.selectelement) , control = select.data('selectbox-control') , options = control.data('selectbox-options') , self = this": 1,
                "} switch (event.keycode) { case 9: // tab case 27: // esc case 13: // enter case 38: // up case 37: // left case 40: // down case 39: // right // don't interfere with the keydown event! break": 1,
                "default: // type to find if (!control.hasclass('selectbox-menushowing')) { this.showmenu()": 1,
                "} event.preventdefault()": 1,
                "cleartimeout(this.typetimer)": 1,
                "this.typesearch += string.fromcharcode(event.charcode || event.keycode)": 1,
                "options.find('a').each(function () { if ($(this).text().substr(0, self.typesearch.length).tolowercase() === self.typesearch.tolowercase()) { self.addhover($(this).parent())": 1,
                "self.keepoptioninview($(this).parent())": 1,
                "// clear after a brief pause this.typetimer = settimeout(function () { self.typesearch = ''": 1,
                "/** * enables the selectbox. */ selectbox.prototype.enable = function () { var select = $(this.selectelement)": 1,
                "} control.removeclass('selectbox-disabled')": 1,
                "/** * disables the selectbox. */ selectbox.prototype.disable = function () { var select = $(this.selectelement)": 1,
                "} control.addclass('selectbox-disabled')": 1,
                "/** * sets the current value. * * @param {string} value */ selectbox.prototype.setvalue = function (value) { var select = $(this.selectelement)": 1,
                "// ie9's select would be null if it was set with a non-exist options value if (null === value) { // so check it here and set it with the first option's value if possible value = select.children().first().val()": 1,
                "} var control = select.data('selectbox-control')": 1,
                "} var settings = select.data('selectbox-settings') , options = control.data('selectbox-options')": 1,
                "// update label this.setlabel()": 1,
                "// update control values options.find('.selectbox-selected').removeclass('selectbox-selected')": 1,
                "options.find('a').each(function () { if (typeof(value) === 'object') { for (var i = 0": 1,
                "i++) { if ($(this).attr('rel') == value[i]) { $(this).parent().addclass('selectbox-selected')": 1,
                "} } } else { if ($(this).attr('rel') == value) { $(this).parent().addclass('selectbox-selected')": 1,
                "} } })": 1,
                "if (settings.change) { settings.change.call(select)": 1,
                "/** * sets the option elements. * * @param {string|object} options */ selectbox.prototype.setoptions = function (options) { var select = $(this.selectelement) , control = select.data('selectbox-control')": 1,
                "switch (typeof(options)) { case 'string': select.html(options)": 1,
                "case 'object': select.html('')": 1,
                "for (var i in options) { if (options[i] === null) { continue": 1,
                "} if (typeof(options[i]) === 'object') { var optgroup = $('<optgroup label=\"' + i + '\" />')": 1,
                "for (var j in options[i]) { optgroup.append('<option value=\"' + j + '\">' + options[i][j] + '</option>')": 1,
                "} select.append(optgroup)": 1,
                "} else { var option = $('<option value=\"' + i + '\">' + options[i] + '</option>')": 1,
                "} } break": 1,
                "} if (control) { // refresh the control this.refresh()": 1,
                "/** * disables the selection. * * @param {*} selector */ selectbox.prototype.disableselection = function (selector) { $(selector).css('mozuserselect', 'none').bind('selectstart', function (event) { event.preventdefault()": 1,
                "/** * generates the options. * * @param {jquery} self * @param {jquery} options */ selectbox.prototype.generateoptions = function (self, options) { var li = $('<li />'), a = $('<a />')": 1,
                "li.addclass(self.attr('class'))": 1,
                "if (self.attr('disabled')) { li.addclass('selectbox-disabled')": 1,
                "} if (self.attr('selected')) { li.addclass('selectbox-selected')": 1,
                "} options.append(li)": 1,
                "/** * extends the jquery.fn object. */ $.extend($.fn, { selectbox: function (method, options) { var selectbox": 1,
                "switch (method) { case 'control': return $(this).data('selectbox-control')": 1,
                "case 'settings': if (!options) { return $(this).data('selectbox-settings')": 1,
                "} $(this).each(function () { $(this).data('selectbox-settings', $.extend(true, $(this).data('selectbox-settings'), options))": 1,
                "case 'options': // getter if (undefined === options) { return $(this).data('selectbox-control').data('selectbox-options')": 1,
                "} // setter $(this).each(function () { if (selectbox = $(this).data('selectbox')) { selectbox.setoptions(options)": 1,
                "case 'value': // empty string is a valid value if (undefined === options) { return $(this).val()": 1,
                "} $(this).each(function () { if (selectbox = $(this).data('selectbox')) { selectbox.setvalue(options)": 1,
                "case 'refresh': $(this).each(function () { if (selectbox = $(this).data('selectbox')) { selectbox.refresh()": 1,
                "case 'enable': $(this).each(function () { if (selectbox = $(this).data('selectbox')) { selectbox.enable(this)": 1,
                "case 'disable': $(this).each(function () { if (selectbox = $(this).data('selectbox')) { selectbox.disable()": 1,
                "case 'destroy': $(this).each(function () { if (selectbox = $(this).data('selectbox')) { selectbox.destroy()": 1,
                "$(this).data('selectbox', null)": 1,
                "case 'instance': return $(this).data('selectbox')": 1,
                "default: $(this).each(function (idx, select) { if (!$(select).data('selectbox')) { $(select).data('selectbox', new selectbox(select, method))": 1,
                "} return $(this)": 1,
                "})(jquery)": 1,
                "special: this.selectbox": 1,
                "special: this.typetimer": 3,
                "special: this.typesearch": 3,
                "special: this.ismac": 3,
                "special: this.selectelement": 20,
                "special: navigator.useragent.match": 1,
                "special: select.tagname.tolowercase": 1,
                "special: selectbox.prototype.version": 1,
                "special: selectbox.prototype.init": 1,
                "special: select.outerwidth": 1,
                "special: focus.selectbox": 1,
                "special: document.activeelement": 3,
                "special: control.hasclass": 17,
                "special: control.addclass": 4,
                "special: blur.selectbox": 1,
                "special: control.removeclass": 3,
                "special: scroll.selectbox": 1,
                "special: this.hidemenus": 5,
                "special: resize.selectbox": 1,
                "special: click.selectbox": 1,
                "special: event.preventdefault": 9,
                "special: this.getoptions": 3,
                "special: keydown.selectbox": 2,
                "special: self.handlekeydown": 2,
                "special: keypress.selectbox": 2,
                "special: self.handlekeypress": 2,
                "special: mousedown.selectbox": 6,
                "special: a.selectbox": 1,
                "special: this.disableselection": 4,
                "special: this.getlabelclass": 2,
                "special: this.getlabeltext": 2,
                "special: options.appendto": 1,
                "special: self.hidemenus": 6,
                "special: event.stoppropagation": 1,
                "special: event.screenx": 3,
                "special: event.screeny": 3,
                "special: self.showmenu": 2,
                "special: open.selectbox": 1,
                "special: close.selectbox": 1,
                "special: arrow.outerwidth": 1,
                "special: selectbox.prototype.getoptions": 1,
                "special: self.generateoptions": 1,
                "special: mouseover.selectbox": 2,
                "special: self.addhover": 3,
                "special: mouseout.selectbox": 2,
                "special: self.removehover": 2,
                "special: select.selectbox": 2,
                "special: mouseup.selectbox": 2,
                "special: self.selectoption": 3,
                "special: options.removedata": 2,
                "special: options.addclass": 1,
                "special: selectbox.prototype.getlabelclass": 1,
                "special: selectbox.prototype.getlabeltext": 1,
                "special: selectbox.prototype.setlabel": 1,
                "special: selectbox.prototype.destroy": 1,
                "special: selectbox.prototype.refresh": 1,
                "special: this.setlabel": 3,
                "special: this.showmenu": 5,
                "special: selectbox.prototype.showmenu": 1,
                "special: control.innerwidth": 1,
                "special: control.outerheight": 1,
                "special: select.triggerhandler": 4,
                "special: settings.menutransition": 2,
                "special: options.fadein": 1,
                "special: settings.menuspeed": 8,
                "special: options.slidedown": 1,
                "special: this.keepoptioninview": 3,
                "special: this.addhover": 3,
                "special: selectbox.prototype.hidemenus": 1,
                "special: options.fadeout": 1,
                "special: options.slideup": 1,
                "special: selectbox.prototype.selectoption": 1,
                "special: li.hasclass": 2,
                "special: event.shiftkey": 2,
                "special: li.toggleclass": 2,
                "special: affectedoptions.not": 1,
                "special: affectedoptions.addclass": 1,
                "special: affectedoptions.removeclass": 1,
                "special: event.metakey": 1,
                "special: event.ctrlkey": 1,
                "special: li.addclass": 6,
                "special: selectbox.prototype.addhover": 1,
                "special: selectbox.prototype.getselectelement": 1,
                "special: selectbox.prototype.removehover": 1,
                "special: selectbox.prototype.keepoptioninview": 1,
                "special: scrollbox.position": 1,
                "special: li.outerheight": 2,
                "special: scrollbox.scrolltop": 6,
                "special: scrollbox.offset": 3,
                "special: scrollbox.height": 3,
                "special: selectbox.prototype.handlekeydown": 1,
                "special: event.keycode": 3,
                "special: this.removehover": 1,
                "special: this.selectoption": 3,
                "special: li.selectbox": 1,
                "special: prev.hasclass": 2,
                "special: settings.loopoptions": 2,
                "special: next.hasclass": 2,
                "special: selectbox.prototype.handlekeypress": 1,
                "special: string.fromcharcode": 1,
                "special: event.charcode": 1,
                "special: self.typesearch.length": 1,
                "special: self.typesearch.tolowercase": 1,
                "special: self.keepoptioninview": 1,
                "special: self.typesearch": 1,
                "special: selectbox.prototype.enable": 1,
                "special: selectbox.prototype.disable": 1,
                "special: selectbox.prototype.setvalue": 1,
                "special: selectbox.prototype.setoptions": 1,
                "special: selectbox.prototype.disableselection": 1,
                "special: selectbox.prototype.generateoptions": 1,
                "special: jquery.fn": 1,
                "special: selectbox.setoptions": 1,
                "special: selectbox.setvalue": 1,
                "special: selectbox.refresh": 1,
                "special: selectbox.enable": 1,
                "special: selectbox.disable": 1,
                "special: selectbox.destroy": 1,
                "special: org/licenses/mit": 1,
                "special: blackberry/i": 1,
                "special: jquery-selectbox": 1,
                "special: selectbox-control": 21,
                "special: selectbox-active": 5,
                "special: selectbox-bindings": 2,
                "special: selectbox-disabled": 12,
                "special: selectbox-options": 18,
                "special: selectbox-inline": 2,
                "special: selectbox-menushowing": 10,
                "special: selectbox-focus": 1,
                "special: auto-height": 1,
                "special: selectbox-label": 4,
                "special: selectbox-arrow": 1,
                "special: selectbox-dropdown": 5,
                "special: selectbox-down-at-x": 5,
                "special: selectbox-down-at-y": 5,
                "special: selectbox-settings": 11,
                "special: selectbox-optgroup": 6,
                "special: selectbox-dropdown-menu": 4,
                "special: selectbox-select": 2,
                "special: selectbox-selected": 16,
                "special: selectbox-last-selected": 5,
                "special: selectbox-hover": 8,
                "special: a:first": 1,
                "special: option:selected": 2,
                "special: li:not": 2,
                "special: li:last": 2,
                "special: li:first": 2
            }
        },
        {
            "plugin": "extractors.meta",
            "version": "0.1",
            "results": {
                "clamav: Cannot dlopen libclamunrar_iface: file not found - unrar support unavailable": 1,
                "clamav: cli_loadftm: File type signature for Microsoft Windows Shortcut File not loaded (required f-level: 1??)": 1,
                "clamav: [Bytecode JIT]; emitted ELF64-x86-64 <in-memory object> of 7?? bytes": 1,
                "clamav: bytecode self test running": 1,
                "clamav: Bytecode 4?????????: executing in JIT mode": 1,
                "clamav: bytecode finished in 0 us": 1,
                "clamav: bytecode self test succeeded": 1,
                "clamav: [Bytecode JIT]; emitted ELF64-x86-64 <in-memory object> of 1????? bytes": 1,
                "clamav: Bytecode: 94 bytecode prepared with JIT": 1,
                "clamav: Recognized ASCII text": 1,
                "clamav: cli_magic_scandesc: returning 0  at line 2???": 1,
                "clamav: malware family: OK": 1,
                "clamav: OK": 1,
                "clamav: Scanned files: 1": 1,
                "clamav: Infected files: 0": 1,
                "clamav: extracted blobs": 1,
                "clamav: extracted 1 blobs": 1,
                "clamav: blob size: 2????": 1,
                "clamav: Cannot dlopen libclamunrar_iface: file not found - unrar support unavailable;clamav: cli_loadftm: File type signature for Microsoft Windows Shortcut File not loaded (required f-level: 1??)": 1,
                "clamav: cli_loadftm: File type signature for Microsoft Windows Shortcut File not loaded (required f-level: 1??);clamav: [Bytecode JIT]; emitted ELF64-x86-64 <in-memory object> of 7?? bytes": 1,
                "clamav: [Bytecode JIT]; emitted ELF64-x86-64 <in-memory object> of 7?? bytes;clamav: bytecode self test running": 1,
                "clamav: bytecode self test running;clamav: Bytecode 4?????????: executing in JIT mode": 1,
                "clamav: Bytecode 4?????????: executing in JIT mode;clamav: bytecode finished in 0 us": 1,
                "clamav: bytecode finished in 0 us;clamav: bytecode self test succeeded": 1,
                "clamav: bytecode self test succeeded;clamav: [Bytecode JIT]; emitted ELF64-x86-64 <in-memory object> of 1????? bytes": 1,
                "clamav: [Bytecode JIT]; emitted ELF64-x86-64 <in-memory object> of 1????? bytes;clamav: Bytecode: 94 bytecode prepared with JIT": 1,
                "clamav: Bytecode: 94 bytecode prepared with JIT;clamav: Recognized ASCII text": 1,
                "clamav: Recognized ASCII text;clamav: cli_magic_scandesc: returning 0  at line 2???": 1,
                "clamav: cli_magic_scandesc: returning 0  at line 2???;clamav: malware family: OK": 1,
                "clamav: malware family: OK;clamav: OK": 1,
                "clamav: OK;clamav: Scanned files: 1": 1,
                "clamav: Scanned files: 1;clamav: Infected files: 0": 1,
                "clamav: Infected files: 0;clamav: extracted blobs": 1,
                "clamav: extracted blobs;clamav: extracted 1 blobs": 1,
                "clamav: extracted 1 blobs;clamav: blob size: 2????": 1,
                "File type: ASCII text": 1,
                "File type segment: ASCII text": 1,
                "File type word: ASCII": 1,
                "File type word: text": 1,
                "Extracted blob: ASCII text, with very long lines, with no line terminators": 1,
                "blob file types: ASCII": 1
            }
        }
    ]
}