import collections
import re
import subprocess
import zlib

__version__ = '0.1'
__enabled__ = True

NGRAM_LEN = 5
DECIMATION = 20


def run(filepath='', fileinfo=None, **kwargs):
    print("%s.run(%s, %s, %s)"%(__name__, filepath, fileinfo, kwargs))

    assembly = []
    proc = subprocess.Popen(['objdump', '--disassemble', filepath], stdout=subprocess.PIPE)
    for line in proc.stdout.readlines():
        tokens = line.decode('utf-8', errors='replace').split('\t')
        if len(tokens) < 3:
            continue

        # remove address and bytes, keep mnemonic and args
        line = ' '.join(tokens[2:]).strip()

        # remove numbers (addresses and offsets are too fragile and position dependent)
        line = re.sub('0x[a-f0-9]*', '', line)
        line = re.sub('[0-9]*', '', line)

        assembly.append(line)

    ngrams = collections.Counter()
    for i in range(len(assembly)-NGRAM_LEN):
        ng = ';'.join(assembly[i:i+NGRAM_LEN])

        # decimate, don't save all ngrams
        if zlib.crc32(ng.encode('utf-8')) % DECIMATION == 0:
            ngrams[ng] += 1

    return ngrams
