import collections
import re

__version__ = '0.1'
__enabled__ = True

MIN_STR_LEN = 6

SPECIAL_STRING_REGEXS = [
    # dotted alpha.  For example: alpha.beta.gamma
    re.compile('[a-zA-Z]{2,}(\.[a-zA-Z]{2,})+'),
    # dotted numeric.  For example: 1.23.45
    re.compile('[0-9]+(\.[0-9]+)+'),

    # below from https://digitalfortress.tech/tricks/top-15-commonly-used-regex/
    # email
    re.compile('[a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}'),
    # url
    re.compile('(https?:\/\/)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)'),
    # IPv6
    re.compile('(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))'),
    # Date Format YYYY-MM-dd:
    re.compile('([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))'),
    # Date Format dd-MM-YYYY or dd.MM.YYYY or dd/MM/YYYY:
    re.compile('(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})'),
    # Date Format dd-mmm-YYYY or dd/mmm/YYYY or dd.mmm.YYYY
    re.compile('(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)(?:0?2|(?:Feb))\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})'),
]


def run(filepath='', fileinfo=None, **kwargs):
    print("    %s.run()" % __name__)
    with open(filepath, 'rb') as f:
        content = f.read()

    strings = collections.Counter()
    words = collections.Counter()
    specials = collections.Counter()
    for st in re.finditer(b'[\x20-\x7e]{%d,}' % MIN_STR_LEN, content):
        st = st.group(0).decode('utf-8', errors='replace')

        # split long lines of minified text
        st = st.replace('><', '>;<')  # so we split minified html
        for s in st.split(';'):  # so we split minified javascript
            s = s.strip()  # so we aren't thrown by indentation
            if len(s) >= MIN_STR_LEN:
                strings[s] += 1

        for wd in re.finditer('[a-zA-Z]{%d,}' % MIN_STR_LEN, st):
            wd = wd.group(0).lower()
            words['word: '+wd] += 1

        for regex in SPECIAL_STRING_REGEXS:
            for m in regex.finditer(st):
                specials['special: '+m.group(0)] += 1

    return strings + words + specials


