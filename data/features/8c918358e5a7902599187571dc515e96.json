{
    "filepath": "/corpus/family_4/428de69318eda21cd6f45078c93d59bac10d0ab9c64c4548c80a9655024963eb",
    "fileinfo": {
        "labels": {
            "family": "family_4"
        },
        "md5": "8c918358e5a7902599187571dc515e96",
        "type": "ASCII text, with very long lines, with no line terminators"
    },
    "plugins": [
        {
            "plugin": "extractors.disassembly",
            "version": "0.1",
            "results": {
                "xor al, ;jae ;jae ;js ;movsxd rbp, dword [rax]": 1,
                "invalid;xor al, ;movsxd rbp, dword gs:[rdi + ];sub byte gs:[rbx + ], bh;cmp dh, byte [rbx + ]": 1,
                "jbe ;outsb dx, byte [rsi];push rcx;movsxd rax, dword [edi + ];push ": 1,
                "push rcx;movsxd rbp, dword [ebp + ];invalid;invalid;push rdi": 1,
                "pop rax;jbe ;outsb dx, byte [rsi];push rcx;push ": 1,
                "jbe ;outsb dx, byte [rsi];push rcx;push ;imul esp, dword [rcx + ], ": 1,
                "je ;cmp dword [r9 + ], r15d;push ;insb byte [rdi], dx;ja ": 1,
                "xor esp, dword [rax + rsi*2 + ];insd dword [rdi], dx;push rdx;jae ;cmp dword [r9 + ], ecx": 1,
                "push rbx;pop rdx;pop rax;xor dword [rdx + ], r11d;xor byte [rdx + ], r9b": 1
            }
        },
        {
            "plugin": "extractors.strings",
            "version": "0.1",
            "results": {
                "import base64,sys": 1,
                "exec(base64.b64decode({2:str,3:lambda b:bytes(b,'UTF-8')}[sys.version_info[0]]('')))": 1
            }
        },
        {
            "plugin": "extractors.meta",
            "version": "0.1",
            "results": {
                "binsz    71986": 1,
                "bits     64": 1,
                "canary   false": 1,
                "crypto   false": 1,
                "endian   little": 1,
                "havecode false": 1,
                "linenum  false": 1,
                "lsyms    false": 1,
                "maxopsz  16": 1,
                "minopsz  1": 1,
                "nx       false": 1,
                "pcalign  0": 1,
                "pic      false": 1,
                "relocs   false": 1,
                "static   true": 1,
                "stripped false": 1,
                "va       false": 1,
                "71986": 1
            }
        }
    ]
}